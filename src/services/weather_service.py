# src/services/weather_service.py
import logging
import aiohttp
from src.core.config import APP_USER_AGENT

logger = logging.getLogger(__name__)

GEOCODER_API_URL = "https://nominatim.openstreetmap.org/search"
WEATHER_API_URL = "https://api.open-meteo.com/v1/forecast"
PRIORITY_COUNTRY_CODES = "ru,by,ua,kz,kg,uz,md,am,ge,az"

def _get_weather_icon(weather_code: int) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–¥—É WMO (World Meteorological Organization).
    """
    if weather_code == 0: return "‚òÄÔ∏è"
    if weather_code == 1: return "üå§Ô∏è"
    if weather_code == 2: return "üå•Ô∏è"
    if weather_code == 3: return "‚òÅÔ∏è"
    if weather_code in [45, 48]: return "üå´Ô∏è"
    if weather_code in [51, 53, 55, 56, 57]: return "üíß"
    if weather_code in [61, 63, 65, 66, 67]: return "üåßÔ∏è"
    if weather_code in [71, 73, 75, 77]: return "‚ùÑÔ∏è"
    if weather_code in [80, 81, 82]: return "üå¶Ô∏è"
    if weather_code in [85, 86]: return "üå®Ô∏è"
    if weather_code in [95, 96, 99]: return "‚õàÔ∏è"
    return ""


async def _get_coords_for_city(city: str) -> tuple[float, float, str] | None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞) –∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–º—è –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ Nominatim,
    –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã.
    """
    params = {
        "q": city,
        "format": "json",
        "accept-language": "ru",
        "limit": 1,
        "countrycodes": PRIORITY_COUNTRY_CODES
    }
    headers = {"User-Agent": APP_USER_AGENT}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(GEOCODER_API_URL, params=params, headers=headers) as resp:
                if resp.status != 200:
                    logger.error(f"–û—à–∏–±–∫–∞ API Nominatim: {resp.status}, {await resp.text()}")
                    return None
                data = await resp.json()
                if not data:
                    logger.warning(f"–ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω Nominatim –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö.")
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –°–ù–ì
                    del params['countrycodes']
                    async with session.get(GEOCODER_API_URL, params=params, headers=headers) as fallback_resp:
                        data = await fallback_resp.json()
                        if not data:
                            logger.warning(f"–ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω Nominatim –≥–ª–æ–±–∞–ª—å–Ω–æ.")
                            return None

                result = data[0]
                lat, lon = float(result["lat"]), float(result["lon"])
                found_name = result.get("display_name", city).split(',')[0]
                return lat, lon, found_name
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è '{city}': {e}", exc_info=True)
        return None


async def get_weather_for_city(city: str) -> str | None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ Open-Meteo.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—É—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç—Ä–æ–∫—É –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    coords_data = await _get_coords_for_city(city)
    if not coords_data:
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ ¬´{city}¬ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."

    lat, lon, found_name = coords_data

    params = {
        "latitude": lat,
        "longitude": lon,
        "daily": "weathercode,temperature_2m_max,temperature_2m_min",
        "current_weather": "true",
        "timezone": "auto"
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(WEATHER_API_URL, params=params) as resp:
                if resp.status != 200:
                    logger.error(f"–û—à–∏–±–∫–∞ API Open-Meteo: {resp.status}, {await resp.text()}")
                    return "–°–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

                data = await resp.json()
                current = data.get("current_weather")
                daily = data.get("daily")

                if not current or not daily:
                    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã."

                temp_now = int(current.get('temperature'))
                weather_code_now = current.get('weathercode')
                icon_now = _get_weather_icon(weather_code_now)

                temp_min = int(daily.get('temperature_2m_min', [0])[0])
                temp_max = int(daily.get('temperature_2m_max', [0])[0])
                weather_code_day = daily.get('weathercode', [0])[0]
                icon_day = _get_weather_icon(weather_code_day)

                return (
                    f"–≤ –≥. {found_name}: —Å–µ–π—á–∞—Å {temp_now}¬∞{icon_now}, "
                    f"–¥–Ω—ë–º –æ—Ç {temp_min}¬∞ –¥–æ {temp_max}¬∞{icon_day}"
                )

    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è '{city}': {e}", exc_info=True)
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã."