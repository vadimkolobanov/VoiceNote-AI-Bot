# src/services/scheduler.py
import logging
import asyncio
import re
from datetime import datetime, time, timedelta, date
import pytz
from dateutil.rrule import rrulestr

from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.memory import MemoryJobStore
from apscheduler.executors.asyncio import AsyncIOExecutor
from aiogram.utils.markdown import hbold, hcode, hitalic
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from ..database import note_repo, birthday_repo, user_repo
from ..bot.common_utils.callbacks import NoteAction
from .tz_utils import format_datetime_for_user
from . import push_service, weather_service
from ..core.config import DEEPSEEK_API_KEY, DEEPSEEK_API_URL, DEEPSEEK_MODEL_NAME, WEATHER_SERVICE_ENABLED

logger = logging.getLogger(__name__)

jobstores = {'default': MemoryJobStore()}
executors = {'default': AsyncIOExecutor()}
scheduler = AsyncIOScheduler(jobstores=jobstores, executors=executors, timezone=pytz.utc)


def add_reminder_to_scheduler(bot: Bot, note: dict):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.
    """
    note_id = note.get('note_id')
    due_date_utc = note.get('due_date')
    is_vip = note.get('is_vip', False)

    if not note_id or not due_date_utc:
        return

    remove_reminder_from_scheduler(note_id)

    if due_date_utc.tzinfo is None:
        due_date_utc = pytz.utc.localize(due_date_utc)

    is_time_ambiguous = (due_date_utc.time() == time(0, 0, 0))
    final_due_date_utc = due_date_utc

    if is_time_ambiguous:
        default_time = note.get('default_reminder_time', time(9, 0)) if is_vip else time(12, 0)
        user_timezone_str = note.get('timezone', 'UTC')
        try:
            user_tz = pytz.timezone(user_timezone_str)
        except pytz.UnknownTimeZoneError:
            user_tz = pytz.utc

        local_due_date = datetime.combine(due_date_utc.date(), default_time)
        aware_local_due_date = user_tz.localize(local_due_date)
        final_due_date_utc = aware_local_due_date.astimezone(pytz.utc)

        asyncio.create_task(note_repo.update_note_due_date(note_id, final_due_date_utc))
        log_msg_time = f"{default_time.strftime('%H:%M')} (Free-user default)" if not is_vip else f"{default_time.strftime('%H:%M')} (VIP-user setting)"
        logger.info(f"–î–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ {log_msg_time}")

    now_utc = datetime.now(pytz.utc)

    if final_due_date_utc > now_utc:
        job_id_main = f"note_reminder_{note_id}_main"
        scheduler.add_job(
            send_reminder_notification,
            trigger='date',
            run_date=final_due_date_utc,
            id=job_id_main,
            kwargs={
                'bot': bot, 'telegram_id': note['telegram_id'], 'note_id': note_id,
                'note_text': note.get('summary_text', note['corrected_text']),
                'due_date': final_due_date_utc,
                'is_pre_reminder': False
            },
            replace_existing=True
        )
        logger.info(f"–û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {final_due_date_utc.isoformat()}")

    if is_vip:
        pre_reminder_minutes = note.get('pre_reminder_minutes', 0)
        if pre_reminder_minutes > 0:
            pre_reminder_time_utc = final_due_date_utc - timedelta(minutes=pre_reminder_minutes)
            if pre_reminder_time_utc > now_utc:
                job_id_pre = f"note_reminder_{note_id}_pre_{pre_reminder_minutes}"
                scheduler.add_job(
                    send_reminder_notification,
                    trigger='date',
                    run_date=pre_reminder_time_utc,
                    id=job_id_pre,
                    kwargs={
                        'bot': bot, 'telegram_id': note['telegram_id'], 'note_id': note_id,
                        'note_text': note.get('summary_text', note['corrected_text']),
                        'due_date': final_due_date_utc,
                        'is_pre_reminder': True
                    },
                    replace_existing=True
                )
                logger.info(
                    f"–ü—Ä–µ–¥-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {pre_reminder_time_utc.isoformat()} (–∑–∞ {pre_reminder_minutes} –º–∏–Ω.)")


def remove_reminder_from_scheduler(note_id: int):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ (–æ—Å–Ω–æ–≤–Ω—ã–µ –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ) –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏."""
    if not note_id: return
    prefix = f"note_reminder_{note_id}"
    jobs_removed_count = 0
    for job in scheduler.get_jobs()[:]:
        if job.id.startswith(prefix):
            try:
                job.remove()
                jobs_removed_count += 1
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {job.id}: {e}")
    if jobs_removed_count > 0:
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ {jobs_removed_count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note_id} –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.")


async def send_reminder_notification(bot: Bot, telegram_id: int, note_id: int, note_text: str, due_date: datetime,
                                     is_pre_reminder: bool):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –æ –∑–∞–º–µ—Ç–∫–µ."""
    from ..bot.modules.notes.keyboards import get_reminder_notification_keyboard

    logger.info(
        f"–û—Ç–ø—Ä–∞–≤–∫–∞ {'–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ ' if is_pre_reminder else '–æ—Å–Ω–æ–≤–Ω–æ–≥–æ'} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –∑–∞–º–µ—Ç–∫–µ #{note_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")

    note = await note_repo.get_note_by_id(note_id, telegram_id)
    if not note or note.get('is_completed') or note.get('is_archived'):
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note_id} –æ—Ç–º–µ–Ω–µ–Ω–æ: –∑–∞–º–µ—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.")
        remove_reminder_from_scheduler(note_id)
        return

    try:
        user_profile = await user_repo.get_user_profile(telegram_id)
        user_timezone = user_profile.get('timezone', 'UTC') if user_profile else 'UTC'
        actual_due_date = note.get('due_date', due_date)
        formatted_due_date = format_datetime_for_user(actual_due_date, user_timezone)

        header = f"üîî –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ" if is_pre_reminder else f"‚ùóÔ∏è –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï"

        text = (
            f"{header}\n\n"
            f"–ó–∞–º–µ—Ç–∫–∞: #{hcode(str(note_id))}\n"
            f"–°—Ä–æ–∫: {hitalic(formatted_due_date)}\n\n"
            f"üìù {hbold('–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:')}\n"
            f"{hcode(note_text)}"
        )
        keyboard = get_reminder_notification_keyboard(note_id, is_pre_reminder=is_pre_reminder)
        await bot.send_message(chat_id=telegram_id, text=text, parse_mode="HTML", reply_markup=keyboard)
    except (TelegramBadRequest, TelegramForbiddenError) as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å TG-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}. –û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å TG-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –∑–∞–º–µ—Ç–∫–µ #{note_id}: {e}", exc_info=True)

    push_title = "üìå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ" if is_pre_reminder else "‚ùóÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
    await push_service.send_push_to_user(
        telegram_id=telegram_id,
        title=push_title,
        body=note_text,
        data={"noteId": str(note_id)}
    )

    if not is_pre_reminder and note.get('recurrence_rule'):
        await reschedule_recurring_note(bot, note)


async def send_shopping_list_ping(bot: Bot, user_id: int, note_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–ø–∏—Å–∫–µ –ø–æ–∫—É–ø–æ–∫."""
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ '–ø–∏–Ω–≥–∞' –æ —Å–ø–∏—Å–∫–µ –ø–æ–∫—É–ø–æ–∫ #{note_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    try:
        note = await note_repo.get_note_by_id(note_id, user_id)
        if not note or note.get('is_archived'):
            logger.info(f"–ü–∏-–ø–∏–Ω–≥ –æ —Å–ø–∏—Å–∫–µ #{note_id} –æ—Ç–º–µ–Ω–µ–Ω, —Ç–∞–∫ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω.")
            return

        text = "üîî –ù–∞–ø–æ–º–∏–Ω–∞—é –ø—Ä–æ –≤–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫!"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõí –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫",
                                  callback_data=NoteAction(action="view", note_id=note_id).pack())]
        ])
        await bot.send_message(user_id, text, reply_markup=kb)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å '–ø–∏–Ω–≥' –æ —Å–ø–∏—Å–∫–µ –ø–æ–∫—É–ø–æ–∫ #{note_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def reschedule_recurring_note(bot: Bot, note: dict):
    """–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–µ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
    rule_str = note.get('recurrence_rule')
    last_due_date = note.get('due_date')
    telegram_id = note.get('telegram_id')

    if not all([rule_str, last_due_date, telegram_id]):
        return

    user_profile = await user_repo.get_user_profile(telegram_id)
    if not user_profile or not user_profile.get('is_vip'):
        logger.info(f"–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note['note_id']} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Ç.–∫. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ VIP.")
        await note_repo.set_note_recurrence_rule(note['note_id'], telegram_id, rule=None)
        return

    try:
        if last_due_date.tzinfo is None:
            last_due_date = pytz.utc.localize(last_due_date)

        rule = rrulestr(rule_str, dtstart=last_due_date)
        next_occurrence = rule.after(last_due_date)

        if next_occurrence:
            logger.info(
                f"–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–π—Å—è –∑–∞–¥–∞—á–∏ #{note['note_id']}. –°—Ç–∞—Ä–∞—è –¥–∞—Ç–∞: {last_due_date}, –ù–æ–≤–∞—è –¥–∞—Ç–∞: {next_occurrence}")

            await note_repo.update_note_due_date(note['note_id'], next_occurrence)

            note_data_for_scheduler = {**note, **user_profile, 'due_date': next_occurrence}
            add_reminder_to_scheduler(bot, note_data_for_scheduler)
        else:
            logger.info(f"–ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è –∑–∞–¥–∞—á–∞ #{note['note_id']} –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Å–≤–æ–π —Ü–∏–∫–ª.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–π—Å—è –∑–∞–¥–∞—á–∏ #{note['note_id']}: {e}", exc_info=True)


def clean_llm_response(text: str) -> str:
    """
    –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ LLM –æ—Ç markdown-–±–ª–æ–∫–æ–≤, –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑
    –∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–ª—è Telegram HTML-—Ç–µ–≥–æ–≤.
    """
    text = text.strip()
    cleaned_text = re.sub(r'^```(html|json|)\s*|\s*```$', '', text, flags=re.MULTILINE)
    cleaned_text = re.sub(r'^(–≤–æ—Ç|–∫–æ–Ω–µ—á–Ω–æ,?\s*–≤–æ—Ç|–≥–æ—Ç–æ–≤–æ–µ\s*—Å–æ–æ–±—â–µ–Ω–∏–µ|html-—Å–æ–æ–±—â–µ–Ω–∏–µ\s*–¥–ª—è\s*telegram).*?:?\s*', '',
                          cleaned_text, flags=re.IGNORECASE | re.DOTALL).strip()
    cleaned_text = cleaned_text.replace("<br>", "\n").replace("<br/>", "\n").replace("<br />", "\n")
    if cleaned_text.startswith('"') and cleaned_text.endswith('"'):
        cleaned_text = cleaned_text[1:-1]

    lines = cleaned_text.splitlines()
    if lines and "telegram" in lines[0].lower() and ":" in lines[0]:
        cleaned_text = "\n".join(lines[1:]).strip()

    return cleaned_text


async def generate_and_send_daily_digest(bot: Bot, user: dict):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É—Ç—Ä–µ–Ω–Ω—é—é —Å–≤–æ–¥–∫—É –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    telegram_id = user['telegram_id']
    user_timezone = user['timezone']
    user_name = user['first_name']
    city = user.get('city_name')

    logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤–æ–¥–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} (–¢–ó: {user_timezone})")

    weather_forecast = "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
    if city and WEATHER_SERVICE_ENABLED:
        weather_forecast = await weather_service.get_weather_for_city(city) or "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑."

    notes_today = await note_repo.get_notes_for_today_digest(telegram_id, user_timezone)
    birthdays_soon = await birthday_repo.get_birthdays_for_upcoming_digest(telegram_id)

    notes_for_prompt = "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç."
    if notes_today:
        notes_text_parts = []
        for note in notes_today:
            time_str = note['due_date'].astimezone(pytz.timezone(user_timezone)).strftime('%H:%M')
            notes_text_parts.append(f"- {time_str}: {note['corrected_text']}")
        notes_for_prompt = "\n".join(notes_text_parts)

    bdays_for_prompt = "–ù–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –≤ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é."
    if birthdays_soon:
        bday_text_parts = []
        for bday in birthdays_soon:
            date_str = f"{bday['birth_day']:02}.{bday['birth_month']:02}"
            bday_text_parts.append(f"- {date_str}: {bday['person_name']}")
        bdays_for_prompt = "\n".join(bday_text_parts)

    prompt = f"""
–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–µ, –±–æ–¥—Ä–æ–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ {user_name}.
–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML –¥–ª—è Telegram.

–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤–æ–¥–∫–∏:

**–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã:**
{weather_forecast}

**–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**
{notes_for_prompt}

**–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª–µ:**
{bdays_for_prompt}

---
–ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –§–û–†–ú–ò–†–û–í–ê–ù–ò–Æ –û–¢–í–ï–¢–ê:

1.  –ù–∞—á–Ω–∏ —Å –ø–æ–≥–æ–¥—ã, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π. –ò—Å–ø–æ–ª—å–∑—É–π –∏–∫–æ–Ω–∫—É üå¶Ô∏è. –ù–∞–ø—Ä–∏–º–µ—Ä: "üå¶Ô∏è –ü–æ–≥–æ–¥–∞ {weather_forecast}".
2.  –î–∞–ª–µ–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–∞—á–∏, –ø–µ—Ä–µ—á–∏—Å–ª–∏ –∏—Ö.
3.  –ï—Å–ª–∏ –µ—Å—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è, —É–ø–æ–º—è–Ω–∏ –∏—Ö.
4.  –ó–∞–∫–æ–Ω—á–∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–π —Ñ—Ä–∞–∑–æ–π.
5.  –ï—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç, –ø–æ—Å–ª–µ –ø–æ–≥–æ–¥—ã –ø–æ–∂–µ–ª–∞–π —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –∏ –º—è–≥–∫–æ –ø–æ–¥—Ç–æ–ª–∫–Ω–∏ –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é.
6.  –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º, –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –∏ –∏—Å–ø–æ–ª—å–∑—É–π HTML-—Ç–µ–≥–∏ `<b>` –∏ `<i>`. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π `<br>`. –ò—Å–ø–æ–ª—å–∑—É–π `\n` –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏. –ù–µ –ø–∏—à–∏ –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ.
"""

    import aiohttp
    digest_text = ""
    try:
        if not all([DEEPSEEK_API_KEY, DEEPSEEK_API_URL, DEEPSEEK_MODEL_NAME]):
            raise ValueError("LLM –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞")

        headers = {"Authorization": f"Bearer {DEEPSEEK_API_KEY}", "Content-Type": "application/json"}
        payload = {
            "model": DEEPSEEK_MODEL_NAME, "messages": [{"role": "user", "content": prompt}],
            "temperature": 0.3, "max_tokens": 512
        }
        async with aiohttp.ClientSession() as session:
            async with session.post(DEEPSEEK_API_URL, headers=headers, json=payload, timeout=30) as resp:
                if resp.status == 200:
                    response_data = await resp.json()
                    digest_text = clean_llm_response(response_data['choices'][0]['message']['content'])
                else:
                    raise Exception(f"LLM API Error: {resp.status}, Body: {await resp.text()}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI-–¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è {telegram_id}: {e}. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞.")
        notes_html_list = notes_for_prompt.splitlines()
        notes_html = "\n".join(notes_html_list) if notes_today else "–ó–∞–¥–∞—á –Ω–µ—Ç."
        bdays_html_list = bdays_for_prompt.splitlines()
        bdays_html = "\n".join(bdays_html_list) if birthdays_soon else "–î–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –Ω–µ—Ç."
        weather_html = f"üå¶Ô∏è {weather_forecast}\n\n" if city and WEATHER_SERVICE_ENABLED and "–ù–µ —É–¥–∞–ª–æ—Å—å" not in weather_forecast else ""
        digest_text = f"‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {user_name}!\n\n{weather_html}<b>–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n{notes_html}\n\n<b>–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª–µ:</b>\n{bdays_html}"

    try:
        await bot.send_message(telegram_id, digest_text, parse_mode="HTML")
        logger.info(f"–£—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–æ–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤–æ–¥–∫–∏ –≤ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")

    push_body = re.sub('<[^<]+?>', '', digest_text)
    await push_service.send_push_to_user(
        telegram_id=telegram_id,
        title="‚òÄÔ∏è –í–∞—à–∞ —É—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–æ–¥–∫–∞",
        body=push_body,
        data={"action": "show_digest"}
    )


async def check_and_send_digests(bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–æ–º—É –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω—é—é —Å–≤–æ–¥–∫—É, –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á–∏."""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –µ–∂–µ—á–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–≤–æ–¥–æ–∫.")
    users_to_notify = await user_repo.get_vip_users_for_digest()
    if not users_to_notify:
        logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ –≤ —ç—Ç–æ—Ç —á–∞—Å.")
        return
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users_to_notify)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏.")
    tasks = [generate_and_send_daily_digest(bot, user) for user in users_to_notify]
    await asyncio.gather(*tasks)


def get_age_string(year: int, today: date) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º (–≥–æ–¥/–≥–æ–¥–∞/–ª–µ—Ç)."""
    age = today.year - year
    if age <= 0: return ""
    if age % 10 == 1 and age % 100 != 11:
        return f"({age} –≥–æ–¥)"
    if 2 <= age % 10 <= 4 and (age % 100 < 10 or age % 100 >= 20):
        return f"({age} –≥–æ–¥–∞)"
    return f"({age} –ª–µ—Ç)"


async def send_birthday_reminders(bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–µ–º, —É –∫–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫."""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π...")
    all_birthdays = await birthday_repo.get_all_birthdays_for_reminders()
    today_utc = datetime.now(pytz.utc)

    user_reminders = {}

    for bday in all_birthdays:
        if bday['birth_day'] == today_utc.day and bday['birth_month'] == today_utc.month:
            user_id = bday['user_telegram_id']
            person_name = bday['person_name']
            age_info = ""
            if bday['birth_year']:
                age_info = " " + get_age_string(bday['birth_year'], today_utc.date())

            text = f"–°–µ–≥–æ–¥–Ω—è –≤–∞–∂–Ω—ã–π –¥–µ–Ω—å —É <b>{person_name}</b>{age_info}!"
            if user_id not in user_reminders:
                user_reminders[user_id] = []
            user_reminders[user_id].append(text)

    if not user_reminders:
        logger.info("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        return

    for user_id, reminders in user_reminders.items():
        full_tg_text = "üéÇ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è!\n\n" + "\n".join(reminders)

        push_body = reminders[0] if len(
            reminders) == 1 else f"–°–µ–≥–æ–¥–Ω—è {len(reminders)} –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è! –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."
        push_body = re.sub('<[^<]+?>', '', push_body)

        try:
            await bot.send_message(chat_id=user_id, text=full_tg_text, parse_mode="HTML")
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ {len(reminders)} –î–† –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –î–† –≤ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        await push_service.send_push_to_user(
            telegram_id=user_id,
            title="üéÇ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è!",
            body=push_body,
            data={"action": "show_birthdays"}
        )


async def load_reminders_on_startup(bot: Bot):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –ë–î –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    notes_with_reminders = await note_repo.get_notes_with_reminders()
    count = 0
    for note in notes_with_reminders:
        add_reminder_to_scheduler(bot, note)
        count += 1
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {count} –∑–∞–º–µ—Ç–æ–∫ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.")


async def setup_daily_jobs(bot: Bot):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏."""
    scheduler.add_job(
        send_birthday_reminders,
        trigger='cron',
        hour=0,
        minute=5,
        kwargs={'bot': bot},
        id='daily_birthday_check',
        replace_existing=True
    )
    logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 00:05 UTC.")

    scheduler.add_job(
        check_and_send_digests,
        trigger='cron',
        hour='*',
        minute=1,
        kwargs={'bot': bot},
        id='hourly_digest_check',
        replace_existing=True
    )
    logger.info("–ï–∂–µ—á–∞—Å–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–≤–æ–¥–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.")