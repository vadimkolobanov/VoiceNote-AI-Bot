# src/web/routes.py
import asyncio
import logging
import secrets
import string
from datetime import datetime, timedelta

from aiogram import Bot
from aiogram.utils.markdown import hbold

from ..database import user_repo, note_repo
from ..bot.modules.notes.services import process_and_save_note
from .models import AliceRequest, AliceResponse

logger = logging.getLogger(__name__)

bot_instance: Bot | None = None


def set_bot_instance(bot: Bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö."""
    global bot_instance
    bot_instance = bot


def generate_activation_code(length=6) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."""
    alphabet = string.ascii_uppercase + string.digits
    return ''.join(secrets.choice(alphabet) for _ in range(length))


async def get_link_code_for_user(telegram_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    code = generate_activation_code()
    expires_at = datetime.now() + timedelta(minutes=10)
    await user_repo.set_alice_activation_code(telegram_id, code, expires_at)
    return code


async def process_note_in_background(user: dict, utterance: str):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –ê–ª–∏—Å—ã."""
    logger.info(f"Background task for Alice started for user {user['telegram_id']}")
    if not bot_instance:
        logger.error("Bot instance is not set in Alice background task!")
        return

    try:
        success, message, new_note, _ = await process_and_save_note(
            bot=bot_instance,
            telegram_id=user['telegram_id'],
            text_to_process=utterance
        )

        if success and new_note:
            await user_repo.log_user_action(
                user['telegram_id'],
                'create_note_alice',
                {'note_id': new_note['note_id']}
            )
            await bot_instance.send_message(
                user['telegram_id'],
                f"üéôÔ∏è –ó–∞–º–µ—Ç–∫–∞ –∏–∑ –ê–ª–∏—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n\n`{new_note.get('summary_text', new_note['corrected_text'])}`",
                parse_mode="Markdown"
            )
        else:
            await bot_instance.send_message(
                user['telegram_id'],
                f"üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∏–∑ –ê–ª–∏—Å—ã.\n–ü—Ä–∏—á–∏–Ω–∞: {message}"
            )
    except Exception as e:
        logger.error(f"Error in background note processing from Alice for user {user['telegram_id']}: {e}",
                     exc_info=True)
        if bot_instance:
            await bot_instance.send_message(user['telegram_id'],
                                            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –ê–ª–∏—Å—ã.")


async def handle_alice_request(request: AliceRequest) -> AliceResponse:
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ê–ª–∏—Å—ã."""
    alice_user_id = request.session.user.user_id
    utterance = request.request.original_utterance.lower().strip("?!.,")

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–∞–≤—ã–∫–∞
    if request.session.new:
        user = await user_repo.find_user_by_alice_id(alice_user_id)
        if user:
            welcome_text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≥–æ—Ç–æ–≤–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–ª—è –≤–∞—Å –∑–∞–º–µ—Ç–∫–∏. –ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å."
        else:
            welcome_text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß—Ç–æ–±—ã —è –º–æ–≥–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à Telegram-–∞–∫–∫–∞—É–Ω—Ç. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –≤ –±–æ—Ç–µ –∏ —Å–∫–∞–∂–∏—Ç–µ: –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥, –∞ –∑–∞—Ç–µ–º –Ω–∞–∑–æ–≤–∏—Ç–µ –µ–≥–æ."
        return AliceResponse(response={"text": welcome_text, "end_session": False})

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    if utterance.startswith("–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥"):
        code = utterance.replace("–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", "").strip().upper()
        if not code:
            return AliceResponse(response={"text": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–æ–≤–∏—Ç–µ –∫–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é.", "end_session": False})

        user_to_link = await user_repo.find_user_by_alice_code(code)
        if not user_to_link:
            return AliceResponse(
                response={"text": "–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –≤ Telegram.", "end_session": True})

        await user_repo.link_alice_user(user_to_link['telegram_id'], alice_user_id)
        if bot_instance:
            await bot_instance.send_message(user_to_link['telegram_id'],
                                            "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –Ø–Ω–¥–µ–∫—Å.–ê–ª–∏—Å–µ!")
        return AliceResponse(
            response={"text": "–û—Ç–ª–∏—á–Ω–æ! –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏.", "end_session": True})

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await user_repo.find_user_by_alice_id(alice_user_id)
    if not user:
        return AliceResponse(response={
            "text": "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç. –°–∫–∞–∂–∏—Ç–µ '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥' –∏ –Ω–∞–∑–æ–≤–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram-–±–æ—Ç–∞.",
            "end_session": False})

    if not bot_instance:
        logger.error("Bot instance is not configured in webhook handler!")
        return AliceResponse(response={"text": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."})

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –ê–ª–∏—Å–∞ –Ω–µ –∂–¥–∞–ª–∞
    asyncio.create_task(
        process_note_in_background(user, request.request.original_utterance)
    )

    return AliceResponse(response={"text": "–ü—Ä–∏–Ω—è–ª–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª—é –≤ Telegram."})