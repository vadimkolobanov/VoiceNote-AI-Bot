# src/bot/modules/profile/keyboards.py
from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from ....services.tz_utils import COMMON_TIMEZONES
from ..common_utils.callbacks import SettingsAction, TimezoneAction, PageNavigation


def get_profile_actions_keyboard(has_active_shopping_list: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    builder = InlineKeyboardBuilder()

    if has_active_shopping_list:
        builder.button(text="üõí –ê–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫", callback_data="show_active_shopping_list")
        builder.button(text="ü§ù –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–ø–∏—Å–∫–æ–º", callback_data="share_active_shopping_list")

    builder.button(text="üéÇ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data=PageNavigation(target="birthdays", page=1).pack())
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=SettingsAction(action="go_to_main").pack())
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_to_main_menu")

    # –í–µ—Ä—Å—Ç–∫–∞: 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    builder.adjust(2 if has_active_shopping_list else 1, 1, 1)
    return builder.as_markup()


def get_settings_menu_keyboard(
        is_vip: bool,
        daily_digest_enabled: bool,
        is_alice_linked: bool
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data=SettingsAction(action="go_to_timezone").pack())

    if is_vip:
        digest_btn_text = "‚òÄÔ∏è –í—ã–∫–ª—é—á–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω—é—é —Å–≤–æ–¥–∫—É" if daily_digest_enabled else "‚òÄÔ∏è –í–∫–ª—é—á–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω—é—é —Å–≤–æ–¥–∫—É"
        builder.button(text=digest_btn_text, callback_data=SettingsAction(action="toggle_digest").pack())

    builder.button(text="‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (‚≠êVIP)", callback_data=SettingsAction(action="go_to_reminders").pack())
    builder.button(text="üîî –ü—Ä–µ–¥-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (‚≠êVIP)", callback_data=SettingsAction(action="go_to_pre_reminders").pack())

    if not is_alice_linked:
        builder.button(text="üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –Ø–Ω–¥–µ–∫—Å.–ê–ª–∏—Å—É", callback_data=SettingsAction(action="link_alice").pack())

    builder.button(text="üë§ –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="user_profile")

    # –í–µ—Ä—Å—Ç–∫–∞
    layout = [1]
    if is_vip:
        layout.append(1)
    layout.append(2)
    if not is_alice_linked:
        layout.append(1)
    layout.append(1)
    builder.adjust(*layout)

    return builder.as_markup()


def get_request_vip_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ VIP –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ VIP", callback_data=SettingsAction(action="request_vip").pack())
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=SettingsAction(action="go_to_main").pack())
    builder.adjust(1)
    return builder.as_markup()


def get_pre_reminder_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–µ–¥-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    options = {"–ù–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å": 0, "–ó–∞ 30 –º–∏–Ω—É—Ç": 30, "–ó–∞ 1 —á–∞—Å": 60, "–ó–∞ 3 —á–∞—Å–∞": 180, "–ó–∞ 24 —á–∞—Å–∞": 1440}
    builder = InlineKeyboardBuilder()
    for text, minutes in options.items():
        builder.button(text=text, callback_data=SettingsAction(action="set_pre_rem", value=str(minutes)).pack())
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=SettingsAction(action="go_to_main").pack())
    builder.adjust(2, 2, 1, 1)
    return builder.as_markup()


def get_reminder_time_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    builder = InlineKeyboardBuilder()
    times = ["09:00", "10:00", "12:00", "18:00", "20:00", "21:00"]
    for t in times:
        safe_time_value = t.replace(':', '-')
        builder.button(text=t, callback_data=SettingsAction(action="set_rem_time", value=safe_time_value).pack())
    builder.button(text="‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=SettingsAction(action="manual_rem_time").pack())
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=SettingsAction(action="go_to_main").pack())
    builder.adjust(3, 3, 1, 1)
    return builder.as_markup()


def get_timezone_selection_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞."""
    builder = InlineKeyboardBuilder()
    for display_name, iana_name in COMMON_TIMEZONES.items():
        builder.button(text=display_name, callback_data=TimezoneAction(action="set", tz_name=iana_name).pack())
    builder.button(text="‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=TimezoneAction(action="manual_input").pack())
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=SettingsAction(action="go_to_main").pack())
    builder.adjust(2, 2, 2, 2, 2, 1, 1)
    return builder.as_markup()