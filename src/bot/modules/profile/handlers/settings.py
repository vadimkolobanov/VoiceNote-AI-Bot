# src/bot/modules/profile/handlers/settings.py
import logging
from datetime import time, datetime

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.utils.markdown import hbold, hcode, hitalic

from .....core.config import ADMIN_TELEGRAM_ID
from .....database import user_repo
from .....services.tz_utils import ALL_PYTZ_TIMEZONES
from .....web.routes import get_link_code_for_user  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –≤–µ–±-–º–æ–¥—É–ª—è
from ..common_utils.callbacks import SettingsAction, TimezoneAction
from ..common_utils.states import ProfileSettingsStates
from ..keyboards import (
    get_settings_menu_keyboard,
    get_timezone_selection_keyboard,
    get_reminder_time_keyboard,
    get_pre_reminder_keyboard,
    get_request_vip_keyboard,
)
from ...common.keyboards import get_main_menu_keyboard  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –º–æ–¥—É–ª—è common –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞

logger = logging.getLogger(__name__)
router = Router()


def format_pre_reminder_minutes(minutes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–∏–Ω—É—Ç—ã –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç."""
    if minutes == 0:
        return "–û—Ç–∫–ª—é—á–µ–Ω—ã"
    if minutes < 60:
        return f"–ó–∞ {minutes} –º–∏–Ω."
    hours = minutes // 60
    return f"–ó–∞ {hours} —á."


async def get_settings_text_and_keyboard(telegram_id: int):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    user_profile = await user_repo.get_user_profile(telegram_id)
    if not user_profile:
        return None, None

    is_vip = user_profile.get('is_vip', False)
    current_rem_time = user_profile.get('default_reminder_time', time(9, 0))
    current_rem_time_str = current_rem_time.strftime('%H:%M')

    text_parts = [
        f"{hbold('‚öôÔ∏è –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')}\n",
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞.\n",
        f"‚ñ™Ô∏è –¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {hcode(user_profile.get('timezone', 'UTC'))}",
        f"‚ñ™Ô∏è –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ —É–º–æ–ª—á.: {hcode(current_rem_time_str)} (‚≠ê VIP)",
        f"‚ñ™Ô∏è –ü—Ä–µ–¥–≤. –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {hbold(format_pre_reminder_minutes(user_profile.get('pre_reminder_minutes', 60)))} (‚≠ê VIP)",
    ]
    if is_vip:
        digest_status = "–í–∫–ª—é—á–µ–Ω–∞" if user_profile.get('daily_digest_enabled', True) else "–í—ã–∫–ª—é—á–µ–Ω–∞"
        text_parts.append(f"‚ñ™Ô∏è –£—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–æ–¥–∫–∞: {hbold(digest_status)} (‚≠ê VIP)")

    text = "\n".join(text_parts)
    keyboard = get_settings_menu_keyboard(
        is_vip=is_vip,
        daily_digest_enabled=user_profile.get('daily_digest_enabled', True),
        is_alice_linked=bool(user_profile.get('alice_user_id'))
    )
    return text, keyboard


@router.callback_query(SettingsAction.filter(F.action == "go_to_main"))
async def show_main_settings_handler(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    await state.clear()
    text, keyboard = await get_settings_text_and_keyboard(callback.from_user.id)
    if not text:
        await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(SettingsAction.filter(F.action == "get_free_vip"))
async def get_vip_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å VIP' –∏ –≤—ã–¥–∞–µ—Ç —Å—Ç–∞—Ç—É—Å."""
    user_id = callback.from_user.id
    user_profile = await user_repo.get_user_profile(user_id)
    if user_profile and user_profile.get('is_vip'):
        await callback.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å VIP-—Å—Ç–∞—Ç—É—Å!", show_alert=True)
        return

    success = await user_repo.set_user_vip_status(user_id, True)
    if not success:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–∂–µ.", show_alert=True)
        return

    await user_repo.log_user_action(user_id, 'get_free_vip_button')
    user_notification_text = (
        f"üéâ {hbold('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!')}\n\n"
        f"–í–∞–º –ø—Ä–∏—Å–≤–æ–µ–Ω —Å—Ç–∞—Ç—É—Å üëë {hbold('VIP')}!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞. "
        "–ò–∑—É—á–∏—Ç–µ –∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏`."
    )
    await callback.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –ø—Ä–∏—Å–≤–æ–µ–Ω VIP-—Å—Ç–∞—Ç—É—Å!", show_alert=True)
    await callback.bot.send_message(user_id, user_notification_text)
    await callback.message.edit_text(
        "üè† –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
        reply_markup=get_main_menu_keyboard(is_vip=True)
    )


# --- –£—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–æ–¥–∫–∞ ---
@router.callback_query(SettingsAction.filter(F.action == "toggle_digest"))
async def toggle_daily_digest_handler(callback: CallbackQuery, state: FSMContext):
    user_profile = await user_repo.get_user_profile(callback.from_user.id)
    if not user_profile.get('is_vip'):
        await callback.answer("‚≠ê –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
        return

    current_status = user_profile.get('daily_digest_enabled', True)
    new_status = not current_status
    await user_repo.set_user_daily_digest_status(callback.from_user.id, new_status)

    status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
    await callback.answer(f"‚úÖ –£—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–æ–¥–∫–∞ {status_text}", show_alert=False)
    await show_main_settings_handler(callback, state)


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ ---
@router.callback_query(SettingsAction.filter(F.action == "go_to_timezone"))
async def show_timezone_selection_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    text = f"{hbold('üïí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞')}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é."
    await callback.message.edit_text(text, reply_markup=get_timezone_selection_keyboard())
    await callback.answer()


@router.callback_query(TimezoneAction.filter(F.action == 'set'))
async def set_timezone_from_button_handler(callback: CallbackQuery, callback_data: TimezoneAction, state: FSMContext):
    success = await user_repo.set_user_timezone(callback.from_user.id, callback_data.tz_name)
    if success:
        await callback.answer(f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {callback_data.tz_name}", show_alert=True)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ.", show_alert=True)
    await show_main_settings_handler(callback, state)


@router.callback_query(TimezoneAction.filter(F.action == 'manual_input'))
async def manual_timezone_input_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ProfileSettingsStates.awaiting_timezone)
    text = f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `Continent/City` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `Europe/Moscow`).\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel."
    await callback.message.edit_text(
        f"{callback.message.text}\n\n{text}",
        reply_markup=get_timezone_selection_keyboard()
    )
    await callback.answer("–û–∂–∏–¥–∞—é –≤–∞—à –≤–≤–æ–¥...")


@router.message(ProfileSettingsStates.awaiting_timezone, F.text, ~F.text.startswith('/'))
async def process_manual_timezone_handler(message: types.Message, state: FSMContext):
    timezone_name = message.text.strip()
    if timezone_name not in ALL_PYTZ_TIMEZONES:
        await message.reply(f"‚ùå –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å {hcode(timezone_name)} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await user_repo.set_user_timezone(message.from_user.id, timezone_name)
    await state.clear()
    await message.answer(f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {timezone_name}")

    text, keyboard = await get_settings_text_and_keyboard(message.from_user.id)
    if text:
        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
@router.callback_query(SettingsAction.filter(F.action == "go_to_reminders"))
async def show_reminder_time_handler(callback: CallbackQuery):
    user_profile = await user_repo.get_user_profile(callback.from_user.id)
    if not user_profile.get('is_vip'):
        text = (
            f"‚≠ê {hbold('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')}\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è **VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**.\n\n"
            "–û–Ω–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —É–¥–æ–±–Ω–æ–µ –≤–∞–º –≤—Ä–µ–º—è, "
            "–¥–∞–∂–µ –µ—Å–ª–∏ –≤—ã —Å–∫–∞–∑–∞–ª–∏ —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∑–∞–≤—Ç—Ä–∞').\n\n"
            "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π VIP-–¥–æ—Å—Ç—É–ø?"
        )
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_request_vip_keyboard())
        await callback.answer()
        return

    text = f"{hbold('‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')}\n\n–≠—Ç–æ –≤—Ä–µ–º—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤ —Ç–µ–∫—Å—Ç–µ –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞."
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_reminder_time_keyboard())
    await callback.answer()


@router.callback_query(SettingsAction.filter(F.action == "set_rem_time"))
async def set_reminder_time_from_button_handler(callback: CallbackQuery, callback_data: SettingsAction,
                                                state: FSMContext):
    time_str = callback_data.value.replace('-', ':')
    try:
        time_obj = datetime.strptime(time_str, '%H:%M').time()
        success = await user_repo.set_user_default_reminder_time(callback.from_user.id, time_obj)
        if success:
            await callback.answer(f"‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}", show_alert=False)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏.", show_alert=True)
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.", show_alert=True)
    await show_main_settings_handler(callback, state)


@router.callback_query(SettingsAction.filter(F.action == "manual_rem_time"))
async def manual_reminder_time_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ProfileSettingsStates.awaiting_reminder_time)
    text = f"{hbold('‚å®Ô∏è –†—É—á–Ω–æ–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏')}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ß–ß:–ú–ú` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `09:30`).\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel."
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_reminder_time_keyboard())
    await callback.answer("–û–∂–∏–¥–∞—é –≤–∞—à –≤–≤–æ–¥...")


@router.message(ProfileSettingsStates.awaiting_reminder_time, F.text, ~F.text.startswith('/'))
async def process_manual_reminder_time_handler(message: types.Message, state: FSMContext):
    try:
        time_obj = datetime.strptime(message.text.strip(), '%H:%M').time()
        await user_repo.set_user_default_reminder_time(message.from_user.id, time_obj)
        await state.clear()
        await message.answer(f"‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {message.text.strip()}.")

        text, keyboard = await get_settings_text_and_keyboard(message.from_user.id)
        if text:
            await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ß–ß:–ú–ú`, –Ω–∞–ø—Ä–∏–º–µ—Ä, `09:30`.")


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
@router.callback_query(SettingsAction.filter(F.action == "go_to_pre_reminders"))
async def show_pre_reminder_handler(callback: CallbackQuery):
    user_profile = await user_repo.get_user_profile(callback.from_user.id)
    if not user_profile.get('is_vip'):
        text = (
            f"‚≠ê {hbold('–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')}\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è **VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**.\n\n"
            "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π VIP-–¥–æ—Å—Ç—É–ø?"
        )
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_request_vip_keyboard())
        await callback.answer()
        return

    current_minutes = user_profile.get('pre_reminder_minutes', 60)
    text = (
        f"{hbold('üîî –ü—Ä–µ–¥-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∑–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –¥–æ —Å—Ä–æ–∫–∞ –ø–æ–ª—É—á–∞—Ç—å –¥–æ–ø. –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n\n"
        f"–¢–µ–∫—É—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {hbold(format_pre_reminder_minutes(current_minutes))}"
    )
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_pre_reminder_keyboard())
    await callback.answer()


@router.callback_query(SettingsAction.filter(F.action == "set_pre_rem"))
async def set_pre_reminder_handler(callback: CallbackQuery, callback_data: SettingsAction, state: FSMContext):
    try:
        minutes = int(callback_data.value)
        success = await user_repo.set_user_pre_reminder_minutes(callback.from_user.id, minutes)
        if success:
            await callback.answer(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {format_pre_reminder_minutes(minutes)}", show_alert=False)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.", show_alert=True)
    except (ValueError, TypeError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.", show_alert=True)
    await show_main_settings_handler(callback, state)


# --- –ó–∞–ø—Ä–æ—Å VIP –∏ –ø—Ä–∏–≤—è–∑–∫–∞ –ê–ª–∏—Å—ã ---
@router.callback_query(SettingsAction.filter(F.action == "request_vip"))
async def request_vip_handler(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    if not ADMIN_TELEGRAM_ID:
        await callback.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)
        return

    user = callback.from_user
    admin_text = (
        f"‚ÄºÔ∏è {hbold('–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ VIP-–¥–æ—Å—Ç—É–ø!')}\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {hbold(user.full_name)} (@{user.username if user.username else 'N/A'})\n"
        f"ID: {hcode(user.id)}\n\n"
        f"–î–ª—è –≤—ã–¥–∞—á–∏ VIP –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/admin {user.id}`."
    )
    try:
        await callback.bot.send_message(ADMIN_TELEGRAM_ID, admin_text, parse_mode="HTML")
        await user_repo.log_user_action(user.id, 'request_vip')
        await callback.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!", show_alert=True)
        await show_main_settings_handler(callback, state)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ VIP –æ—Ç {user.id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏.", show_alert=True)


@router.callback_query(SettingsAction.filter(F.action == "link_alice"))
async def link_alice_handler(callback: CallbackQuery, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ –Ø–Ω–¥–µ–∫—Å.–ê–ª–∏—Å–µ."""
    telegram_id = callback.from_user.id
    user_profile = await user_repo.get_user_profile(telegram_id)
    if user_profile and user_profile.get('alice_user_id'):
        await callback.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω.", show_alert=True)
        return

    code = await get_link_code_for_user(telegram_id)
    response_text = (
        f"üóùÔ∏è {hbold('–ü—Ä–∏–≤—è–∑–∫–∞ –∫ –Ø–Ω–¥–µ–∫—Å.–ê–ª–∏—Å–µ')}\n\n"
        f"–ß—Ç–æ–±—ã —è –º–æ–≥–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –ê–ª–∏—Å—ã, —Å–∫–∞–∂–∏—Ç–µ –µ–π:\n\n"
        f"üó£Ô∏è {hitalic('–ê–ª–∏—Å–∞, –ø–æ–ø—Ä–æ—Å–∏ VoiceNote –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥')} {hcode(code)}\n\n"
        f"–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç. –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –µ–≥–æ –Ω–∏–∫–æ–º—É."
    )
    await callback.message.answer(response_text, parse_mode="HTML")
    await callback.answer("–ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ —á–∞—Ç.", show_alert=True)