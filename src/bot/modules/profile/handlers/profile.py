# src/bot/modules/profile/handlers/profile.py
import logging
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hcode, hbold, hitalic

from .....core import config
from .....database import user_repo, note_repo, birthday_repo
from .....services.tz_utils import format_datetime_for_user
from ..keyboards import get_profile_actions_keyboard
from ...notes.handlers import shopping_list

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data == "user_profile")
async def user_profile_display_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π.
    """
    await state.clear()
    telegram_id = callback_query.from_user.id
    user_profile_data = await user_repo.get_user_profile(telegram_id)

    if not user_profile_data:
        await callback_query.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start.", show_alert=True)
        return

    active_notes_count = await note_repo.count_active_notes_for_user(telegram_id)
    birthdays_count = await birthday_repo.count_birthdays_for_user(telegram_id)
    active_shopping_list = await note_repo.get_active_shopping_list(telegram_id)

    user_timezone = user_profile_data.get('timezone', 'UTC')
    reg_date_local_str = format_datetime_for_user(user_profile_data['created_at'], user_timezone)
    is_vip = user_profile_data.get('is_vip', False)
    has_active_shopping_list = active_shopping_list is not None

    profile_header = f"üë§ {hbold('–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å')}\n\n"

    user_info_parts = [f"‚ñ™Ô∏è {hbold('ID')}: {hcode(user_profile_data['telegram_id'])}"]
    if user_profile_data.get('username'):
        user_info_parts.append(f"‚ñ™Ô∏è {hbold('Username')}: @{hitalic(user_profile_data['username'])}")
    user_info_block = "\n".join(user_info_parts)

    notes_limit_str = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ" if is_vip else f"{config.MAX_NOTES_MVP}"
    stt_limit_str = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ" if is_vip else f"{config.MAX_DAILY_STT_RECOGNITIONS_MVP}"
    birthdays_limit_str = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ" if is_vip else f"{config.MAX_NOTES_MVP}"

    stats_info_parts = [
        f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏: {hbold(active_notes_count)} / {notes_limit_str}",
        f"–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è: {hbold(birthdays_count)} / {birthdays_limit_str}",
        f"–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è: {hbold(user_profile_data.get('daily_stt_recognitions_count', 0))} / {stt_limit_str}"
    ]
    stats_block = f"üìä {hbold('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')}:\n" + "\n".join(stats_info_parts)

    subscription_status = f"üëë VIP" if is_vip else "Free"
    settings_info_parts = [
        f"–°—Ç–∞—Ç—É—Å: {hitalic(subscription_status)}",
        f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {hitalic(reg_date_local_str)}"
    ]
    settings_block = f"‚öôÔ∏è {hbold('–î–∞–Ω–Ω—ã–µ')}:\n" + "\n".join(settings_info_parts)

    response_text = "\n\n".join([profile_header, user_info_block, stats_block, settings_block])

    keyboard = get_profile_actions_keyboard(has_active_shopping_list=has_active_shopping_list)

    try:
        await callback_query.message.edit_text(response_text, parse_mode="HTML", reply_markup=keyboard)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ: {e}")
        await callback_query.message.answer(response_text, parse_mode="HTML", reply_markup=keyboard)

    await callback_query.answer()


@router.callback_query(F.data == "show_active_shopping_list")
async def show_active_shopping_list_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    active_list = await note_repo.get_active_shopping_list(user_id)
    if not active_list:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫.", show_alert=True)
        return

    await shopping_list.render_shopping_list(callback, active_list['note_id'], user_id)
    await callback.answer()


@router.callback_query(F.data == "share_active_shopping_list")
async def share_shopping_list_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫.
    """
    user_id = callback.from_user.id
    active_list = await note_repo.get_active_shopping_list(user_id)
    if not active_list:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è.", show_alert=True)
        return

    note_id = active_list['note_id']
    token = await note_repo.create_share_token(note_id, user_id)
    if not token:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    bot_info = await callback.bot.get_me()
    bot_username = bot_info.username
    share_link = f"https://t.me/{bot_username}?start=share_{token}"

    text = (
        f"ü§ù {hbold('–°—Å—ã–ª–∫–∞ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫')}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —á–µ–ª–æ–≤–µ–∫—É, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –≤–µ—Å—Ç–∏ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫.\n\n"
        f"üîó {hbold('–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:')}\n"
        f"{hcode(share_link)}\n\n"
        f"{hitalic('–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 48 —á–∞—Å–æ–≤ –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.')}"
    )

    back_button = types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å",
        callback_data="user_profile"
    )
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[back_button]])

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard, disable_web_page_preview=True)
    await callback.answer()