# src/bot/modules/birthdays/handlers.py
import logging
import re
from datetime import datetime

from aiogram import F, Router, types
from aiogram.filters import Command, StateFilter  # <-- –ò–ú–ü–û–†–¢–ò–†–£–ï–ú StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.utils.markdown import hbold, hitalic, hcode

from ....database import birthday_repo, user_repo
from ....core import config
from ....services.gamification_service import XP_REWARDS, check_and_grant_achievements
from ...common_utils.callbacks import BirthdayAction, PageNavigation
from ...common_utils.states import BirthdayStates
from .keyboards import get_full_birthdays_keyboard

logger = logging.getLogger(__name__)
router = Router()


# ... (–≤–µ—Å—å –∫–æ–¥ –¥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –æ—Ç–º–µ–Ω—ã –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
def parse_date(date_str: str) -> tuple[int, int, int | None] | None:
    """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–¥–µ–Ω—å, –º–µ—Å—è—Ü, –≥–æ–¥) –∏–ª–∏ None."""
    date_str = date_str.strip()
    # –ü—Ä–æ–±—É–µ–º —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì
    match_full = re.fullmatch(r"(\d{1,2})[.\-/](\d{1,2})[.\-/](\d{4})", date_str)
    if match_full:
        day, month, year = map(int, match_full.groups())
        try:
            datetime(year, month, day)
            return day, month, year
        except ValueError:
            return None

    # –ü—Ä–æ–±—É–µ–º —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú
    match_short = re.fullmatch(r"(\d{1,2})[.\-/](\d{1,2})", date_str)
    if match_short:
        day, month = map(int, match_short.groups())
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—É –Ω–∞ –≤–∏—Å–æ–∫–æ—Å–Ω–æ–º –≥–æ–¥—É, —á—Ç–æ–±—ã 29.02 –ø—Ä–æ—à–ª–æ
            datetime(2000, month, day)
            return day, month, None
        except ValueError:
            return None

    return None


async def show_birthdays_list(event: types.Message | types.CallbackQuery, state: FSMContext, page: int = 1):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π."""
    await state.clear()

    user_id = event.from_user.id
    message = event.message if isinstance(event, types.CallbackQuery) else event

    user_profile = await user_repo.get_user_profile(user_id)
    is_vip = user_profile.get('is_vip', False)

    birthdays, total_count = await birthday_repo.get_birthdays_for_user(user_id, page=page, per_page=5)
    total_pages = (total_count + 4) // 5
    if total_pages == 0: total_pages = 1

    if total_count == 0:
        text = f"{hbold('üéÇ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è')}\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞—Ç. –î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –ø–µ—Ä–≤—É—é!"
    else:
        limit_str = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ" if is_vip else f"{config.MAX_NOTES_MVP}"
        text = f"{hbold('üéÇ –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è')} ({total_count}/{limit_str})"

    keyboard = get_full_birthdays_keyboard(birthdays, page, total_pages, is_vip, total_count)

    try:
        if isinstance(event, CallbackQuery):
            await message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        else:
            await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

    if isinstance(event, CallbackQuery):
        await event.answer()


# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

@router.callback_query(PageNavigation.filter(F.target == "birthdays"))
async def birthdays_list_handler(callback: CallbackQuery, callback_data: PageNavigation, state: FSMContext):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å–ø–∏—Å–∫–∞."""
    await show_birthdays_list(callback, state, page=callback_data.page)


@router.callback_query(BirthdayAction.filter(F.action == "add_manual"))
async def add_birthday_manual_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è."""
    await state.set_state(BirthdayStates.awaiting_person_name)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>–ú–∞–º–∞</b> –∏–ª–∏ <b>–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤</b>).\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.",
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(BirthdayStates.awaiting_person_name, F.text, ~F.text.startswith('/'))
async def process_person_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É."""
    await state.update_data(person_name=message.text)
    await state.set_state(BirthdayStates.awaiting_birth_date)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è {hbold(message.text)}.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <code>–î–î.–ú–ú.–ì–ì–ì–ì</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>25.12.1980</code>) –∏–ª–∏ <code>–î–î.–ú–ú</code>, –µ—Å–ª–∏ –≥–æ–¥ –Ω–µ –≤–∞–∂–µ–Ω.",
        parse_mode="HTML"
    )


@router.message(BirthdayStates.awaiting_birth_date, F.text, ~F.text.startswith('/'))
async def process_birth_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å."""
    parsed_date = parse_date(message.text)
    if not parsed_date:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–î–î.–ú–ú.–ì–ì–ì–ì</code> –∏–ª–∏ <code>–î–î.–ú–ú</code>.",
            parse_mode="HTML")
        return

    day, month, year = parsed_date
    user_data = await state.get_data()
    person_name = user_data.get("person_name")

    bday_record = await birthday_repo.add_birthday(message.from_user.id, person_name, day, month, year)
    if bday_record:
        await user_repo.log_user_action(message.from_user.id, 'add_birthday_manual',
                                        metadata={'birthday_id': bday_record['id']})
        await user_repo.add_xp_and_check_level_up(message.bot, message.from_user.id, XP_REWARDS['add_birthday_manual'])
        await check_and_grant_achievements(message.bot, message.from_user.id)
        await message.answer(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è {hbold(person_name)} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.",
                             parse_mode="HTML")
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    await show_birthdays_list(message, state)


@router.callback_query(BirthdayAction.filter(F.action == "delete"))
async def delete_birthday_handler(callback: CallbackQuery, callback_data: BirthdayAction, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è."""
    success = await birthday_repo.delete_birthday(callback_data.birthday_id, callback.from_user.id)
    if success:
        await callback.answer("üóëÔ∏è –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.", show_alert=False)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", show_alert=True)
    await show_birthdays_list(callback, state, page=callback_data.page)


@router.callback_query(BirthdayAction.filter(F.action == "import_file"))
async def import_file_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
    await state.set_state(BirthdayStates.awaiting_import_file)
    text = (
        f"–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (`.txt`) —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è.\n\n"
        f"{hbold('–§–æ—Ä–º–∞—Ç:')} –∫–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ:\n"
        f"<code>–ò–º—è - –î–î.–ú–ú.–ì–ì–ì–ì</code>\n\n"
        f"{hbold('–ü—Ä–∏–º–µ—Ä:')}\n"
        f"<code>–ú–∞–º–∞ - 28.05.1976\n"
        f"–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ - 13.06.1977\n"
        f"–ì–æ–¥–æ–≤—â–∏–Ω–∞ - 05.09</code>\n\n"
        f"–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
    )
    await callback.message.edit_text(text, parse_mode="HTML")
    await callback.answer()


@router.message(BirthdayStates.awaiting_import_file, F.document)
async def process_import_file(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π .txt —Ñ–∞–π–ª."""
    if not message.document or message.document.mime_type != "text/plain":
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .txt")
        return

    status_msg = await message.reply("‚è≥ –ü–æ–ª—É—á–∏–ª —Ñ–∞–π–ª. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    file_info = await message.bot.get_file(message.document.file_id)

    try:
        file_content_bytes = await message.bot.download_file(file_info.file_path)
        file_content = file_content_bytes.read().decode('utf-8')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π: {e}")
        await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8.")
        return

    lines = file_content.splitlines()
    birthdays_to_add = []
    errors = []

    for i, line in enumerate(lines, 1):
        line = line.strip()
        if not line or '-' not in line:
            if line: errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            continue

        parts = line.split('-', 1)
        name = parts[0].strip()
        date_str = parts[1].strip()

        parsed_date = parse_date(date_str)
        if name and parsed_date:
            day, month, year = parsed_date
            birthdays_to_add.append((name, day, month, year))
        else:
            errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –Ω–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∏–ª–∏ –¥–∞—Ç–∞")

    if not birthdays_to_add:
        await status_msg.edit_text("–í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
        return

    added_count = await birthday_repo.add_birthdays_bulk(message.from_user.id, birthdays_to_add)
    if added_count > 0:
        await user_repo.log_user_action(message.from_user.id, 'import_birthdays_file',
                                        metadata={'imported_count': added_count})
        await user_repo.add_xp_and_check_level_up(message.bot, message.from_user.id, added_count * XP_REWARDS['add_birthday_manual'])
        await check_and_grant_achievements(message.bot, message.from_user.id)


    report_text = (
        f"‚úÖ {hbold('–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!')}\n\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: <b>{added_count}</b>\n"
        f"‚Ä¢ –°—Ç—Ä–æ–∫ —Å –æ—à–∏–±–∫–∞–º–∏: <b>{len(errors)}</b>"
    )
    await status_msg.edit_text(report_text, parse_mode="HTML")

    await show_birthdays_list(message, state)



@router.message(StateFilter(BirthdayStates), Command("cancel"))
async def cancel_birthday_add(message: types.Message, state: FSMContext):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è.
    """
    current_state = await state.get_state()
    if current_state is None:
        return  # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–∂–µ –Ω–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    logger.info(f"–û—Ç–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è {current_state} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≥–ª–∞–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π
    await show_birthdays_list(message, state)