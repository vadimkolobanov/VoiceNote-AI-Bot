# src/bot/modules/notes/handlers/edit.py
import logging

from aiogram import F, Router, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hbold

from .....database import note_repo
from ....common_utils.callbacks import NoteAction
from ....common_utils.states import NoteEditingStates
from .list_view import view_note_detail_handler, display_notes_list_page

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(NoteAction.filter(F.action == "edit"))
async def start_note_edit_handler(callback: types.CallbackQuery, callback_data: NoteAction, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏."""
    await state.clear()
    await state.set_state(NoteEditingStates.awaiting_new_text)
    await state.update_data(
        note_id=callback_data.note_id,
        page=callback_data.page,
        target_list=callback_data.target_list
    )

    note = await note_repo.get_note_by_id(callback_data.note_id, callback.from_user.id)
    if not note:
        await callback.answer("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        await state.clear()
        return

    text = (
        f"‚úèÔ∏è {hbold('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏')} #{note['note_id']}\n\n"
        f"–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–π –∑–∞–º–µ—Ç–∫–∏. "
        f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n"
        f"<code>{note['corrected_text']}</code>\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel."
    )

    await callback.message.edit_text(text, parse_mode="HTML")
    await callback.answer()


@router.message(NoteEditingStates.awaiting_new_text, F.text, ~F.text.startswith('/'))
async def process_new_note_text_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É."""
    fsm_data = await state.get_data()
    note_id = fsm_data.get('note_id')
    page = fsm_data.get('page', 1)
    target_list = fsm_data.get('target_list', 'active')

    if not note_id:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, ID –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    new_text = message.text.strip()
    success = await note_repo.update_note_text(note_id, new_text, message.from_user.id)

    await state.clear()

    if success:
        await message.answer("‚úÖ –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏
        await view_note_detail_handler(message, state, note_id=note_id)
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
        await display_notes_list_page(
            message=message,
            user_id=message.from_user.id,
            page=page,
            archived=(target_list == 'archive'),
            is_callback=False
        )


@router.message(StateFilter(NoteEditingStates), Command("cancel"))
async def cancel_edit_handler(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    fsm_data = await state.get_data()
    note_id = fsm_data.get('note_id')
    await state.clear()

    await message.answer("üö´ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    if note_id:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞–º–µ—Ç–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        await view_note_detail_handler(message, state, note_id=note_id)
    else:
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        await display_notes_list_page(message, message.from_user.id)