# src/bot/modules/notes/handlers/actions.py
import logging
from datetime import datetime, timedelta
import pytz

from aiogram import Bot, F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hbold, hcode, hitalic

from src.database import note_repo, user_repo
from src.core.config import MAX_NOTES_MVP
from src.services.scheduler import add_reminder_to_scheduler, remove_reminder_from_scheduler, reschedule_recurring_note
from src.bot.common_utils.callbacks import NoteAction
from ..keyboards import get_confirm_delete_keyboard
from .list_view import display_notes_list_page, view_note_detail_handler

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(NoteAction.filter(F.action == "undo_create"))
async def undo_note_creation_handler(callback: types.CallbackQuery, callback_data: NoteAction):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É."""
    note_id = callback_data.note_id
    deleted = await note_repo.delete_note(note_id, callback.from_user.id)
    if deleted:
        remove_reminder_from_scheduler(note_id)
        await user_repo.log_user_action(callback.from_user.id, 'undo_create_note', metadata={'note_id': note_id})
        await callback.message.edit_text(f"üö´ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ #{hbold(str(note_id))} –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback.answer("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    else:
        await callback.message.edit_text(f"‚òëÔ∏è –ó–∞–º–µ—Ç–∫–∞ #{hbold(str(note_id))} —É–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞.")
        await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ", show_alert=True)


@router.callback_query(NoteAction.filter(F.action == "complete"))
async def complete_note_handler(callback: types.CallbackQuery, callback_data: NoteAction, state: FSMContext):
    """–û—Ç–º–µ—á–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é."""
    note_id = callback_data.note_id
    note = await note_repo.get_note_by_id(note_id, callback.from_user.id)
    if not note:
        await callback.answer("‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    user_profile = await user_repo.get_user_profile(callback.from_user.id)
    is_recurring = note.get('recurrence_rule') and user_profile.get('is_vip')

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á
    if is_recurring:
        await callback.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ, –∂–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ.", show_alert=False)
        await reschedule_recurring_note(callback.bot, note)
        try:  # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º, –µ—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ
            await callback.message.edit_text(
                f"{callback.message.text}\n\n{hbold('–°—Ç–∞—Ç—É—Å: ‚úÖ –ü—Ä–æ–ø—É—â–µ–Ω–æ, –∂–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è')}",
                reply_markup=None
            )
        except Exception:
            pass
        return

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–¥–∞—á
    success = await note_repo.set_note_completed_status(note_id, True)
    if success:
        remove_reminder_from_scheduler(note_id)
        await callback.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤.", show_alert=False)
        await display_notes_list_page(callback.message, callback.from_user.id, 1, state, is_archive_list=False)
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é.", show_alert=True)


@router.callback_query(NoteAction.filter(F.action == "archive"))
async def archive_note_handler(callback: types.CallbackQuery, callback_data: NoteAction, state: FSMContext):
    """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –≤ –∞—Ä—Ö–∏–≤."""
    success = await note_repo.set_note_archived_status(callback_data.note_id, True)
    if success:
        remove_reminder_from_scheduler(callback_data.note_id)
        await callback.answer("üóÑÔ∏è –ó–∞–º–µ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏", show_alert=True)
    await display_notes_list_page(callback.message, callback.from_user.id, callback_data.page, state,
                                  is_archive_list=False)


@router.callback_query(NoteAction.filter(F.action == "unarchive"))
async def unarchive_note_handler(callback: types.CallbackQuery, callback_data: NoteAction, state: FSMContext):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –∏–∑ –∞—Ä—Ö–∏–≤–∞."""
    user_profile = await user_repo.get_user_profile(callback.from_user.id)
    if not user_profile.get('is_vip'):
        active_notes_count = await note_repo.count_active_notes_for_user(callback.from_user.id)
        if active_notes_count >= MAX_NOTES_MVP:
            await callback.answer(f"–ù–µ–ª—å–∑—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å. –õ–∏–º–∏—Ç –≤ {MAX_NOTES_MVP} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫.", show_alert=True)
            return

    success = await note_repo.set_note_archived_status(callback_data.note_id, False)
    if success:
        note = await note_repo.get_note_by_id(callback_data.note_id, callback.from_user.id)
        if note and note.get('due_date'):
            note_with_profile = {**note, **user_profile}
            add_reminder_to_scheduler(callback.bot, note_with_profile)
        await callback.answer("‚Ü©Ô∏è –ó–∞–º–µ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)
    await display_notes_list_page(callback.message, callback.from_user.id, callback_data.page, state,
                                  is_archive_list=True)


@router.callback_query(NoteAction.filter(F.action == "confirm_delete"))
async def confirm_delete_note_handler(callback: types.CallbackQuery, callback_data: NoteAction):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è."""
    note = await note_repo.get_note_by_id(callback_data.note_id, callback.from_user.id)
    warning_text = f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å {hbold('–ù–ê–í–°–ï–ì–î–ê')} —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É #{callback_data.note_id}."
    if note and note.get('recurrence_rule'):
        warning_text += f" –∏ {hbold('–í–°–ï')} –µ—ë –±—É–¥—É—â–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è."

    await callback.message.edit_text(
        f"‚ÄºÔ∏è {hbold('–í–´ –£–í–ï–†–ï–ù–´?')}\n\n{warning_text}\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
        reply_markup=get_confirm_delete_keyboard(
            note_id=callback_data.note_id, page=callback_data.page, target_list=callback_data.target_list
        )
    )
    await callback.answer()


@router.callback_query(NoteAction.filter(F.action == "delete"))
async def delete_note_confirmed_handler(callback: types.CallbackQuery, callback_data: NoteAction, state: FSMContext):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É."""
    deleted = await note_repo.delete_note(callback_data.note_id, callback.from_user.id)
    if deleted:
        remove_reminder_from_scheduler(callback_data.note_id)
        await callback.answer("üóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞!")
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É.", show_alert=True)
    await display_notes_list_page(callback.message, callback.from_user.id, callback_data.page, state,
                                  callback_data.target_list == 'archive')


@router.callback_query(NoteAction.filter(F.action == "snooze"))
async def snooze_reminder_handler(callback: types.CallbackQuery, callback_data: NoteAction):
    """–û—Ç–∫–ª–∞–¥—ã–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ."""
    user_profile = await user_repo.get_user_profile(callback.from_user.id)
    if not user_profile.get('is_vip', False):
        await callback.answer("‚≠ê –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
        return

    note = await note_repo.get_note_by_id(callback_data.note_id, callback.from_user.id)
    if not note or not note.get('due_date'):
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ª–æ–∂–∏—Ç—å: –∑–∞–º–µ—Ç–∫–∞ –∏–ª–∏ –¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
        return

    new_due_date = datetime.now(pytz.utc) + timedelta(minutes=callback_data.snooze_minutes)
    await note_repo.update_note_due_date(callback_data.note_id, new_due_date)

    note_with_profile = {**note, **user_profile, 'due_date': new_due_date}
    add_reminder_to_scheduler(callback.bot, note_with_profile)

    await callback.answer(f"üëå –ü–æ–Ω—è–ª! –ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {callback_data.snooze_minutes // 60} —á.", show_alert=False)
    try:
        await callback.message.edit_text(f"{callback.message.text}\n\n{hbold('–°—Ç–∞—Ç—É—Å: ‚è∞ –û—Ç–ª–æ–∂–µ–Ω–æ')}", reply_markup=None)
    except Exception:
        pass


@router.callback_query(NoteAction.filter(F.action == "share"))
async def generate_share_link_handler(callback: types.CallbackQuery, callback_data: NoteAction, bot: Bot):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∏–ø–ª–∏–Ω–∫ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ –∑–∞–º–µ—Ç–∫–∏."""
    token = await note_repo.create_share_token(callback_data.note_id, callback.from_user.id)
    if not token:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    bot_info = await bot.get_me()
    share_link = f"https://t.me/{bot_info.username}?start=share_{token}"

    text = (
        f"ü§ù {hbold('–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞!')}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —á–µ–ª–æ–≤–µ–∫—É, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∑–∞–º–µ—Ç–∫–æ–π.\n\n"
        f"üîó {hbold('–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:')}\n{hcode(share_link)}\n\n"
        f"{hitalic('–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 48 —á–∞—Å–æ–≤ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑.')}"
    )
    back_button = types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–º–µ—Ç–∫–µ",
        callback_data=NoteAction(action="view", note_id=callback_data.note_id, page=callback_data.page).pack()
    )
    await callback.message.edit_text(text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[back_button]]),
                                     disable_web_page_preview=True)
    await callback.answer()


@router.callback_query(NoteAction.filter(F.action == "listen_audio"))
async def listen_audio_handler(callback: types.CallbackQuery, callback_data: NoteAction):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –∑–∞–º–µ—Ç–∫–∏."""
    note = await note_repo.get_note_by_id(callback_data.note_id, callback.from_user.id)
    if note and note.get('original_audio_telegram_file_id'):
        await callback.answer("‚ñ∂Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è—é –∞—É–¥–∏–æ...")
        await callback.message.answer_voice(voice=note['original_audio_telegram_file_id'])
    else:
        await callback.answer("–ê—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —ç—Ç–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)