# src/bot/modules/notes/handlers/actions.py
import logging

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hbold, hitalic, hcode

from .....database import note_repo, user_repo
from .....services.scheduler import add_reminder_to_scheduler, remove_reminder_from_scheduler
from .....services.gamification_service import XP_REWARDS, AchievCode, check_and_grant_achievements
from ....common_utils.callbacks import NoteAction
from ..keyboards import get_category_selection_keyboard
from .list_view import display_notes_list_page, view_note_detail_handler

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(NoteAction.filter(F.action == "undo_create"))
async def undo_note_creation_handler(callback: types.CallbackQuery, callback_data: NoteAction):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏, —É–¥–∞–ª—è—è –µ–µ –∏–∑ –ë–î."""
    note_id = callback_data.note_id
    note = await note_repo.get_note_by_id(note_id, callback.from_user.id)
    if note:
        remove_reminder_from_scheduler(note_id)
        await note_repo.delete_note(note_id, callback.from_user.id)
        await callback.message.edit_text("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await callback.message.edit_text("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞.")

    await callback.answer()


@router.callback_query(NoteAction.filter(F.action == "complete"))
async def complete_note_handler(callback: types.CallbackQuery, callback_data: NoteAction, state: FSMContext):
    """–ü–æ–º–µ—á–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∏ –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –µ–µ."""
    note_id = callback_data.note_id
    await note_repo.set_note_completed_status(note_id, True)
    remove_reminder_from_scheduler(note_id)

    await user_repo.add_xp_and_check_level_up(callback.bot, callback.from_user.id, XP_REWARDS['note_completed'])
    await check_and_grant_achievements(callback.bot, callback.from_user.id)

    await callback.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤.", show_alert=True)
    await display_notes_list_page(
        message=callback.message,
        user_id=callback.from_user.id,
        page=callback_data.page,
        archived=False,
        is_callback=True
    )


@router.callback_query(NoteAction.filter(F.action == "archive"))
async def archive_note_handler(callback: types.CallbackQuery, callback_data: NoteAction, state: FSMContext):
    """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –∑–∞–º–µ—Ç–∫—É."""
    note_id = callback_data.note_id
    await note_repo.set_note_archived_status(note_id, True)
    remove_reminder_from_scheduler(note_id)
    await callback.answer("üóÑÔ∏è –ó–∞–º–µ—Ç–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤.", show_alert=False)
    await display_notes_list_page(
        message=callback.message,
        user_id=callback.from_user.id,
        page=callback_data.page,
        archived=False,
        is_callback=True
    )


@router.callback_query(NoteAction.filter(F.action == "unarchive"))
async def unarchive_note_handler(callback: types.CallbackQuery, callback_data: NoteAction, state: FSMContext):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –∏–∑ –∞—Ä—Ö–∏–≤–∞."""
    note_id = callback_data.note_id
    await note_repo.set_note_archived_status(note_id, False)

    note = await note_repo.get_note_by_id(note_id, callback.from_user.id)
    if note and note.get('due_date'):
        user_profile = await user_repo.get_user_profile(callback.from_user.id)
        add_reminder_to_scheduler(callback.bot, {**note, **user_profile})

    await callback.answer("‚Ü©Ô∏è –ó–∞–º–µ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", show_alert=False)
    await display_notes_list_page(
        message=callback.message,
        user_id=callback.from_user.id,
        page=callback_data.page,
        archived=True,
        is_callback=True
    )


@router.callback_query(NoteAction.filter(F.action == "delete"))
async def delete_note_handler(callback: types.CallbackQuery, callback_data: NoteAction, state: FSMContext):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É."""
    note_id = callback_data.note_id
    success = await note_repo.delete_note(note_id, callback.from_user.id)
    if success:
        remove_reminder_from_scheduler(note_id)
        await callback.answer("üóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞.", show_alert=True)
        await display_notes_list_page(
            message=callback.message,
            user_id=callback.from_user.id,
            page=callback_data.page,
            archived=True,
            is_callback=True
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", show_alert=True)


@router.callback_query(NoteAction.filter(F.action == "change_category"))
async def change_category_handler(callback: types.CallbackQuery, callback_data: NoteAction):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–º–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    keyboard = get_category_selection_keyboard(
        note_id=callback_data.note_id,
        page=callback_data.page,
        target_list=callback_data.target_list
    )
    await callback.message.edit_text(f"{callback.message.text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(NoteAction.filter(F.action == "set_category"))
async def set_category_handler(callback: types.CallbackQuery, callback_data: NoteAction, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞–º–µ—Ç–∫–∏."""
    note_id = callback_data.note_id
    new_category = callback_data.category
    await note_repo.update_note_category(note_id, new_category)
    await callback.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ¬´{new_category}¬ª.", show_alert=False)
    await view_note_detail_handler(callback, state, callback_data=callback_data)


@router.callback_query(NoteAction.filter(F.action == "listen_audio"))
async def listen_audio_handler(callback: types.CallbackQuery, callback_data: NoteAction):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –∑–∞–º–µ—Ç–∫–∏."""
    note = await note_repo.get_note_by_id(callback_data.note_id, callback.from_user.id)
    if note and note.get('original_audio_telegram_file_id'):
        await callback.message.answer_voice(
            voice=note['original_audio_telegram_file_id'],
            caption=f"üéß –û—Ä–∏–≥–∏–Ω–∞–ª –∞—É–¥–∏–æ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{callback_data.note_id}"
        )
        await callback.answer()
    else:
        await callback.answer("–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)


@router.callback_query(NoteAction.filter(F.action == "share"))
async def share_note_handler(callback: types.CallbackQuery, callback_data: NoteAction):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ –∑–∞–º–µ—Ç–∫–∏."""
    note_id = callback_data.note_id
    user_id = callback.from_user.id
    token = await note_repo.create_share_token(note_id, user_id)

    if not token:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    # –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –∑–∞ –ø–µ—Ä–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —à–∞—Ä–∏–Ω–≥–∞
    if not await note_repo.did_user_share_note(user_id):
        await user_repo.grant_achievement(callback.bot, user_id, AchievCode.SOCIAL_CONNECTOR.value)

    await user_repo.add_xp_and_check_level_up(callback.bot, user_id, XP_REWARDS['note_shared'])

    bot_info = await callback.bot.get_me()
    bot_username = bot_info.username
    share_link = f"https://t.me/{bot_username}?start=share_{token}"

    text = (
        f"{callback.message.text}\n\n"
        f"ü§ù {hbold('–°—Å—ã–ª–∫–∞ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ –∑–∞–º–µ—Ç–∫–∏')}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —á–µ–ª–æ–≤–µ–∫—É, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–æ—Å—Ç—É–ø–æ–º.\n\n"
        f"üîó {hbold('–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:')}\n"
        f"{hcode(share_link)}\n\n"
        f"{hitalic('–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 48 —á–∞—Å–æ–≤ –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.')}"
    )

    back_button = types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–º–µ—Ç–∫–µ",
        callback_data=NoteAction(action="view", note_id=note_id, page=callback_data.page,
                                 target_list=callback_data.target_list).pack()
    )
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[back_button]])

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML", disable_web_page_preview=True)
    await callback.answer()


@router.callback_query(NoteAction.filter(F.action == "stop_recurrence"))
async def stop_note_recurrence_handler(callback: types.CallbackQuery, callback_data: NoteAction, state: FSMContext):
    """–î–µ–ª–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è –∑–∞–¥–∞—á—É —Ä–∞–∑–æ–≤–æ–π."""
    note_id = callback_data.note_id
    user_id = callback.from_user.id

    success = await note_repo.set_note_recurrence_rule(note_id, user_id, rule=None)
    if success:
        await callback.answer("‚úÖ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –ó–∞–º–µ—Ç–∫–∞ —Å—Ç–∞–ª–∞ —Ä–∞–∑–æ–≤–æ–π.", show_alert=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥ –∑–∞–º–µ—Ç–∫–∏
        await view_note_detail_handler(callback, state, callback_data=callback_data)
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ.", show_alert=True)


@router.callback_query(NoteAction.filter(F.action == "set_recur"))
async def set_suggested_recurrence_handler(callback: types.CallbackQuery, callback_data: NoteAction, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."""
    note_id = callback_data.note_id
    user_id = callback.from_user.id
    freq = callback_data.recur_freq

    note = await note_repo.get_note_by_id(note_id, user_id)
    if not note or not note.get('due_date'):
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: –∑–∞–º–µ—Ç–∫–∞ –∏–ª–∏ –µ–µ –¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª–æ RRULE
    # FREQ=WEEKLY;BYDAY=TU (–µ—Å–ª–∏ due_date –±—ã–ª –≤–æ –≤—Ç–æ—Ä–Ω–∏–∫)
    freq_map = {"DAILY": DAILY, "WEEKLY": WEEKLY, "MONTHLY": MONTHLY}
    rule = rrulestr(f"FREQ={freq};BYDAY={note['due_date'].strftime('%A')[:2].upper()}", dtstart=note['due_date'])
    rule_str = str(rule).split('\n')[1]  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ 'RRULE:...'

    success = await note_repo.set_note_recurrence_rule(note_id, user_id, rule=rule_str)

    if success:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ, —á—Ç–æ–±—ã –æ–Ω–∞ —Å—Ç–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–π—Å—è
        user_profile = await user_repo.get_user_profile(user_id)
        note_for_scheduler = {**note, **user_profile, 'recurrence_rule': rule_str}
        add_reminder_to_scheduler(callback.bot, note_for_scheduler)

        await callback.message.edit_text(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–º–µ—Ç–∫–∞ ¬´{hitalic(note['summary_text'])}¬ª —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è.")
        await callback.answer("–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
    else:
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ.")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(NoteAction.filter(F.action == "decline_recur"))
async def decline_suggested_recurrence_handler(callback: types.CallbackQuery):
    """–£–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏."""
    await callback.message.delete()
    await callback.answer("–•–æ—Ä–æ—à–æ, —è –ø–æ–Ω—è–ª.")


@router.callback_query(NoteAction.filter(F.action == "undo_create"))
async def undo_note_creation_handler(callback: types.CallbackQuery, callback_data: NoteAction):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏, —É–¥–∞–ª—è—è –µ–µ –∏–∑ –ë–î."""
    note_id = callback_data.note_id
    note = await note_repo.get_note_by_id(note_id, callback.from_user.id)
    if note:
        remove_reminder_from_scheduler(note_id)
        await note_repo.delete_note(note_id, callback.from_user.id)
        await callback.message.edit_text("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await callback.message.edit_text("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞.")

    await callback.answer()


@router.callback_query(NoteAction.filter(F.action == "complete"))
async def complete_note_handler(callback: types.CallbackQuery, callback_data: NoteAction, state: FSMContext):
    """–ü–æ–º–µ—á–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∏ –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –µ–µ."""
    note_id = callback_data.note_id
    await note_repo.set_note_completed_status(note_id, True)
    remove_reminder_from_scheduler(note_id)

    await user_repo.add_xp_and_check_level_up(callback.bot, callback.from_user.id, XP_REWARDS['note_completed'])
    await check_and_grant_achievements(callback.bot, callback.from_user.id)

    await callback.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤.", show_alert=True)
    await display_notes_list_page(
        message=callback.message,
        user_id=callback.from_user.id,
        page=callback_data.page,
        archived=False,
        is_callback=True
    )


@router.callback_query(NoteAction.filter(F.action == "archive"))
async def archive_note_handler(callback: types.CallbackQuery, callback_data: NoteAction, state: FSMContext):
    """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –∑–∞–º–µ—Ç–∫—É."""
    note_id = callback_data.note_id
    await note_repo.set_note_archived_status(note_id, True)
    remove_reminder_from_scheduler(note_id)
    await callback.answer("üóÑÔ∏è –ó–∞–º–µ—Ç–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤.", show_alert=False)
    await display_notes_list_page(
        message=callback.message,
        user_id=callback.from_user.id,
        page=callback_data.page,
        archived=False,
        is_callback=True
    )


@router.callback_query(NoteAction.filter(F.action == "unarchive"))
async def unarchive_note_handler(callback: types.CallbackQuery, callback_data: NoteAction, state: FSMContext):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –∏–∑ –∞—Ä—Ö–∏–≤–∞."""
    note_id = callback_data.note_id
    await note_repo.set_note_archived_status(note_id, False)

    note = await note_repo.get_note_by_id(note_id, callback.from_user.id)
    if note and note.get('due_date'):
        user_profile = await user_repo.get_user_profile(callback.from_user.id)
        add_reminder_to_scheduler(callback.bot, {**note, **user_profile})

    await callback.answer("‚Ü©Ô∏è –ó–∞–º–µ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", show_alert=False)
    await display_notes_list_page(
        message=callback.message,
        user_id=callback.from_user.id,
        page=callback_data.page,
        archived=True,
        is_callback=True
    )


@router.callback_query(NoteAction.filter(F.action == "delete"))
async def delete_note_handler(callback: types.CallbackQuery, callback_data: NoteAction, state: FSMContext):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É."""
    note_id = callback_data.note_id
    success = await note_repo.delete_note(note_id, callback.from_user.id)
    if success:
        remove_reminder_from_scheduler(note_id)
        await callback.answer("üóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞.", show_alert=True)
        await display_notes_list_page(
            message=callback.message,
            user_id=callback.from_user.id,
            page=callback_data.page,
            archived=True,
            is_callback=True
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", show_alert=True)


@router.callback_query(NoteAction.filter(F.action == "change_category"))
async def change_category_handler(callback: types.CallbackQuery, callback_data: NoteAction):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–º–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    keyboard = get_category_selection_keyboard(
        note_id=callback_data.note_id,
        page=callback_data.page,
        target_list=callback_data.target_list
    )
    await callback.message.edit_text(f"{callback.message.text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(NoteAction.filter(F.action == "set_category"))
async def set_category_handler(callback: types.CallbackQuery, callback_data: NoteAction, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞–º–µ—Ç–∫–∏."""
    note_id = callback_data.note_id
    new_category = callback_data.category
    await note_repo.update_note_category(note_id, new_category)
    await callback.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ¬´{new_category}¬ª.", show_alert=False)
    await view_note_detail_handler(callback, state, callback_data=callback_data)


@router.callback_query(NoteAction.filter(F.action == "listen_audio"))
async def listen_audio_handler(callback: types.CallbackQuery, callback_data: NoteAction):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –∑–∞–º–µ—Ç–∫–∏."""
    note = await note_repo.get_note_by_id(callback_data.note_id, callback.from_user.id)
    if note and note.get('original_audio_telegram_file_id'):
        await callback.message.answer_voice(
            voice=note['original_audio_telegram_file_id'],
            caption=f"üéß –û—Ä–∏–≥–∏–Ω–∞–ª –∞—É–¥–∏–æ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{callback_data.note_id}"
        )
        await callback.answer()
    else:
        await callback.answer("–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)


@router.callback_query(NoteAction.filter(F.action == "share"))
async def share_note_handler(callback: types.CallbackQuery, callback_data: NoteAction):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ –∑–∞–º–µ—Ç–∫–∏."""
    note_id = callback_data.note_id
    user_id = callback.from_user.id
    token = await note_repo.create_share_token(note_id, user_id)

    if not token:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    # –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –∑–∞ –ø–µ—Ä–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —à–∞—Ä–∏–Ω–≥–∞
    if not await note_repo.did_user_share_note(user_id):
        await user_repo.grant_achievement(callback.bot, user_id, AchievCode.SOCIAL_CONNECTOR.value)

    await user_repo.add_xp_and_check_level_up(callback.bot, user_id, XP_REWARDS['note_shared'])

    bot_info = await callback.bot.get_me()
    bot_username = bot_info.username
    share_link = f"https://t.me/{bot_username}?start=share_{token}"

    text = (
        f"{callback.message.text}\n\n"
        f"ü§ù {hbold('–°—Å—ã–ª–∫–∞ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ –∑–∞–º–µ—Ç–∫–∏')}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —á–µ–ª–æ–≤–µ–∫—É, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–æ—Å—Ç—É–ø–æ–º.\n\n"
        f"üîó {hbold('–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:')}\n"
        f"{hcode(share_link)}\n\n"
        f"{hitalic('–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 48 —á–∞—Å–æ–≤ –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.')}"
    )

    back_button = types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–º–µ—Ç–∫–µ",
        callback_data=NoteAction(action="view", note_id=note_id, page=callback_data.page,
                                 target_list=callback_data.target_list).pack()
    )
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[back_button]])

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML", disable_web_page_preview=True)
    await callback.answer()


@router.callback_query(NoteAction.filter(F.action == "stop_recurrence"))
async def stop_note_recurrence_handler(callback: types.CallbackQuery, callback_data: NoteAction, state: FSMContext):
    """–î–µ–ª–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è –∑–∞–¥–∞—á—É —Ä–∞–∑–æ–≤–æ–π."""
    note_id = callback_data.note_id
    user_id = callback.from_user.id

    success = await note_repo.set_note_recurrence_rule(note_id, user_id, rule=None)
    if success:
        await callback.answer("‚úÖ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –ó–∞–º–µ—Ç–∫–∞ —Å—Ç–∞–ª–∞ —Ä–∞–∑–æ–≤–æ–π.", show_alert=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥ –∑–∞–º–µ—Ç–∫–∏
        await view_note_detail_handler(callback, state, callback_data=callback_data)
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ.", show_alert=True)