# src/bot/modules/notes/handlers/list_view.py
import logging

from aiogram import F, Router, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hcode, hbold, hitalic

from .....core import config
from .....database import note_repo, user_repo
from .....services.tz_utils import format_datetime_for_user
from ....common_utils.callbacks import NoteAction, PageNavigation
from ....common_utils.states import NoteNavigationStates
from ..keyboards import get_notes_list_display_keyboard, get_note_view_actions_keyboard

logger = logging.getLogger(__name__)
router = Router()


def humanize_rrule(rule_str: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É RRULE –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç."""
    try:
        if "FREQ=DAILY" in rule_str: return "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å"
        if "FREQ=WEEKLY" in rule_str: return "–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é"
        if "FREQ=MONTHLY" in rule_str: return "–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü"
        if "FREQ=YEARLY" in rule_str: return "–ö–∞–∂–¥—ã–π –≥–æ–¥"
        return "–ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è"
    except Exception:
        return "–ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è"


async def display_notes_list_page(
        target_message: types.Message,
        telegram_id: int,
        page_num: int,
        state: FSMContext,
        is_archive_list: bool
):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–º–µ—Ç–æ–∫ (–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –∞—Ä—Ö–∏–≤–Ω—ã—Ö).
    """
    await state.set_state(NoteNavigationStates.browsing_notes)
    await state.update_data(current_notes_page=page_num, is_archive_view=is_archive_list)

    notes_on_page, total_notes_count = await note_repo.get_paginated_notes_for_user(
        telegram_id=telegram_id, page=page_num, archived=is_archive_list
    )
    total_pages = (total_notes_count + config.NOTES_PER_PAGE - 1) // config.NOTES_PER_PAGE
    if total_pages == 0: total_pages = 1

    # –ï—Å–ª–∏ –º—ã –æ–∫–∞–∑–∞–ª–∏—Å—å –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é
    if page_num > total_pages > 0:
        page_num = total_pages
        await state.update_data(current_notes_page=page_num)
        notes_on_page, total_notes_count = await note_repo.get_paginated_notes_for_user(
            telegram_id=telegram_id, page=page_num, archived=is_archive_list
        )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if not notes_on_page and page_num == 1:
        text_content = "üóÑÔ∏è –í –∞—Ä—Ö–∏–≤–µ –ø—É—Å—Ç–æ." if is_archive_list else "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é, –æ—Ç–ø—Ä–∞–≤–∏–≤ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
    else:
        title = "üóÑÔ∏è –í–∞—à –∞—Ä—Ö–∏–≤" if is_archive_list else "üìù –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"
        text_content = f"{hbold(f'{title} (–°—Ç—Ä. {page_num}/{total_pages}):')}"

    keyboard = get_notes_list_display_keyboard(notes_on_page, page_num, total_pages, is_archive_list, telegram_id)

    try:
        await target_message.edit_text(text_content, reply_markup=keyboard)
    except (TelegramBadRequest, AttributeError):
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ –±—ã–ª–æ /my_notes), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await target_message.answer(text_content, reply_markup=keyboard)


@router.message(Command("my_notes"))
async def cmd_my_notes(message: types.Message, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /my_notes."""
    await display_notes_list_page(message, message.from_user.id, 1, state, is_archive_list=False)


@router.callback_query(PageNavigation.filter(F.target == "notes"))
async def notes_list_paginated_handler(callback: types.CallbackQuery, callback_data: PageNavigation, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ —Å–ø–∏—Å–∫–∞–º –∑–∞–º–µ—Ç–æ–∫."""
    await display_notes_list_page(
        target_message=callback.message,
        telegram_id=callback.from_user.id,
        page_num=callback_data.page,
        state=state,
        is_archive_list=callback_data.archived
    )
    await callback.answer()


@router.callback_query(NoteAction.filter(F.action == "view"))
async def view_note_detail_handler(
        event: types.Message | types.CallbackQuery,
        state: FSMContext,
        note_id: int | None = None
):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–º–µ—Ç–∫–µ.
    –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –∫–∞–∫ –ø–æ –∫–æ–ª–±—ç–∫—É, —Ç–∞–∫ –∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –¥—Ä—É–≥–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ —à–∞—Ä–∏–Ω–≥–∞).
    """
    is_callback = isinstance(event, types.CallbackQuery)
    message = event.message if is_callback else event
    user = event.from_user

    if is_callback:
        callback_data = NoteAction.unpack(event.data)
        note_id = callback_data.note_id
        page = callback_data.page
        is_archived_view = callback_data.target_list == 'archive'
    else:
        # –ü—Ä–∏ –≤—ã–∑–æ–≤–µ –∏–∑ –¥—Ä—É–≥–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ 1-—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫
        page = 1
        is_archived_view = False

    await state.set_state(NoteNavigationStates.browsing_notes)
    await state.update_data(current_notes_page=page, is_archive_view=is_archived_view)

    user_profile = await user_repo.get_user_profile(user.id)
    user_timezone = user_profile.get('timezone', 'UTC')
    note = await note_repo.get_note_by_id(note_id, user.id)

    if not note:
        if is_callback:
            await event.answer("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
        else:
            await message.answer("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–Ω –ø—Ä–∏—à–µ–ª
        await display_notes_list_page(message, user.id, page, state, is_archived_view)
        return

    # --- –°–±–æ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–º–µ—Ç–∫–∏ ---
    is_completed = note.get('is_completed', False)
    category = note.get('category', '–û–±—â–µ–µ')
    status_icon = "‚úÖ" if is_completed else ("üóÑÔ∏è" if note['is_archived'] else ("üõí" if category == '–ü–æ–∫—É–ø–∫–∏' else "üìå"))
    status_text = "–í—ã–ø–æ–ª–Ω–µ–Ω–∞" if is_completed else ("–í –∞—Ä—Ö–∏–≤–µ" if note['is_archived'] else "–ê–∫—Ç–∏–≤–Ω–∞")

    summary = note.get('summary_text') or note['corrected_text']

    shared_info_text = ""
    if note.get('owner_id') != user.id:
        owner_profile = await user_repo.get_user_profile(note.get('owner_id'))
        owner_name = owner_profile.get('first_name', f"ID:{note.get('owner_id')}") if owner_profile else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        shared_info_text = f"ü§ù {hitalic(f'–ó–∞–º–µ—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤–∞–º –æ—Ç {hbold(owner_name)}')}\n"

    text_parts = [
        f"{status_icon} {hbold(f'–ó–∞–º–µ—Ç–∫–∞ #{note_id}')}",
        shared_info_text,
        f"–°—Ç–∞—Ç—É—Å: {hitalic(status_text)}",
        f"üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {hitalic(category)}"
    ]

    if note.get('recurrence_rule') and user_profile.get('is_vip'):
        text_parts.append(f"‚≠ê üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {hitalic(humanize_rrule(note.get('recurrence_rule')))}")

    if note.get('due_date'):
        due_date_local = format_datetime_for_user(note.get('due_date'), user_timezone)
        text_parts.append(f"–°—Ä–æ–∫ –¥–æ: {hitalic(due_date_local)}")

    text_parts.append(f"\n{hbold('–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:')}\n{hcode(summary)}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∫—Ä–∞—Ç–∫–æ–≥–æ
    if summary.strip() != note['corrected_text'].strip():
        text_parts.append(f"\n{hitalic('–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç:')}\n{hcode(note['corrected_text'])}")

    text = "\n".join(filter(None, text_parts))  # –°–æ–±–∏—Ä–∞–µ–º, —É–±–∏—Ä–∞—è –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

    # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ ---
    note['is_vip'] = user_profile.get('is_vip', False)
    final_keyboard = get_note_view_actions_keyboard(note, page, user.id)

    try:
        if is_callback:
            await message.edit_text(text, reply_markup=final_keyboard)
        else:
            sent_msg = await message.answer(text, reply_markup=final_keyboard)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤
            await note_repo.store_shared_message_id(note_id, user.id, sent_msg.message_id)
    except TelegramBadRequest:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ #{message.message_id}, –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ.")
        sent_msg = await message.answer(text, reply_markup=final_keyboard)
        await note_repo.store_shared_message_id(note_id, user.id, sent_msg.message_id)

    if is_callback:
        await event.answer()