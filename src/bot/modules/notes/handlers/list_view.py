# src/bot/modules/notes/handlers/list_view.py
import logging

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hbold, hitalic, hcode
from aiogram.filters import Command, StateFilter

from .....database import note_repo, user_repo
from .....services.llm import search_notes_with_llm
from .....services.tz_utils import format_datetime_for_user
from ....common_utils.callbacks import PageNavigation, NoteAction
from ..keyboards import get_notes_list_display_keyboard, get_note_view_actions_keyboard, get_confirm_delete_keyboard, get_notes_search_results_keyboard
from ....common_utils.states import NotesSearchStates

logger = logging.getLogger(__name__)
router = Router()


async def display_notes_list_page(message: types.Message, user_id: int, page: int = 1, archived: bool = False,
                                  is_callback: bool = False):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ (–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –∞—Ä—Ö–∏–≤–Ω—ã—Ö)."""
    notes, total_items = await note_repo.get_paginated_notes_for_user(user_id, page=page, archived=archived)

    from .....core.config import NOTES_PER_PAGE
    per_page = NOTES_PER_PAGE
    total_pages = (total_items + per_page - 1) // per_page
    if total_pages == 0: total_pages = 1

    if archived:
        header = f"üóÑÔ∏è {hbold('–ê—Ä—Ö–∏–≤ –∑–∞–º–µ—Ç–æ–∫')}"
        no_notes_text = "–í –≤–∞—à–µ–º –∞—Ä—Ö–∏–≤–µ –ø–æ–∫–∞ –ø—É—Å—Ç–æ."
    else:
        header = f"üìù {hbold('–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏')}"
        no_notes_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!"

    text = f"{header} (–°—Ç—Ä. {page}/{total_pages}, –í—Å–µ–≥–æ: {total_items})"
    if not notes:
        text = f"{header}\n\n{no_notes_text}"

    keyboard = get_notes_list_display_keyboard(notes, page, total_pages, archived, user_id)

    if is_callback:
        try:
            await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        except Exception:
            await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
            await message.delete()
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(PageNavigation.filter(F.target == "notes"))
async def notes_list_page_handler(callback: types.CallbackQuery, callback_data: PageNavigation):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫."""
    await display_notes_list_page(
        message=callback.message,
        user_id=callback.from_user.id,
        page=callback_data.page,
        archived=callback_data.archived,
        is_callback=True
    )
    await callback.answer()


@router.callback_query(NoteAction.filter(F.action == "view"))
async def view_note_detail_handler(
        event: types.Message | types.CallbackQuery,
        state: FSMContext,
        note_id: int | None = None,
        callback_data: NoteAction | None = None
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–º–µ—Ç–∫–µ."""
    await state.clear()

    user_id = event.from_user.id
    message = event if isinstance(event, types.Message) else event.message

    if callback_data:
        note_id = callback_data.note_id
        page = callback_data.page
    else:
        page = 1

    note = await note_repo.get_note_by_id(note_id, user_id)

    if not note:
        await message.answer("‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø–∞.")
        if isinstance(event, types.CallbackQuery):
            await event.answer("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    owner_profile = await user_repo.get_user_profile(note['owner_id'])
    owner_name = owner_profile.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if owner_profile else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    is_owner = user_id == note['owner_id']

    owner_info = ""
    if not is_owner:
        owner_info = f"–í–ª–∞–¥–µ–ª–µ—Ü: {hitalic(owner_name)}\n"

    status = "–í—ã–ø–æ–ª–Ω–µ–Ω–∞" if note.get('is_completed') else "–í –∞—Ä—Ö–∏–≤–µ" if note.get('is_archived') else "–ê–∫—Ç–∏–≤–Ω–∞"
    category = note.get('category', '–û–±—â–µ–µ')

    note_date = format_datetime_for_user(note['note_taken_at'],
                                         owner_profile.get('timezone') if owner_profile else 'UTC')
    due_date = format_datetime_for_user(note['due_date'], owner_profile.get('timezone') if owner_profile else 'UTC')

    text_parts = [
        f"üóíÔ∏è {hbold('–ó–∞–º–µ—Ç–∫–∞')} #{note['note_id']}",
        f"{hcode(note.get('summary_text') or note['corrected_text'])}\n",
        f"{owner_info}"
        f"‚ñ™Ô∏è –°—Ç–∞—Ç—É—Å: {hbold(status)}",
        f"‚ñ™Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {hitalic(category)}",
        f"‚ñ™Ô∏è –°–æ–∑–¥–∞–Ω–∞: {note_date}"
    ]

    if due_date:
        text_parts.append(f"‚ñ™Ô∏è –°—Ä–æ–∫: {hbold(due_date)}")
    if note.get('recurrence_rule'):
        text_parts.append(f"‚ñ™Ô∏è –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: ‚≠ê {hitalic(note['recurrence_rule'])}")

    text = "\n".join(text_parts)
    keyboard = get_note_view_actions_keyboard(note, page, user_id)

    try:
        await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    except Exception:
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

    if isinstance(event, types.CallbackQuery):
        await event.answer()


@router.callback_query(NoteAction.filter(F.action == "confirm_delete"))
async def confirm_delete_handler(callback: types.CallbackQuery, callback_data: NoteAction):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ."""
    text = (
        f"{callback.message.text}\n\n"
        f"‚ÄºÔ∏è {hbold('–í–´ –£–í–ï–†–ï–ù–´?')}\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –ó–∞–º–µ—Ç–∫–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞."
    )
    keyboard = get_confirm_delete_keyboard(
        note_id=callback_data.note_id,
        page=callback_data.page,
        target_list=callback_data.target_list
    )
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.message(Command("search_note"))
async def start_search_note(message: types.Message, state: FSMContext):
    await state.set_state(NotesSearchStates.waiting_for_query)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤–∞—à–∏–º –∑–∞–º–µ—Ç–∫–∞–º:")

@router.message(StateFilter(NotesSearchStates.waiting_for_query), F.text)
async def process_search_note_query(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    query = message.text.strip()
    await message.answer("üîé –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∑–∞–º–µ—Ç–∫–∏... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
    notes = await note_repo.get_all_notes_for_user(user_id)
    results = await search_notes_with_llm(notes, query, max_results=10)
    if not results:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
        return
    await message.answer(
        "–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏:",
        reply_markup=get_notes_search_results_keyboard(results)
    )

@router.callback_query(F.data == "search_notes")
async def search_notes_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(NotesSearchStates.waiting_for_query)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤–∞—à–∏–º –∑–∞–º–µ—Ç–∫–∞–º:")
    await callback.answer()