# src/bot/modules/notes/handlers/shopping_list.py
import logging

from aiogram import Bot, F, Router, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hbold, hitalic

from .....database import note_repo
from ..common_utils.callbacks import ShoppingListAction
from ..keyboards import get_shopping_list_keyboard
from .list_view import display_notes_list_page

logger = logging.getLogger(__name__)
router = Router()


async def _update_all_shared_views(note_id: int, bot: Bot):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–∫—É–ø–æ–∫ —É –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤,
    —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
    """
    note = await note_repo.get_note_by_id(note_id, 0)  # 0 - –∞–¥–º–∏–Ω—Å–∫–∏–π –¥–æ—Å—Ç—É–ø –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
    if not note: return

    items = note.get('llm_analysis_json', {}).get('items', [])
    is_archived = note.get('is_archived', False)
    keyboard = get_shopping_list_keyboard(note_id, items, is_archived)

    message_ids_to_update = await note_repo.get_shared_message_ids(note_id)

    for record in message_ids_to_update:
        user_id, message_id = record['user_id'], record['message_id']
        try:
            await bot.edit_message_reply_markup(
                chat_id=user_id,
                message_id=message_id,
                reply_markup=keyboard
            )
        except TelegramBadRequest as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "message is not modified"
            if "message is not modified" in str(e):
                continue
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å view —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è user {user_id} msg {message_id}: {e}")
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –Ω–∞—à–µ–π –ë–î
            await note_repo.delete_shared_message_id(note_id, user_id)
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ view —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è {user_id}: {e}")
            await note_repo.delete_shared_message_id(note_id, user_id)


async def render_shopping_list(note_id: int, message: types.Message, user_id: int):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–∫—É–ø–æ–∫."""
    note = await note_repo.get_note_by_id(note_id, user_id)
    if not note:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∞.")
        return

    items = note.get('llm_analysis_json', {}).get('items', [])
    is_archived = note.get('is_archived', False)
    is_owner = note.get('owner_id') == user_id

    shared_text = "" if is_owner else f"\n{hitalic('(–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –≤–∞–º –ø–æ —Å—Å—ã–ª–∫–µ)')}"
    list_title = note.get('summary_text') or '–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫'
    text_to_send = f"üõí {hbold(list_title)}:{shared_text}"

    keyboard = get_shopping_list_keyboard(note_id, items, is_archived)

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.edit_text(text_to_send, reply_markup=keyboard)
    except (TelegramBadRequest, AttributeError):
        # –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        message = await message.answer(text_to_send, reply_markup=keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    await note_repo.store_shared_message_id(note_id, user_id, message.message_id)


@router.callback_query(ShoppingListAction.filter(F.action == "show"))
async def show_shopping_list_handler(callback: types.CallbackQuery, callback_data: ShoppingListAction):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–º–µ—Ç–∫–∏)."""
    await render_shopping_list(callback_data.note_id, callback.message, callback.from_user.id)
    await callback.answer()


@router.callback_query(F.data == "show_active_shopping_list")
async def show_active_shopping_list_from_profile(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è)."""
    active_list = await note_repo.get_active_shopping_list(callback.from_user.id)
    if not active_list:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫.", show_alert=True)
        return

    await render_shopping_list(active_list['note_id'], callback.message, callback.from_user.id)
    await callback.answer()


@router.callback_query(ShoppingListAction.filter(F.action == "toggle"))
async def toggle_shopping_list_item_handler(callback: types.CallbackQuery, callback_data: ShoppingListAction, bot: Bot):
    """–û—Ç–º–µ—á–∞–µ—Ç/—Å–Ω–∏–º–∞–µ—Ç –æ—Ç–º–µ—Ç–∫—É —Å –ø—É–Ω–∫—Ç–∞ —Å–ø–∏—Å–∫–∞."""
    note_id = callback_data.note_id
    item_index = callback_data.item_index

    note = await note_repo.get_note_by_id(note_id, callback.from_user.id)
    if not note or note.get('is_archived'):
        await callback.answer("–≠—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ —É–∂–µ –≤ –∞—Ä—Ö–∏–≤–µ.", show_alert=True)
        return

    llm_json = note.get('llm_analysis_json', {})
    items = llm_json.get('items', [])

    if 0 <= item_index < len(items):
        items[item_index]['checked'] = not items[item_index].get('checked', False)
        item_name = items[item_index]['item_name']
        status = "–û—Ç–º–µ—á–µ–Ω–æ" if items[item_index]['checked'] else "–°–Ω—è—Ç–∞ –æ—Ç–º–µ—Ç–∫–∞"
        await callback.answer(f"{status}: {item_name}")
    else:
        await callback.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    llm_json['items'] = items
    await note_repo.update_note_llm_json(note_id, llm_json)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∞ —É –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    await _update_all_shared_views(note_id, bot)


@router.callback_query(ShoppingListAction.filter(F.action == "archive"))
async def archive_shopping_list_handler(callback: types.CallbackQuery, callback_data: ShoppingListAction,
                                        state: FSMContext, bot: Bot):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –µ–≥–æ –≤ –∞—Ä—Ö–∏–≤."""
    note_id = callback_data.note_id

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–ø–∏—Å–æ–∫
    success = await note_repo.set_note_completed_status(note_id, True)
    if not success:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫.", show_alert=True)
        return

    await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –∞—Ä—Ö–∏–≤.", show_alert=False)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª –Ω–µ –æ–Ω
    note = await note_repo.get_note_by_id(note_id, 0)  # –ê–¥–º–∏–Ω—Å–∫–∏–π –¥–æ—Å—Ç—É–ø, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if note and note.get('owner_id') != callback.from_user.id:
        try:
            completer_name = hbold(callback.from_user.first_name)
            await bot.send_message(
                note.get('owner_id'),
                f"‚úÖ –í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ '{hitalic(note.get('summary_text'))}' –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {completer_name}."
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ {note.get('owner_id')} –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫
    await display_notes_list_page(callback.message, callback.from_user.id, 1, state, is_archive_list=False)