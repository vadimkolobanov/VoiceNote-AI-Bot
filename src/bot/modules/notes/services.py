# src/bot/modules/notes/services.py
import logging
import asyncio
from datetime import datetime, timedelta
import pytz

from aiogram import Bot
from aiogram.utils.markdown import hbold, hcode, hitalic

from .keyboards import get_suggest_recurrence_keyboard
from ....database import note_repo, user_repo
from ....core.config import DEEPSEEK_API_KEY_EXISTS, MAX_NOTES_MVP
from ....services import llm
from ....services.scheduler import add_reminder_to_scheduler
from ....services.tz_utils import format_datetime_for_user


logger = logging.getLogger(__name__)

TYPO_CORRECTIONS = {
    "–Ω–∞–ø–æ–º–∏–Ω": "–Ω–∞–ø–æ–º–Ω–∏", "–Ω–∞–ø–æ–º–Ω–∏—Ç—å": "–Ω–∞–ø–æ–º–Ω–∏", "–Ω–∞–ø–æ–º–Ω–∏—å": "–Ω–∞–ø–æ–º–Ω–∏",
    "–∫—É–ø–∏—Ç": "–∫—É–ø–∏—Ç—å", "–∫—É–ø–∏—å": "–∫—É–ø–∏—Ç—å",
}


def _preprocess_text(text: str) -> str:
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—á–∞—Ç–æ–∫ –∫ —Ç–µ–∫—Å—Ç—É."""
    for typo, correction in TYPO_CORRECTIONS.items():
        text = text.lower().replace(f"\\b{typo}\\b", correction, 1)
    return text


def _calculate_due_date_from_components(time_components: dict, user_tz: pytz.BaseTzInfo) -> datetime | None:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Ç–æ—á–Ω—É—é –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ—Ç LLM.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç datetime –æ–±—ä–µ–∫—Ç –≤ UTC.
    """
    if not time_components:
        return None

    try:
        now_in_user_tz = datetime.now(user_tz)
        target_dt = now_in_user_tz

        relative_days = time_components.get("relative_days", 0) or 0
        relative_hours = time_components.get("relative_hours", 0) or 0
        relative_minutes = time_components.get("relative_minutes", 0) or 0
        if any([relative_days, relative_hours, relative_minutes]):
            target_dt += timedelta(days=relative_days, hours=relative_hours, minutes=relative_minutes)

        replace_kwargs = {
            k: v for k, v in {
                'year': time_components.get("set_year"), 'month': time_components.get("set_month"),
                'day': time_components.get("set_day"), 'hour': time_components.get("set_hour"),
                'minute': time_components.get("set_minute"), 'second': 0, 'microsecond': 0
            }.items() if v is not None
        }
        if replace_kwargs:
            target_dt = target_dt.replace(**replace_kwargs)

        # –ù–æ–≤–∞—è, –±–æ–ª–µ–µ —É–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—à–µ–¥—à–∏—Ö –¥–∞—Ç/–≤—Ä–µ–º–µ–Ω–∏
        is_today_explicit = time_components.get("is_today_explicit", False)
        if not is_today_explicit and target_dt <= now_in_user_tz:
            # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è, –∏ –æ–Ω–æ —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è -> –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            if time_components.get("set_hour") is not None and time_components.get("set_day") is None:
                if target_dt.time() <= now_in_user_tz.time():
                    target_dt += timedelta(days=1)
            # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –¥–∞—Ç—É, –∏ –æ–Ω–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞ –≤ —ç—Ç–æ–º –≥–æ–¥—É -> –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
            elif time_components.get("set_day") is not None and time_components.get("set_month") is not None:
                if target_dt.date() < now_in_user_tz.date():
                    target_dt = target_dt.replace(year=target_dt.year + 1)
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è, –Ω–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ
                elif target_dt.date() == now_in_user_tz.date() and target_dt.time() <= now_in_user_tz.time():
                    target_dt += timedelta(days=1)

        return target_dt.astimezone(pytz.utc)
    except (TypeError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {time_components}")
        return None


async def _check_for_recurring_suggestion(bot: Bot, user_id: int, new_note: dict):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ —á–∞—Å—Ç—å—é —Ä—É—Ç–∏–Ω—ã, –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–¥–µ–ª–∞—Ç—å –µ–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–π—Å—è.
    """
    await asyncio.sleep(2)

    new_summary = new_note.get('summary_text')
    if not new_summary:
        return

    candidate_notes = await note_repo.find_similar_notes(user_id, new_summary)

    similar_notes_count = 0
    for old_note in candidate_notes:
        if old_note['note_id'] == new_note['note_id']:
            continue
        if await llm.are_tasks_same(new_note['corrected_text'], old_note['corrected_text']):
            similar_notes_count += 1

    if similar_notes_count >= 2:
        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Ä—É—Ç–∏–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–∑–∞–º–µ—Ç–∫–∞ #{new_note['note_id']})")

        user_profile = await user_repo.get_user_profile(user_id)
        if not user_profile or not user_profile.get('is_vip', False):
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ VIP, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            return

        text = (
            f"üí° –Ø –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ –≤—ã —É–∂–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –ø–æ—Ö–æ–∂—É—é –∑–∞–¥–∞—á—É: ¬´{hitalic(new_summary)}¬ª.\n\n"
            "–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è –Ω–∞–ø–æ–º–∏–Ω–∞–ª –≤–∞–º –æ–± —ç—Ç–æ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –≤–≤–æ–¥–∏—Ç—å –∑–∞–¥–∞—á—É –≤—Ä—É—á–Ω—É—é?"
        )
        keyboard = get_suggest_recurrence_keyboard(new_note['note_id'])
        await bot.send_message(user_id, text, reply_markup=keyboard, parse_mode="HTML")


async def process_and_save_note(
        bot: Bot,
        telegram_id: int,
        text_to_process: str,
        audio_file_id: str | None = None,
        message_date: datetime | None = None
) -> tuple[bool, str, dict | None, bool]:
    """
    –ì–ª–∞–≤–Ω–∞—è —Å–µ—Ä–≤–∏—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞, –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏.
    """
    user_profile = await user_repo.get_user_profile(telegram_id)
    if not user_profile:
        return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start.", None, False

    is_vip = user_profile.get('is_vip', False)

    if not is_vip:
        is_potential_shopping_list = '–∫—É–ø–∏—Ç—å' in text_to_process.lower() or '–ø–æ–∫—É–ø–∫–∏' in text_to_process.lower()
        if not is_potential_shopping_list:
            active_notes_count = await note_repo.count_active_notes_for_user(telegram_id)
            if active_notes_count >= MAX_NOTES_MVP:
                return False, f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {MAX_NOTES_MVP} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é, —É–¥–∞–ª–∏—Ç–µ –∏–ª–∏ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä—É–π—Ç–µ —Å—Ç–∞—Ä—É—é.", None, False

    preprocessed_text = _preprocess_text(text_to_process)

    if not DEEPSEEK_API_KEY_EXISTS:
        note_id = await note_repo.create_note(
            telegram_id=telegram_id, corrected_text=text_to_process, summary_text=text_to_process[:80],
            original_audio_telegram_file_id=audio_file_id, note_taken_at=message_date or datetime.now(pytz.utc)
        )
        if note_id:
            note = await note_repo.get_note_by_id(note_id, telegram_id)
            user_message = f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ #{hbold(str(note_id))} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (–±–µ–∑ AI-–∞–Ω–∞–ª–∏–∑–∞)."
            return True, user_message, note, False
        else:
            return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏.", None, False

    intent_result = await llm.classify_intent(preprocessed_text)
    if "error" in intent_result:
        return False, "‚ùå –û—à–∏–±–∫–∞ AI: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ.", None, False

    intent = llm.UserIntent(intent_result.get("intent", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
    logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ '{intent.value}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")

    llm_analysis_json, category_to_save, due_date_obj, recurrence_rule = {}, "–û–±—â–µ–µ", None, None

    if intent == llm.UserIntent.CREATE_SHOPPING_LIST:
        llm_analysis_json = await llm.extract_shopping_list(preprocessed_text)
        category_to_save = "–ü–æ–∫—É–ø–∫–∏"
    elif intent == llm.UserIntent.CREATE_REMINDER:
        user_timezone_str = user_profile.get('timezone', 'UTC')
        user_tz = pytz.timezone(user_timezone_str)
        current_user_dt_iso = datetime.now(user_tz).isoformat()
        llm_analysis_json = await llm.extract_reminder_details(preprocessed_text, current_user_dt_iso)
        category_to_save = "–ó–∞–¥–∞—á–∏"
    else:
        llm_analysis_json = await llm.extract_note_details(preprocessed_text)

    if "error" in llm_analysis_json:
        return False, "‚ùå –û—à–∏–±–∫–∞ AI: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–µ—Ç–∞–ª–∏ –∏–∑ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.", None, False

    corrected_text_to_save = llm_analysis_json.get("corrected_text", text_to_process)
    summary_text_to_save = llm_analysis_json.get("summary_text", corrected_text_to_save[:80])

    if intent == llm.UserIntent.CREATE_REMINDER:
        time_components = llm_analysis_json.get("time_components")
        user_timezone_str = user_profile.get('timezone', 'UTC')
        user_tz = pytz.timezone(user_timezone_str)
        due_date_obj = _calculate_due_date_from_components(time_components, user_tz)
        recurrence_rule = llm_analysis_json.get("recurrence_rule")

    if category_to_save == "–ü–æ–∫—É–ø–∫–∏" and llm_analysis_json.get("items"):
        shopping_note = await note_repo.get_or_create_active_shopping_list_note(telegram_id)
        if not shopping_note:
            return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫.", None, False

        existing_items = shopping_note.get("llm_analysis_json", {}).get("items", [])
        existing_item_names = {item['item_name'].lower() for item in existing_items}
        new_items_from_llm = llm_analysis_json.get("items", [])

        items_to_add = [item for item in new_items_from_llm if item['item_name'].lower() not in existing_item_names]
        for item in items_to_add:
            item['added_by'] = telegram_id

        existing_items.extend(items_to_add)
        shopping_note["llm_analysis_json"]["items"] = existing_items
        await note_repo.update_note_llm_json(shopping_note['note_id'], shopping_note["llm_analysis_json"])

        user_message = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫: {len(items_to_add)} –ø–æ–∑." if items_to_add else "‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω."
        return True, user_message, shopping_note, False

    warning_message = ""
    if recurrence_rule and not is_vip:
        recurrence_rule = None
        warning_message = f"\n\n‚≠ê –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏ ‚Äî VIP-—Ñ—É–Ω–∫—Ü–∏—è. –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ —Ä–∞–∑–æ–≤–∞—è."

    note_id = await note_repo.create_note(
        telegram_id=telegram_id, corrected_text=corrected_text_to_save, summary_text=summary_text_to_save,
        original_stt_text=text_to_process, llm_analysis_json=llm_analysis_json,
        original_audio_telegram_file_id=audio_file_id, note_taken_at=message_date or datetime.now(pytz.utc),
        due_date=due_date_obj, recurrence_rule=recurrence_rule, category=category_to_save
    )

    if not note_id:
        return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –≤ –±–∞–∑—É.", None, False

    new_note = await note_repo.get_note_by_id(note_id, telegram_id)
    if new_note.get('due_date'):
        add_reminder_to_scheduler(bot, {**new_note, **user_profile})

    user_message = f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ #{hbold(str(note_id))} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!{warning_message}"
    date_info = ""
    needs_tz_prompt = False
    if new_note.get('due_date'):
        user_timezone_str = user_profile.get('timezone', 'UTC')
        formatted_date = format_datetime_for_user(new_note['due_date'], user_timezone_str)
        date_info = f"\nüóìÔ∏è –°—Ä–æ–∫: {formatted_date}"
        if user_timezone_str == 'UTC':
            needs_tz_prompt = True
            date_info += f"\n\n{hbold('‚ö†Ô∏è –í–∞–∂–Ω–æ!')} –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ –≤–æ–≤—Ä–µ–º—è."

    full_response = f"{user_message}\n\n{hcode(summary_text_to_save)}{date_info}"

    asyncio.create_task(_check_for_recurring_suggestion(bot, telegram_id, new_note))

    return True, full_response, new_note, needs_tz_prompt