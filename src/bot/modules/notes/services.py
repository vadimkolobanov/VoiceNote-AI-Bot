# src/bot/modules/notes/services.py
import logging
from datetime import datetime, time
import pytz

from aiogram import Bot
from aiogram.utils.markdown import hbold, hcode

from ....database import note_repo, user_repo
from ....core.config import DEEPSEEK_API_KEY_EXISTS, MAX_NOTES_MVP
from ....services.llm import enhance_text_with_llm
from ....services.scheduler import add_reminder_to_scheduler
from ....services.tz_utils import format_datetime_for_user

logger = logging.getLogger(__name__)


async def process_and_save_note(
        bot: Bot,
        telegram_id: int,
        text_to_process: str,
        audio_file_id: str | None = None,
        message_date: datetime | None = None
) -> tuple[bool, str, dict | None, bool]:
    """
    –ì–ª–∞–≤–Ω–∞—è —Å–µ—Ä–≤–∏—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞, –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏.
    :return: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Å–æ–∑–¥–∞–Ω–Ω–∞—è_–∑–∞–º–µ—Ç–∫–∞, –Ω—É–∂–µ–Ω_–ª–∏_–∑–∞–ø—Ä–æ—Å_–ø—Ä–æ_—Ç–∞–π–º–∑–æ–Ω—É)
    """
    user_profile = await user_repo.get_user_profile(telegram_id)
    if not user_profile:
        return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start.", None, False

    is_vip = user_profile.get('is_vip', False)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –¥–ª—è –Ω–µ-VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not is_vip:
        # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ –ø–æ–∫—É–ø–æ–∫, –æ–Ω–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç –æ–¥–Ω—É –∏ —Ç—É –∂–µ –∑–∞–º–µ—Ç–∫—É
        is_potential_shopping_list = '–∫—É–ø–∏—Ç—å' in text_to_process.lower() or '–ø–æ–∫—É–ø–∫–∏' in text_to_process.lower()
        if not is_potential_shopping_list:
            active_notes_count = await note_repo.count_active_notes_for_user(telegram_id)
            if active_notes_count >= MAX_NOTES_MVP:
                return False, f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {MAX_NOTES_MVP} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é, —É–¥–∞–ª–∏—Ç–µ –∏–ª–∏ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä—É–π—Ç–µ —Å—Ç–∞—Ä—É—é.", None, False

    if not DEEPSEEK_API_KEY_EXISTS:
        # –õ–æ–≥–∏–∫–∞ –±–µ–∑ LLM: –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å
        note_id = await note_repo.create_note(
            telegram_id=telegram_id,
            corrected_text=text_to_process,
            summary_text=text_to_process[:80],
            original_audio_telegram_file_id=audio_file_id,
            note_taken_at=message_date or datetime.now(pytz.utc)
        )
        if note_id:
            note = await note_repo.get_note_by_id(note_id, telegram_id)
            user_message = f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ #{hbold(str(note_id))} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (–±–µ–∑ AI-–∞–Ω–∞–ª–∏–∑–∞)."
            return True, user_message, note, False
        else:
            return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏.", None, False

    # --- –õ–æ–≥–∏–∫–∞ —Å LLM ---
    user_timezone_str = user_profile.get('timezone', 'UTC')
    user_tz = pytz.timezone(user_timezone_str)
    current_user_dt_iso = datetime.now(user_tz).isoformat()

    llm_result = await enhance_text_with_llm(text_to_process, current_user_dt_iso)

    if "error" in llm_result:
        logger.error(f"LLM error for user {telegram_id}: {llm_result['error']}")
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ LLM —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–º–µ—Ç–∫—É
        corrected_text_to_save = text_to_process
        summary_text_to_save = text_to_process[:80]
        category_to_save = "–û–±—â–µ–µ"
        llm_analysis_json = {"error": llm_result['error']}
        due_date_obj = None
        recurrence_rule = None
    else:
        llm_analysis_json = llm_result
        corrected_text_to_save = llm_result.get("corrected_text", text_to_process)
        summary_text_to_save = llm_result.get("summary_text", corrected_text_to_save[:80])
        category_to_save = llm_result.get("category", "–û–±—â–µ–µ")

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã
        due_date_obj = None
        if llm_result.get("dates_times"):
            try:
                date_info = llm_result["dates_times"][0]
                due_date_str_utc = date_info.get("absolute_datetime_start")
                if due_date_str_utc:
                    due_date_obj = datetime.fromisoformat(due_date_str_utc.replace('Z', '+00:00'))
            except (ValueError, IndexError, KeyError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –∏–∑ LLM: {e}")

        recurrence_rule = llm_result.get("recurrence_rule")

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–æ–≤ –ø–æ–∫—É–ø–æ–∫ ---
    if category_to_save == "–ü–æ–∫—É–ø–∫–∏" and llm_analysis_json.get("items"):
        shopping_note = await note_repo.get_or_create_active_shopping_list_note(telegram_id)
        if not shopping_note:
            return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫.", None, False

        existing_items = shopping_note.get("llm_analysis_json", {}).get("items", [])
        existing_item_names = {item['item_name'].lower() for item in existing_items}
        new_items_from_llm = llm_analysis_json["items"]

        items_to_add = []
        for item in new_items_from_llm:
            if item['item_name'].lower() not in existing_item_names:
                item['added_by'] = telegram_id
                items_to_add.append(item)

        existing_items.extend(items_to_add)
        shopping_note["llm_analysis_json"]["items"] = existing_items

        await note_repo.update_note_llm_json(shopping_note['note_id'], shopping_note["llm_analysis_json"])

        user_message = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫: {len(items_to_add)} –ø–æ–∑."
        return True, user_message, shopping_note, False

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ ---
    warning_message = ""
    if recurrence_rule and not is_vip:
        recurrence_rule = None
        warning_message = f"\n\n‚≠ê –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏ ‚Äî VIP-—Ñ—É–Ω–∫—Ü–∏—è. –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ —Ä–∞–∑–æ–≤–∞—è."

    note_id = await note_repo.create_note(
        telegram_id=telegram_id,
        corrected_text=corrected_text_to_save,
        summary_text=summary_text_to_save,
        original_stt_text=text_to_process,
        llm_analysis_json=llm_analysis_json,
        original_audio_telegram_file_id=audio_file_id,
        note_taken_at=message_date or datetime.now(pytz.utc),
        due_date=due_date_obj,
        recurrence_rule=recurrence_rule,
        category=category_to_save
    )

    if not note_id:
        return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –≤ –±–∞–∑—É.", None, False

    new_note = await note_repo.get_note_by_id(note_id, telegram_id)
    if new_note.get('due_date'):
        add_reminder_to_scheduler(bot, {**new_note, **user_profile})

    user_message = f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ #{hbold(str(note_id))} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!{warning_message}"
    date_info = ""
    needs_tz_prompt = False
    if new_note.get('due_date'):
        formatted_date = format_datetime_for_user(new_note['due_date'], user_timezone_str)
        date_info = f"\nüóìÔ∏è –°—Ä–æ–∫: {formatted_date}"
        if user_timezone_str == 'UTC':
            needs_tz_prompt = True
            date_info += f"\n\n{hbold('‚ö†Ô∏è –í–∞–∂–Ω–æ!')} –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ –≤–æ–≤—Ä–µ–º—è."

    full_response = f"{user_message}\n\n{hcode(summary_text_to_save)}{date_info}"

    return True, full_response, new_note, needs_tz_prompt