# src/bot/modules/notes/keyboards.py
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from ....core.config import NOTE_CATEGORIES
from ...common_utils.callbacks import NoteAction, ShoppingListAction, PageNavigation, ShoppingListReminder


def get_undo_creation_keyboard(note_id: int, is_shopping_list: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""
    builder = InlineKeyboardBuilder()

    if is_shopping_list:
        builder.button(
            text="üõí –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫",
            callback_data=ShoppingListAction(action="show", note_id=note_id).pack()
        )
    else:
        builder.button(
            text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏",
            callback_data=NoteAction(action="view", note_id=note_id).pack()
        )

    builder.button(
        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
        callback_data=NoteAction(action="undo_create", note_id=note_id).pack()
    )
    builder.adjust(2)
    return builder.as_markup()


def get_notes_list_display_keyboard(
        notes: list[dict],
        current_page: int,
        total_pages: int,
        is_archive_list: bool,
        current_user_id: int
) -> InlineKeyboardMarkup:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–º–µ—Ç–æ–∫ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    builder = InlineKeyboardBuilder()
    target_list_str = 'archive' if is_archive_list else 'active'

    for note in notes:
        is_owner = note.get('owner_id') == current_user_id
        shared_icon = "" if is_owner else "ü§ù"
        category = note.get('category')

        if category == '–ü–æ–∫—É–ø–∫–∏':
            status_icon = "üõí"
        else:
            status_icon = "‚úÖ" if note.get('is_completed') else "üìù"

        text_to_show = note.get('summary_text') or note['corrected_text']
        preview_text = f"{shared_icon}{status_icon} #{note['note_id']} - {text_to_show[:35]}"
        if len(text_to_show) > 35:
            preview_text += "..."

        builder.button(
            text=preview_text,
            callback_data=NoteAction(action="view", note_id=note['note_id'], page=current_page,
                                     target_list=target_list_str).pack()
        )
    builder.adjust(1)

    pagination_row_items = []
    if current_page > 1:
        pagination_row_items.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=PageNavigation(target="notes", page=current_page - 1,
                                                                               archived=is_archive_list).pack())
        )
    if total_pages > 1:
        pagination_row_items.append(
            InlineKeyboardButton(text=f"{current_page}/{total_pages}", callback_data="ignore_page_display")
        )
    if current_page < total_pages:
        pagination_row_items.append(
            InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=PageNavigation(target="notes", page=current_page + 1,
                                                                                archived=is_archive_list).pack())
        )
    if pagination_row_items:
        builder.row(*pagination_row_items)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º
    bottom_buttons = []
    if not is_archive_list:
        bottom_buttons.append(
            InlineKeyboardButton(text="üóÑÔ∏è –ê—Ä—Ö–∏–≤",
                                 callback_data=PageNavigation(target="notes", page=1, archived=True).pack())
        )

    bottom_buttons.append(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_to_main_menu")
    )
    builder.row(*bottom_buttons)

    return builder.as_markup()


def get_note_view_actions_keyboard(note: dict, current_page: int, current_user_id: int) -> InlineKeyboardMarkup:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–º–µ—Ç–∫–∏."""
    builder = InlineKeyboardBuilder()
    note_id = note['note_id']
    is_archived = note.get('is_archived', False)
    has_audio = bool(note.get('original_audio_telegram_file_id'))
    is_recurring = bool(note.get('recurrence_rule'))
    is_vip = note.get('is_vip', False)
    target_list_str = 'archive' if is_archived else 'active'
    is_owner = note.get('owner_id') == current_user_id

    # --- –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ ---
    if not is_archived:
        # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" –¥–ª—è –°–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫, —É –Ω–µ–≥–æ —Å–≤–æ—è –∫–Ω–æ–ø–∫–∞ "–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
        if note.get('category') != '–ü–æ–∫—É–ø–∫–∏':
            builder.button(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
                           callback_data=NoteAction(action="complete", note_id=note_id, page=current_page).pack())
        if is_owner:
            builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                           callback_data=NoteAction(action="edit", note_id=note_id, page=current_page).pack())
            builder.button(text="ü§ù –ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
                           callback_data=NoteAction(action="share", note_id=note_id, page=current_page).pack())

        builder.button(text="üóÇÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                       callback_data=NoteAction(action="change_category", note_id=note_id, page=current_page,
                                                target_list=target_list_str).pack())

        if is_recurring and is_vip and is_owner:
            builder.button(text="‚≠ê üîÅ –°–¥–µ–ª–∞—Ç—å —Ä–∞–∑–æ–≤–æ–π",
                           callback_data=NoteAction(action="stop_recurrence", note_id=note_id,
                                                    page=current_page).pack())

        if is_owner:
            builder.button(text="üóÑÔ∏è –í –∞—Ä—Ö–∏–≤",
                           callback_data=NoteAction(action="archive", note_id=note_id, page=current_page).pack())

    # --- –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ê—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ ---
    else:
        if is_owner:
            builder.button(text="‚Ü©Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                           callback_data=NoteAction(action="unarchive", note_id=note_id, page=current_page,
                                                    target_list=target_list_str).pack())
            builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞",
                           callback_data=NoteAction(action="confirm_delete", note_id=note_id, page=current_page,
                                                    target_list=target_list_str).pack())

    # --- –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ ---
    if has_audio:
        builder.button(text="üéß –ü—Ä–æ—Å–ª—É—à–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª",
                       callback_data=NoteAction(action="listen_audio", note_id=note_id).pack())

    list_button_text = "‚¨ÖÔ∏è –ö –∞—Ä—Ö–∏–≤—É" if is_archived else "‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–º–µ—Ç–æ–∫"
    builder.button(text=list_button_text,
                   callback_data=PageNavigation(target="notes", page=current_page, archived=is_archived).pack())

    builder.adjust(1)
    return builder.as_markup()


def get_category_selection_keyboard(note_id: int, page: int, target_list: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏."""
    builder = InlineKeyboardBuilder()
    for category in NOTE_CATEGORIES:
        builder.button(
            text=category,
            callback_data=NoteAction(action="set_category", note_id=note_id, page=page, target_list=target_list,
                                     category=category).pack()
        )
    builder.button(
        text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞",
        callback_data=NoteAction(action="view", note_id=note_id, page=page, target_list=target_list).pack()
    )
    builder.adjust(2, 2, 2, 1)
    return builder.as_markup()


def get_confirm_delete_keyboard(note_id: int, page: int, target_list: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è."""
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚ÄºÔ∏è –î–ê, –£–î–ê–õ–ò–¢–¨ –ù–ê–í–°–ï–ì–î–ê ‚ÄºÔ∏è",
        callback_data=NoteAction(action="delete", note_id=note_id, page=page, target_list=target_list).pack()
    )
    builder.button(
        text="–û—Ç–º–µ–Ω–∞",
        callback_data=NoteAction(action="view", note_id=note_id, page=page, target_list=target_list).pack()
    )
    builder.adjust(1)
    return builder.as_markup()


def get_reminder_notification_keyboard(note_id: int, is_pre_reminder: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º."""
    builder = InlineKeyboardBuilder()
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if not is_pre_reminder:
        builder.button(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=NoteAction(action="complete", note_id=note_id).pack())
        builder.button(text="–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 1 —á–∞—Å",
                       callback_data=NoteAction(action="snooze", note_id=note_id, snooze_minutes=60).pack())
        builder.button(text="–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 3 —á–∞—Å–∞",
                       callback_data=NoteAction(action="snooze", note_id=note_id, snooze_minutes=180).pack())

    builder.button(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data=NoteAction(action="view", note_id=note_id).pack())
    builder.adjust(1, 2, 1) if not is_pre_reminder else builder.adjust(1)
    return builder.as_markup()


def get_shopping_list_keyboard(note_id: int, items: list, is_archived: bool,
                               participants_map: dict[int, str]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –ø–æ–∫—É–ø–æ–∫."""
    builder = InlineKeyboardBuilder()

    for index, item in enumerate(items):
        status_icon = "‚úÖ" if item.get('checked') else "‚¨úÔ∏è"
        item_name = item.get('item_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è').strip()
        author_id = item.get('added_by')
        author_name = participants_map.get(author_id)
        author_str = f" ({author_name})" if author_name else ""
        button_text = f"{status_icon} {item_name}{author_str}"

        if is_archived:
            builder.button(text=button_text, callback_data="ignore")
        else:
            builder.button(
                text=button_text,
                callback_data=ShoppingListAction(action="toggle", note_id=note_id, item_index=index).pack()
            )

    builder.adjust(1)

    if not is_archived:
        builder.row(InlineKeyboardButton(
            text="üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ —Å–ø–∏—Å–∫–µ",
            callback_data=ShoppingListReminder(action="show_options", note_id=note_id).pack()
        ))
        builder.row(InlineKeyboardButton(
            text="üõí –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
            callback_data=ShoppingListAction(action="archive", note_id=note_id).pack()
        ))

    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–º–µ—Ç–∫–µ",
        callback_data=NoteAction(action="view", note_id=note_id).pack()
    ))
    return builder.as_markup()


def get_shopping_reminder_options_keyboard(note_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–ø–∏—Å–∫–µ –ø–æ–∫—É–ø–æ–∫."""
    builder = InlineKeyboardBuilder()

    options = {
        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ
        "–ß–µ—Ä–µ–∑ 1 —á–∞—Å": "in_1h",
        "–ß–µ—Ä–µ–∑ 3 —á–∞—Å–∞": "in_3h",
        # –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ (—Å–µ–≥–æ–¥–Ω—è)
        "–°–µ–≥–æ–¥–Ω—è –≤ 18:00": "today_18",
        "–°–µ–≥–æ–¥–Ω—è –≤ 20:00": "today_20",
        # –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ (–±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏)
        "–ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º (9:00)": "tomorrow_09",
        "–í —Å—É–±–±–æ—Ç—É (12:00)": "saturday_12",
    }

    for text, value in options.items():
        builder.button(
            text=text,
            callback_data=ShoppingListReminder(action="set", note_id=note_id, value=value).pack()
        )

    builder.button(
        text="–û—Ç–º–µ–Ω–∞",
        callback_data=ShoppingListAction(action="show", note_id=note_id).pack()
    )

    builder.adjust(2, 2, 2, 1)
    return builder.as_markup()

def get_suggest_recurrence_keyboard(note_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —Å–¥–µ–ª–∞—Ç—å –∑–∞–¥–∞—á—É –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–π—Å—è."""
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ö–∞–∂–¥—ã–π –¥–µ–Ω—å",
        callback_data=NoteAction(action="set_recur", note_id=note_id, recur_freq="DAILY").pack()
    )
    builder.button(
        text="–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é",
        callback_data=NoteAction(action="set_recur", note_id=note_id, recur_freq="WEEKLY").pack()
    )
    builder.button(
        text="–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü",
        callback_data=NoteAction(action="set_recur", note_id=note_id, recur_freq="MONTHLY").pack()
    )
    builder.button(
        text="–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ",
        callback_data=NoteAction(action="decline_recur", note_id=note_id).pack()
    )
    builder.adjust(1)
    return builder.as_markup()