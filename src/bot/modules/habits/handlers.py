# src/bot/modules/habits/handlers.py
import logging
from datetime import datetime
import pytz

from aiogram import F, Router, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hbold, hitalic

from ....database import habit_repo, user_repo
from ....services import llm
from ....bot.common_utils.states import HabitStates
from ....bot.common_utils.callbacks import HabitAction, HabitTrack
from .keyboards import get_habits_menu_keyboard, get_habit_confirmation_keyboard, get_manage_habits_keyboard

logger = logging.getLogger(__name__)
router = Router()


async def show_habits_menu(event: types.Message | types.CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–≤—ã—á–µ–∫."""
    message = event if isinstance(event, types.Message) else event.message
    user_id = event.from_user.id

    habits = await habit_repo.get_user_habits(user_id)

    if not habits:
        text = (
            f"üí™ {hbold('–¢—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫')}\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏.\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º?"
        )
    else:
        habits_list = []
        for h in habits:
            habits_list.append(f"‚Ä¢ {hitalic(h['name'])}")
        habits_str = "\n".join(habits_list)
        text = (
            f"üí™ {hbold('–í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏')}\n\n"
            f"{habits_str}\n\n"
            "–Ø –±—É–¥—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –Ω–∏—Ö –∏ –≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
        )

    keyboard = get_habits_menu_keyboard(has_habits=bool(habits))

    if isinstance(event, types.CallbackQuery):
        try:
            await message.edit_text(text, reply_markup=keyboard)
        except:
            await message.answer(text, reply_markup=keyboard)
        await event.answer()
    else:
        await message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data == "habits_menu")
async def habits_menu_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await show_habits_menu(callback)


@router.callback_query(F.data == "add_new_habits")
async def add_new_habits_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(HabitStates.awaiting_description)
    text = (
        "üìù –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∫–∞–∫–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å.\n\n"
        f"{hitalic('–ü—Ä–∏–º–µ—Ä: ¬´–•–æ—á—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —É—Ç—Ä–æ–º –¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É, –ø–æ –≤–µ—á–µ—Ä–∞–º –º—ã—Ç—å –ø–æ—Å—É–¥—É, –∞ –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º —á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É¬ª')}"
    )
    await callback.message.edit_text(text)
    await callback.answer()


@router.message(HabitStates.awaiting_description, F.text)
async def process_habits_description(message: types.Message, state: FSMContext):
    status_msg = await message.answer("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Ç–µ–∫—Å—Ç... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

    user_profile = await user_repo.get_user_profile(message.from_user.id)
    user_tz = pytz.timezone(user_profile.get('timezone', 'UTC'))
    current_time_iso = datetime.now(user_tz).isoformat()

    llm_result = await llm.extract_habits_from_text(message.text, current_time_iso)

    if "error" in llm_result or not llm_result.get("habits"):
        await status_msg.edit_text(
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏ –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ.")
        return

    habits_to_add = llm_result["habits"]
    await state.update_data(habits_to_add=habits_to_add)

    confirmation_parts = [
        "–û—Ç–ª–∏—á–Ω–æ, —è –≤–∞—Å –ø–æ–Ω—è–ª! –í–æ—Ç —á—Ç–æ —É –º–µ–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å. –í—Å—ë –≤–µ—Ä–Ω–æ?\n",
        hbold("–í–∞—à–∏ –±—É–¥—É—â–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:"),
    ]

    icon_map = {"–∑–∞—Ä—è–¥–∫": "ü§∏", "—Å–ø–æ—Ä—Ç": "üèÉ", "—á–∏—Ç–∞—Ç—å": "üìñ", "–º—ã—Ç—å": "üçΩÔ∏è", "–≥—É–ª—è—Ç—å": "üêï", "–≤–æ–¥–∞": "üíß", "–º–µ–¥–∏—Ç–∏—Ä": "üßò"}

    for habit in habits_to_add:
        icon = "üí°"
        for key, val in icon_map.items():
            if key in habit['name'].lower():
                icon = val
                break

        time_str = f"–≤ {habit.get('reminder_time')}" if habit.get('reminder_time') else "(–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ)"
        from ....services.tz_utils import format_rrule_for_user
        freq_str = format_rrule_for_user(habit['frequency_rule'])

        confirmation_parts.append(f"\n{icon} {hbold(habit['name'])}\n  - {hitalic(f'–ö–æ–≥–¥–∞: {freq_str}, {time_str}')}")

    await status_msg.edit_text(
        "\n".join(confirmation_parts),
        reply_markup=get_habit_confirmation_keyboard()
    )
    await state.set_state(HabitStates.awaiting_confirmation)


@router.callback_query(HabitStates.awaiting_confirmation, HabitAction.filter(F.action == "confirm_add"))
async def confirm_add_habits(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    from ....services.scheduler import setup_habit_reminders

    data = await state.get_data()
    habits_to_add = data.get("habits_to_add", [])

    if not habits_to_add:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.", show_alert=True)
        return

    await callback.message.edit_text("‚úÖ –°–æ—Ö—Ä–∞–Ω—è—é –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è...")

    added_habits = await habit_repo.add_habits_bulk(callback.from_user.id, habits_to_add)

    if added_habits:
        await setup_habit_reminders(bot)

    await state.clear()
    await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!", show_alert=True)
    await show_habits_menu(callback)


@router.callback_query(HabitStates.awaiting_confirmation, HabitAction.filter(F.action == "cancel"))
async def cancel_add_habits(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await show_habits_menu(callback)


@router.callback_query(HabitTrack.filter())
async def track_habit_handler(callback: types.CallbackQuery, callback_data: HabitTrack):
    habit_id = callback_data.habit_id
    status = callback_data.status

    user_profile = await user_repo.get_user_profile(callback.from_user.id)
    user_tz = pytz.timezone(user_profile.get('timezone', 'UTC'))
    track_date = datetime.now(user_tz).date().isoformat()

    success = await habit_repo.track_habit(habit_id, callback.from_user.id, track_date, status)

    if success:
        status_text = "–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ!" if status == "completed" else "–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
        await callback.answer(status_text)
        try:
            await callback.message.edit_text(f"{callback.message.text}\n\n{hbold(status_text)}", reply_markup=None)
        except Exception:
            pass
    else:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)


@router.callback_query(F.data == "manage_habits")
async def manage_habits_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    habits = await habit_repo.get_user_habits(user_id)

    if not habits:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", show_alert=True)
        await show_habits_menu(callback)
        return

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:"
    keyboard = get_manage_habits_keyboard(habits)

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(HabitAction.filter(F.action == "delete"))
async def delete_habit_handler(callback: types.CallbackQuery, callback_data: HabitAction, bot: Bot):
    from ....services.scheduler import setup_habit_reminders

    habit_id = callback_data.habit_id
    user_id = callback.from_user.id

    success = await habit_repo.delete_habit(habit_id, user_id)

    if success:
        await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
        await setup_habit_reminders(bot)
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø–µ—Ä–µ–¥–∞–≤–∞—è callback, —á—Ç–æ–±—ã message.edit_text —Å—Ä–∞–±–æ—Ç–∞–ª
        await manage_habits_handler(callback)
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É.", show_alert=True)