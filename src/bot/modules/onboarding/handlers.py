# src/bot/modules/onboarding/handlers.py
import logging
from datetime import datetime
import pytz

from aiogram import Router, F, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hbold, hitalic

from ....database import user_repo, note_repo
from ...common_utils.callbacks import OnboardingAction
from ...common_utils.states import OnboardingStates
from ....services import llm
from .keyboards import (
    get_welcome_keyboard,
    get_next_step_keyboard,
    get_timezone_keyboard,
    get_vip_choice_keyboard,
    get_final_keyboard,
)

logger = logging.getLogger(__name__)
router = Router()


async def _show_main_menu(message: types.Message, state: FSMContext):
    """–ß–∏—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è."""
    from ..common.handlers import get_main_menu_keyboard

    await state.clear()

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º get_or_create_user –¥–ª—è 100% –≥–∞—Ä–∞–Ω—Ç–∏–∏ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ—Ñ–∏–ª—è ---
    user_profile = await user_repo.get_or_create_user(message.from_user)
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –¥–∞–∂–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
    if not user_profile:
        logger.error(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ _show_main_menu")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å /start –µ—â–µ —Ä–∞–∑.")
        return

    is_vip = user_profile.get('is_vip', False)
    active_shopping_list = await note_repo.get_active_shopping_list(message.from_user.id)
    has_active_list = active_shopping_list is not None

    text = (
        f"üè† {hbold('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')}\n\n"
        f"–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±—É—é –º—ã—Å–ª—å, –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, "
        f"–∏ —è –ø—Ä–µ–≤—Ä–∞—â—É –µ–≥–æ –≤ —É–º–Ω—É—é –∑–∞–º–µ—Ç–∫—É."
    )
    keyboard = get_main_menu_keyboard(is_vip=is_vip, has_active_list=has_active_list)

    try:
        await message.edit_text(text, reply_markup=keyboard)
    except Exception:
        await message.answer(text, reply_markup=keyboard)


async def _mark_onboarding_complete(user_id: int, state: FSMContext, bot: Bot, message: types.Message):
    """–û—Ç–º–µ—á–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await user_repo.set_onboarding_status(user_id, True)
    await _show_main_menu(message, state)


@router.callback_query(OnboardingAction.filter(F.action == "skip"))
async def skip_onboarding_handler(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è."""
    logger.info(f"User {callback.from_user.id} skipped onboarding.")
    await callback.answer("–•–æ—Ä–æ—à–æ, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ '‚ùì –ü–æ–º–æ—â—å'.")
    await _mark_onboarding_complete(callback.from_user.id, state, bot, callback.message)


async def start_onboarding(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    logger.info(f"Starting onboarding for user {message.from_user.id}")
    await state.set_state(OnboardingStates.step_1_welcome)
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {hbold(message.from_user.first_name)}! –Ø ‚Äî {hbold('VoiceNote AI')}.\n\n"
        f"–î–∞–≤–∞–π—Ç–µ —è –±—ã—Å—Ç—Ä–æ –ø–æ–∫–∞–∂—É, –∫–∞–∫ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç. –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã!"
    )
    await message.answer(text, reply_markup=get_welcome_keyboard())


@router.callback_query(OnboardingStates.step_1_welcome, OnboardingAction.filter(F.action == "next_step"))
async def onboarding_step_2_handler(callback: types.CallbackQuery, state: FSMContext):
    """–®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏."""
    await state.set_state(OnboardingStates.step_2_create_note)
    text = (
        f"1Ô∏è‚É£ {hbold('–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è')} (–®–∞–≥ 1/5)\n\n"
        f"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ {hbold('—Ç–µ–∫—Å—Ç')} –∏–ª–∏ {hbold('–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')}, –∏ —è –ø—Ä–µ–≤—Ä–∞—â—É –µ–≥–æ –≤ —É–º–Ω—É—é –∑–∞–º–µ—Ç–∫—É. "
        f"–ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –±—É–¥–µ—Ç –¥–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, {hitalic('¬´–ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ –∑–∞–≤—Ç—Ä–∞ –≤ 10¬ª')}), —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç–∞–≤–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n\n"
        f"üëâ {hbold('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ!')} –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±—É—é –º—ã—Å–ª—å. –ó–∞–º–µ—Ç–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è, —ç—Ç–æ –ª–∏—à—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è."
    )
    await callback.message.edit_text(text, reply_markup=get_next_step_keyboard("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥"))
    await callback.answer()


@router.message(OnboardingStates.step_2_create_note, F.text)
@router.callback_query(OnboardingStates.step_2_create_note, OnboardingAction.filter(F.action == "next_step"))
async def onboarding_step_3_handler(event: types.Message | types.CallbackQuery, state: FSMContext, bot: Bot):
    """–®–∞–≥ 3: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞."""
    message = event if isinstance(event, types.Message) else event.message

    feedback_text = ""
    if isinstance(event, types.Message) and event.text:
        status_msg = await message.answer("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")

        current_time_iso = datetime.now(pytz.utc).isoformat()
        llm_result = await llm.extract_reminder_details(event.text, current_time_iso)

        if "error" in llm_result:
            feedback_text = f"‚úÖ {hbold('–û—Ç–ª–∏—á–Ω–æ!')}\n\n"
        else:
            summary = llm_result.get("summary_text", "–í–∞—à–∞ –∑–∞–º–µ—Ç–∫–∞")
            corrected = llm_result.get("corrected_text", event.text)
            time_components = llm_result.get("time_components")

            reminder_part = ""
            if time_components and time_components.get("original_mention"):
                reminder_part = f"\n{hbold('ü§ñ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:')} –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {hitalic(time_components['original_mention'])}!"

            feedback_text = (
                f"‚úÖ {hbold('–ì–æ—Ç–æ–≤–æ! –í–æ—Ç –∫–∞–∫ –±—ã —è —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤–∞—à—É –∑–∞–º–µ—Ç–∫—É:')}\n\n"
                f"<b>{summary}</b>\n"
                f"<i>{corrected}</i>{reminder_part}\n\n"
            )
        await status_msg.delete()
    else:
        feedback_text = f"‚úÖ {hbold('–û—Ç–ª–∏—á–Ω–æ!')}\n\n"

    await state.set_state(OnboardingStates.step_3_timezone)
    text = (
        f"{feedback_text}"
        f"2Ô∏è‚É£ {hbold('–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å')} (–®–∞–≥ 2/5)\n\n"
        f"–ß—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ –≤–æ–≤—Ä–µ–º—è, "
        f"–º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –≤–∞—à {hbold('—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å')}. –≠—Ç–æ —Å–∞–º–∞—è –≤–∞–∂–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞!\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:"
    )

    if isinstance(event, types.CallbackQuery):
        await message.edit_text(text, reply_markup=get_timezone_keyboard())
        await event.answer()
    else:
        await message.answer(text, reply_markup=get_timezone_keyboard())


@router.callback_query(OnboardingStates.step_3_timezone, OnboardingAction.filter(F.action == "set_tz"))
async def onboarding_step_4_handler(callback: types.CallbackQuery, callback_data: OnboardingAction, state: FSMContext):
    """–®–∞–≥ 4: –°–ø–∏—Å–∫–∏ –ø–æ–∫—É–ø–æ–∫ –∏ –æ–±—â–∏–µ –∑–∞–º–µ—Ç–∫–∏."""
    await user_repo.set_user_timezone(callback.from_user.id, callback_data.tz_name)
    await state.set_state(OnboardingStates.step_4_advanced_notes)

    text = (
        f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å {hbold(callback_data.tz_name)} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n"
        f"3Ô∏è‚É£ {hbold('–°–ø–∏—Å–∫–∏ –ø–æ–∫—É–ø–æ–∫')} (–®–∞–≥ 3/5)\n\n"
        f"üõí –Ø —É–º–µ—é —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–¥–æ–±–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø–æ–∫—É–ø–æ–∫. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞—é—â–µ–µ—Å—è —Å–æ —Å–ª–æ–≤–∞ {hbold('¬´–∫—É–ø–∏—Ç—å¬ª')}.\n"
        f"{hitalic('–ü—Ä–∏–º–µ—Ä: ¬´–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ, —Ö–ª–µ–± –∏ 2 –±–∞–Ω–∞–Ω–∞¬ª')}\n\n"
        f"ü§ù –õ—é–±–æ–π –∑–∞–º–µ—Ç–∫–æ–π –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º –º–æ–∂–Ω–æ {hbold('–ø–æ–¥–µ–ª–∏—Ç—å—Å—è')} —Å –¥—Ä—É–≥–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º. –î–ª—è —ç—Ç–æ–≥–æ –ø–æ–¥ –∑–∞–º–µ—Ç–∫–æ–π –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞."
    )
    await callback.message.edit_text(text, reply_markup=get_next_step_keyboard())
    await callback.answer("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")


@router.callback_query(OnboardingStates.step_4_advanced_notes, OnboardingAction.filter(F.action == "next_step"))
async def onboarding_step_5_handler(callback: types.CallbackQuery, state: FSMContext):
    """–®–∞–≥ 5: –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏."""
    await state.set_state(OnboardingStates.step_5_birthdays)
    text = (
        f"4Ô∏è‚É£ {hbold('–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏ –∏ –¥–∞—Ç—ã')} (–®–∞–≥ 4/5)\n\n"
        f"üîÅ {hbold('–ó–∞–¥–∞—á–∏')} \n"
        f"–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–≤, –∫–∞–∫ —á–∞—Å—Ç–æ –∏—Ö –ø–æ–≤—Ç–æ—Ä—è—Ç—å.\n"
        f"{hitalic('–ü—Ä–∏–º–µ—Ä: ¬´–ü–∏—Ç—å –≤–∏—Ç–∞–º–∏–Ω—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9 —É—Ç—Ä–∞¬ª')}\n\n"
        f"üéÇ {hbold('–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è')}\n"
        f"–Ø –º–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –≥–æ–¥. –î–æ–±–∞–≤–∏—Ç—å –∏—Ö –º–æ–∂–Ω–æ –≤ –º–µ–Ω—é `üë§ –ü—Ä–æ—Ñ–∏–ª—å`."
    )
    await callback.message.edit_text(text, reply_markup=get_next_step_keyboard("–û—Ç–ª–∏—á–Ω–æ, –ø–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏!"))
    await callback.answer()


@router.callback_query(OnboardingStates.step_5_birthdays, OnboardingAction.filter(F.action == "next_step"))
async def onboarding_step_6_handler(callback: types.CallbackQuery, state: FSMContext):
    """–®–∞–≥ 6: VIP-—Ñ—É–Ω–∫—Ü–∏–∏."""
    await state.set_state(OnboardingStates.step_6_vip)
    text = (
        f"5Ô∏è‚É£ {hbold('–î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (VIP)')} (–®–∞–≥ 5/5)\n\n"
        f"–í VIP-—Ä–µ–∂–∏–º–µ –≤–∞–º —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã:\n\n"
        f"‚òÄÔ∏è {hbold('–£—Ç—Ä–µ–Ω–Ω–∏–µ —Å–≤–æ–¥–∫–∏')}\n"
        f"–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ —è –º–æ–≥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å: –∑–∞–¥–∞—á–∏, –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –ø–æ–≥–æ–¥–∞.\n\n"
        f"üîî {hbold('–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')}\n"
        f"–Ø –Ω–∞–ø–æ–º–Ω—é –æ –≤–∞–∂–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏ –Ω–µ —Ç–æ–ª—å–∫–æ –≤ —Å—Ä–æ–∫, –Ω–æ –∏ –∑–∞—Ä–∞–Ω–µ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞ —á–∞—Å).\n\n"
        f"–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å {hbold('–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π VIP-–¥–æ—Å—Ç—É–ø')} –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?"
    )
    await callback.message.edit_text(text, reply_markup=get_vip_choice_keyboard())
    await callback.answer()


@router.callback_query(OnboardingStates.step_6_vip, OnboardingAction.filter(F.action == "get_vip"))
async def onboarding_get_vip_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–¥–∞—á—É VIP –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Ñ–∏–Ω–∞–ª—É."""
    await user_repo.set_user_vip_status(callback.from_user.id, True)
    await state.set_state(OnboardingStates.step_7_final)
    text = (
        f"üéâ {hbold('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –ø—Ä–∏—Å–≤–æ–µ–Ω VIP-—Å—Ç–∞—Ç—É—Å!')}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏—Ö –≤ –º–µ–Ω—é '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'."
    )
    await callback.message.edit_text(text, reply_markup=get_final_keyboard())
    await callback.answer("VIP-—Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", show_alert=True)


@router.callback_query(OnboardingStates.step_6_vip, OnboardingAction.filter(F.action == "next_step"))
async def onboarding_final_step_handler(callback: types.CallbackQuery, state: FSMContext):
    """–®–∞–≥ 7: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–µ–∑ VIP."""
    await state.set_state(OnboardingStates.step_7_final)
    text = "–•–æ—Ä–æ—à–æ! –í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å VIP –ø–æ–∑–∂–µ."
    await callback.message.edit_text(text, reply_markup=get_final_keyboard())
    await callback.answer()


@router.callback_query(OnboardingStates.step_7_final, OnboardingAction.filter(F.action == "finish"))
async def finish_onboarding_handler(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ."""
    logger.info(f"User {callback.from_user.id} finished onboarding.")
    await _mark_onboarding_complete(callback.from_user.id, state, bot, callback.message)
    await callback.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")