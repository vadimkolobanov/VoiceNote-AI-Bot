# main.py
import logging
import os
import json
import asyncio  # –î–ª—è asyncio.run
from datetime import datetime

from aiogram import Bot, Router, types, F, Dispatcher
from aiogram.filters import Command
from aiogram.types import CallbackQuery
from aiogram.utils.markdown import hcode, hbold, hitalic
from aiogram.fsm.storage.memory import MemoryStorage  # –î–ª—è FSM
from aiogram.fsm.context import FSMContext  # –î–ª—è FSM
from aiogram.fsm.state import State, StatesGroup  # –î–ª—è FSM

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from inline_keyboards import get_action_keyboard, get_confirm_save_keyboard, NoteCallbackFactory, \
    get_note_actions_keyboard
from utills import hf_speech_to_text
from llm_processor import enhance_text_with_llm
import database_setup as db  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ .env)
from dotenv import load_dotenv

load_dotenv()
#TODO –£–±—Ä–∞—Ç—å max_notes_mvp –∫–æ–≥–¥–∞ –±—É–¥—É —Å–Ω–∏–º–∞—Ç—å –ª–∏–º–∏—Ç
MAX_NOTES_MVP = 5
# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ---
TG_BOT_TOKEN = os.environ.get("TG_BOT_TOKEN")
DEEPSEEK_API_KEY_EXISTS = bool(os.environ.get("DEEPSEEK_API_KEY"))

if not TG_BOT_TOKEN:
    logger.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TG_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    exit("–û—à–∏–±–∫–∞: TG_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω.")

if not DEEPSEEK_API_KEY_EXISTS:
    logger.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DEEPSEEK_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª LLM –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

bot = Bot(token=TG_BOT_TOKEN)
router = Router()
# –ò—Å–ø–æ–ª—å–∑—É–µ–º MemoryStorage –¥–ª—è FSM. –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –ª—É—á—à–µ RedisStorage –∏–ª–∏ –¥—Ä—É–≥–æ–µ.
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# --- –°–û–°–¢–û–Ø–ù–ò–Ø FSM ---
class NoteCreationStates(StatesGroup):
    awaiting_confirmation = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

async def get_or_create_user(tg_user: types.User):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î."""
    user = await db.get_user_profile(tg_user.id)
    if not user:
        user = await db.add_or_update_user(
            telegram_id=tg_user.id,
            username=tg_user.username,
            first_name=tg_user.first_name,
            last_name=tg_user.last_name,
            language_code=tg_user.language_code
        )
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {tg_user.id}")
    else:  # –û–±–Ω–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å (username, –∏–º—è –∏ —Ç.–¥.)
        user = await db.add_or_update_user(
            telegram_id=tg_user.id,
            username=tg_user.username,
            first_name=tg_user.first_name,
            last_name=tg_user.last_name,
            language_code=tg_user.language_code
        )
    return user


@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):  # –î–æ–±–∞–≤–ª—è–µ–º state –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
    await get_or_create_user(message.from_user)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await message.answer(
        "üé§ –ü—Ä–∏–≤–µ—Ç! –Ø VoiceNote AI, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–º–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–º–µ—Ç–æ–∫.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è:\n"
        "1. –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å.\n"
        "2. –£–ª—É—á—à—É —Ç–µ–∫—Å—Ç –∏ –∏–∑–≤–ª–µ–∫—É –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ —Å –ø–æ–º–æ—â—å—é AI.\n"
        "3. –ü—Ä–µ–¥–ª–æ–∂—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–π –≥–æ–ª–æ—Å–æ–≤–æ–µ!",
        reply_markup=get_action_keyboard()
    )


@router.message(F.voice)
async def handle_voice(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    await get_or_create_user(message.from_user)  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –ë–î

    voice = message.voice
    file_id = voice.file_id

    status_message = await message.reply("‚úîÔ∏è –ó–∞–ø–∏—Å—å –ø–æ–ª—É—á–µ–Ω–∞. –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏...")

    try:
        file_info = await bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}"
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ –∏–∑ Telegram")
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –æ—Ç Telegram: {e}")
        return
    voice_message_datetime = message.date
    raw_text = await hf_speech_to_text(file_url)
    if not raw_text:
        await status_message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —á–µ—Ç—á–µ."
        )
        return

    await status_message.edit_text(
        f"üó£Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ (STT):\n{hcode(raw_text)}\n\n"
        "‚ú® –£–ª—É—á—à–∞—é —Ç–µ–∫—Å—Ç –∏ –∏–∑–≤–ª–µ–∫–∞—é –¥–µ—Ç–∞–ª–∏ —Å –ø–æ–º–æ—â—å—é LLM..."
    )

    llm_analysis_result = None
    corrected_text_for_response = raw_text  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ LLM –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç

    if DEEPSEEK_API_KEY_EXISTS:
        llm_result_dict = await enhance_text_with_llm(raw_text)
        if "error" in llm_result_dict:
            logger.error(f"LLM processing error: {llm_result_dict['error']}")
            llm_info_for_user = f"‚ö†Ô∏è {hbold('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ LLM:')} {hcode(llm_result_dict['error'])}"
            # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ llm_analysis_result –æ—Å—Ç–∞–µ—Ç—Å—è None
        else:
            llm_analysis_result = llm_result_dict  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ë–î
            corrected_text_for_response = llm_result_dict.get("corrected_text", raw_text)
            llm_info_for_user = f"{hbold('‚ú® –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (LLM):')}\n{hcode(corrected_text_for_response)}"

            details_parts = []
            if llm_result_dict.get("task_description"):
                details_parts.append(f"üìù {hbold('–ó–∞–¥–∞—á–∞:')} {hitalic(llm_result_dict['task_description'])}")
            # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)
            dates_times_str_list = []
            for dt_entry in llm_result_dict.get("dates_times", []):
                mention = dt_entry.get('original_mention', 'N/A')
                start_dt = dt_entry.get('absolute_datetime_start', 'N/A')
                dates_times_str_list.append(f"- {hitalic(mention)} -> {hcode(start_dt)}")
            if dates_times_str_list:
                details_parts.append(f"üóìÔ∏è {hbold('–î–∞—Ç—ã/–í—Ä–µ–º—è:')}\n" + "\n".join(dates_times_str_list))

            if llm_result_dict.get("people_mentioned"):
                details_parts.append(f"üë• {hbold('–õ—é–¥–∏:')} {hitalic(', '.join(llm_result_dict['people_mentioned']))}")
            if llm_result_dict.get("locations_mentioned"):
                details_parts.append(
                    f"üìç {hbold('–ú–µ—Å—Ç–∞:')} {hitalic(', '.join(llm_result_dict['locations_mentioned']))}")
            if llm_result_dict.get("implied_intent"):
                details_parts.append(f"üí° {hbold('–ù–∞–º–µ—Ä–µ–Ω–∏—è:')} {hcode(', '.join(llm_result_dict['implied_intent']))}")

            if details_parts:
                llm_info_for_user += f"\n\n{hbold('üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:')}\n" + "\n\n".join(details_parts)
    else:
        llm_info_for_user = f"{hitalic('LLM –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞: DEEPSEEK_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.')}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_state(NoteCreationStates.awaiting_confirmation)
    await state.update_data(
        original_stt_text=raw_text,
        corrected_text=corrected_text_for_response,  # –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        llm_analysis_json=llm_analysis_result,  # –ü–æ–ª–Ω—ã–π JSON –æ—Ç LLM –∏–ª–∏ None
        original_audio_telegram_file_id=file_id,
        voice_message_date=voice_message_datetime
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, due_date –∏–∑ llm_analysis_result
    )

    response_message_text = (
        f"{hbold('üéôÔ∏è –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç (STT):')}\n{hcode(raw_text)}\n\n"
        f"{llm_info_for_user}\n\n"
        f"{hbold('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É–¥–∏–æ:')}\n"
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {voice.duration} —Å–µ–∫, –†–∞–∑–º–µ—Ä: {voice.file_size // 1024} –ö–ë\n\n"
        "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç—É –∑–∞–º–µ—Ç–∫—É?"
    )

    try:
        await status_message.edit_text(
            response_message_text,
            reply_markup=get_confirm_save_keyboard(),  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å/–û—Ç–º–µ–Ω–∞"
            parse_mode="HTML"
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ: {e}")
        await message.answer(
            response_message_text,
            reply_markup=get_confirm_save_keyboard(),
            parse_mode="HTML"
        )


@router.callback_query(NoteCreationStates.awaiting_confirmation, F.data == "confirm_save_note")
async def confirm_save_note_handler(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏."""


    user_data = await state.get_data()
    voice_message_date = user_data.get("voice_message_date")
    telegram_id = callback_query.from_user.id

    original_stt_text = user_data.get("original_stt_text")
    corrected_text = user_data.get("corrected_text")
    llm_analysis_json = user_data.get("llm_analysis_json")  # –≠—Ç–æ —É–∂–µ dict –∏–ª–∏ None
    audio_file_id = user_data.get("original_audio_telegram_file_id")

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ due_date –∏–∑ llm_analysis_json, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    due_date_obj = None
    if llm_analysis_json and "dates_times" in llm_analysis_json and llm_analysis_json["dates_times"]:
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–∞—Ç—É/–≤—Ä–µ–º—è –∫–∞–∫ due_date, –º–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞
        first_date_time_entry = llm_analysis_json["dates_times"][0]
        if "absolute_datetime_start" in first_date_time_entry:
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É ISO 8601 –≤ datetime –æ–±—ä–µ–∫—Ç
                due_date_str = first_date_time_entry["absolute_datetime_start"]
                # –£–±–∏—Ä–∞–µ–º 'Z' –µ—Å–ª–∏ –µ—Å—Ç—å, asyncpg –º–æ–∂–µ—Ç –Ω–µ –ø–æ–Ω—è—Ç—å –µ–≥–æ –¥–ª—è timestamptz –±–µ–∑ —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è
                if due_date_str.endswith('Z'):
                    due_date_str = due_date_str[:-1] + "+00:00"
                due_date_obj = datetime.fromisoformat(due_date_str)
            except ValueError as e:
                logger.warning(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å due_date '{first_date_time_entry['absolute_datetime_start']}': {e}")

    current_notes = await db.get_notes_by_user(telegram_id, limit=MAX_NOTES_MVP + 1, archived=False)
    if len(current_notes) >= MAX_NOTES_MVP:
        await callback_query.message.edit_text(
            f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {MAX_NOTES_MVP} –∑–∞–º–µ—Ç–æ–∫.\n"
            "–ü—Ä–æ–µ–∫—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ\n"
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö."
            ,
            reply_markup=None
        )
        await callback_query.answer("–õ–∏–º–∏—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç", show_alert=True)
        await state.clear()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback_query.message.answer(
            "–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?",
            reply_markup=get_action_keyboard()
        )
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    note_id = await db.create_note(
        telegram_id=telegram_id,
        original_stt_text=original_stt_text,
        corrected_text=corrected_text,
        llm_analysis_json=llm_analysis_json,  # –ü–µ—Ä–µ–¥–∞–µ–º dict, db.create_note –µ–≥–æ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç
        original_audio_telegram_file_id=audio_file_id,
        due_date=due_date_obj,  # –ü–µ—Ä–µ–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç –∏–ª–∏ None
        note_taken_at = voice_message_date
        # category, tags, location_info - –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ –∏–∑ llm_analysis_json
    )

    if note_id:
        await callback_query.message.edit_text(
            f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ #{note_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n{hcode(corrected_text)}",
            parse_mode="HTML",
            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        )
    else:
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=None
        )
    await callback_query.answer()
    await state.clear()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await callback_query.message.answer(
        "–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=get_action_keyboard()
    )

    await callback_query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM


@router.callback_query(NoteCreationStates.awaiting_confirmation, F.data == "cancel_save_note")
async def cancel_save_note_handler(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏."""
    await callback_query.message.edit_text(
        "üö´ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=None
    )
    await callback_query.answer()
    await state.clear()


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê –ò –£–î–ê–õ–ï–ù–ò–Ø –ó–ê–ú–ï–¢–û–ö ---

@router.callback_query(F.data == "my_notes")
async def my_notes_handler(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏'."""
    await state.clear()  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    telegram_id = callback_query.from_user.id

    # –î–ª—è MVP –ø–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ N –∑–∞–º–µ—Ç–æ–∫ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ "–í–ø–µ—Ä–µ–¥/–ù–∞–∑–∞–¥" –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å offset –≤ callback_data
    notes = await db.get_notes_by_user(telegram_id, limit=5, offset=0, archived=False)

    if not notes:
        await callback_query.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫.")
        await callback_query.answer()
        return

    response_text = f"{hbold('üìù –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:')}\n\n"

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –æ—Ç–≤–µ—Ç –Ω–∞ callback —Å Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    # –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞.
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã MVP, –µ—Å–ª–∏ —ç—Ç–æ callback, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, —Ç–æ –µ–≥–æ –º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
    # –ù–æ —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ callback –æ—Ç –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏", –ª—É—á—à–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    try:
        # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–ª–æ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –±–µ–∑ –Ω–µ–µ
        # –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ, –µ—Å–ª–∏ edit_text –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞).
        # –î–ª—è MVP –ø—Ä–æ—â–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
        # await callback_query.message.delete() # –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        pass  # –ü–æ–∫–∞ –Ω–µ –±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å, —á—Ç–æ–±—ã –Ω–µ —É—Å–ª–æ–∂–Ω—è—Ç—å.
    except Exception as e:
        logger.warning(f"Could not delete previous message for my_notes: {e}")

    await callback_query.answer("–ó–∞–≥—Ä—É–∂–∞—é –∑–∞–º–µ—Ç–∫–∏...")  # –û—Ç–≤–µ—Ç –Ω–∞ callback, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ "–≥—Ä—É–∑–∏—Ç—å—Å—è"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–º–µ—Ç–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–æ–π "–£–¥–∞–ª–∏—Ç—å"
    # –≠—Ç–æ –ø—Ä–æ—â–µ –¥–ª—è MVP, —á–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω–æ –±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–æ–∂–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π
    await callback_query.message.answer(response_text, parse_mode="HTML")  # –ó–∞–≥–æ–ª–æ–≤–æ–∫

    for note in notes:
        note_text_preview = note['corrected_text']
        if len(note_text_preview) > 150:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É –ø—Ä–µ–≤—å—é
            note_text_preview = note_text_preview[:150] + "..."

        note_date = note['created_at'].strftime("%d.%m.%Y %H:%M")

        message_per_note = (
            f"üìå {hbold(f'–ó–∞–º–µ—Ç–∫–∞ #{note['note_id']}')} –æ—Ç {note_date}\n"
            f"{hcode(note_text_preview)}\n"
        )
        if note.get('due_date'):
            message_per_note += f"üí° {hitalic('–°—Ä–æ–∫ –¥–æ:')} {hcode(note['due_date'].strftime('%d.%m.%Y %H:%M'))}\n"

        await callback_query.message.answer(
            message_per_note,
            parse_mode="HTML",
            reply_markup=get_note_actions_keyboard(note['note_id'])
        )
    # TODO –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    # –ï—Å–ª–∏ –±—ã –º—ã —Ö–æ—Ç–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:
    # for i, note in enumerate(notes, 1):
    #     note_text_preview = note['corrected_text']
    #     if len(note_text_preview) > 100: # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É –ø—Ä–µ–≤—å—é
    #         note_text_preview = note_text_preview[:100] + "..."

    #     note_date = note['created_at'].strftime("%d.%m.%Y %H:%M")
    #     response_text += (
    #         f"{hbold(f'{i}. –ó–∞–º–µ—Ç–∫–∞ #{note['note_id']}')} ({note_date})\n"
    #         f"{hcode(note_text_preview)}\n"
    #         # –°—é–¥–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–º–µ—Ç–∫–∏, —á—Ç–æ —É—Å–ª–æ–∂–Ω—è–µ—Ç, –µ—Å–ª–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    #         # –ü–æ—ç—Ç–æ–º—É –¥–ª—è MVP –∫–∞–∂–¥–∞—è –∑–∞–º–µ—Ç–∫–∞ - –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    #         f"--------------------\n"
    #     )
    # await callback_query.message.edit_text(response_text, parse_mode="HTML")


@router.callback_query(NoteCallbackFactory.filter(F.action == "delete"))
async def delete_note_handler(callback_query: CallbackQuery, callback_data: NoteCallbackFactory, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏."""
    await state.clear()  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    note_id_to_delete = callback_data.note_id
    telegram_id = callback_query.from_user.id

    if note_id_to_delete is None:
        await callback_query.answer("–û—à–∏–±–∫–∞: ID –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–º–µ—Ç–∫–∞ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ö–æ—Ç—è delete_note —ç—Ç–æ —Ç–æ–∂–µ –¥–µ–ª–∞–µ—Ç)
    note = await db.get_note_by_id(note_id_to_delete, telegram_id)
    if not note:
        await callback_query.answer("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–µ —É–¥–∞–ª–µ–Ω–∏–µ.", show_alert=True)
        # –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
        try:
            await callback_query.message.delete()
        except Exception:
            pass  # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ
        return

    deleted = await db.delete_note(note_id_to_delete, telegram_id)

    if deleted:
        await callback_query.answer("üóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
        try:
            await callback_query.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: {e}")
            await callback_query.message.edit_text(f"üóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ #{note_id_to_delete} —É–¥–∞–ª–µ–Ω–∞.", reply_markup=None)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await callback_query.message.answer(
            "–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞. –ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?",  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
            reply_markup=get_action_keyboard()
        )
    else:
        await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data == "user_profile")
async def user_profile_handler(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ—Ñ–∏–ª—å'."""
    await state.clear()  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    telegram_id = callback_query.from_user.id

    user_profile = await db.get_user_profile(telegram_id)
    if not user_profile:
        # –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ get_or_create_user —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        await callback_query.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start", show_alert=True)
        return
    # TODO –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # get_notes_by_user –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫, –Ω–∞–º –Ω—É–∂–Ω–æ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.
    # –ú—ã –º–æ–≥–ª–∏ –±—ã —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é db —Ñ—É–Ω–∫—Ü–∏—é count_user_notes –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏,
    # –Ω–æ –¥–ª—è MVP –ø–æ–¥–æ–π–¥–µ—Ç –∏ —Ç–∞–∫.
    user_notes = await db.get_notes_by_user(telegram_id, limit=MAX_NOTES_MVP + 1,
                                            archived=False)  # MAX_NOTES_MVP –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ db –∏–ª–∏ main
    notes_count = len(user_notes)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
    profile_info_parts = [
        f"{hbold('üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:')}",
        f"Telegram ID: {hcode(user_profile['telegram_id'])}"
    ]
    if user_profile.get('username'):
        profile_info_parts.append(f"Username: @{hitalic(user_profile['username'])}")
    if user_profile.get('first_name'):
        profile_info_parts.append(f"–ò–º—è: {hitalic(user_profile['first_name'])}")

    profile_info_parts.append(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_profile['created_at'].strftime('%d.%m.%Y %H:%M')}")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
    subscription_status_text = "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è (MVP)"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if user_profile.get('subscription_status') == 'active_paid':  # –ü—Ä–∏–º–µ—Ä –¥–ª—è –±—É–¥—É—â–µ–≥–æ
        subscription_status_text = f"–ê–∫—Ç–∏–≤–Ω–∞—è –ø–ª–∞—Ç–Ω–∞—è –¥–æ {user_profile['subscription_expires_at'].strftime('%d.%m.%Y') if user_profile.get('subscription_expires_at') else 'N/A'}"
    elif user_profile.get('subscription_status') == 'free':
        subscription_status_text = "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è"

    profile_info_parts.append(f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {hitalic(subscription_status_text)}")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–º–µ—Ç–∫–∞—Ö
    profile_info_parts.append(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫: {hbold(notes_count)} –∏–∑ {MAX_NOTES_MVP} (MVP –ª–∏–º–∏—Ç)")
    # TODO –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ—Å—Ç—å (–¥–ª—è MVP –º–æ–∂–Ω–æ –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ)
    # custom_data = user_profile.get('custom_profile_data')
    # if custom_data:
    #     profile_info_parts.append(f"\n{hbold('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:')}")
    #     for key, value in custom_data.items():
    #         profile_info_parts.append(f"- {key.capitalize()}: {hitalic(str(value))}")

    response_text = "\n".join(profile_info_parts)

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback_query.answer()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    # –ú–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç —ç—Ç–æ–≥–æ –±–æ—Ç–∞
    # –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ. –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã MVP - –Ω–æ–≤–æ–µ.
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        # await callback_query.message.delete()
        pass
    except Exception as e:
        logger.warning(f"Could not delete previous message for user_profile: {e}")

    await callback_query.message.answer(
        response_text,
        parse_mode="HTML",
        reply_markup=get_action_keyboard()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    )
# --- LIFECYCLE HANDLERS ---
async def on_startup(dispatcher: Dispatcher):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await db.setup_database_on_startup()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")


async def on_shutdown(dispatcher: Dispatcher):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞."""
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    await db.shutdown_database_on_shutdown()  # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    dp.include_router(router)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è lifecycle handlers
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    logger.info("–ó–∞–ø—É—Å–∫ polling...")
    # –ó–∞–ø—É—Å–∫ long polling
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}", exc_info=True)