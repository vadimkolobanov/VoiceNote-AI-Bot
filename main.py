# main.py
import logging
import os
import json
import asyncio
from datetime import datetime  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è due_date)

from aiogram import Bot, Router, types, F, Dispatcher
from aiogram.filters import Command
from aiogram.types import CallbackQuery
from aiogram.utils.markdown import hcode, hbold, hitalic
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from dotenv import load_dotenv

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from inline_keyboards import (
    get_action_keyboard,
    get_confirm_save_keyboard,
    NoteCallbackFactory,
    get_note_actions_keyboard
)
from utills import recognize_speech_yandex, download_audio_content  # STT —á–µ—Ä–µ–∑ aiohttp
from llm_processor import enhance_text_with_llm
import database_setup as db  # –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î PostgreSQL

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
MAX_NOTES_MVP = 5  # –õ–∏–º–∏—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è MVP

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê –ò –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ---
TG_BOT_TOKEN = os.environ.get("TG_BOT_TOKEN")
DEEPSEEK_API_KEY_EXISTS = bool(os.environ.get("DEEPSEEK_API_KEY"))
YANDEX_STT_CONFIGURED = bool(
    os.environ.get("YANDEX_SPEECHKIT_API_KEY") and
    os.environ.get("YANDEX_SPEECHKIT_FOLDER_ID")
)

if not TG_BOT_TOKEN:
    logger.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TG_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    exit("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: TG_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω.")
if not DEEPSEEK_API_KEY_EXISTS:
    logger.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DEEPSEEK_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª LLM –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
if not YANDEX_STT_CONFIGURED:
    logger.warning(
        "YANDEX_SPEECHKIT_API_KEY –∏–ª–∏ YANDEX_SPEECHKIT_FOLDER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ø–Ω–¥–µ–∫—Å STT –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

bot = Bot(token=TG_BOT_TOKEN)
router = Router()
storage = MemoryStorage()  # –î–ª—è FSM. –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å RedisStorage –∏–ª–∏ PgStorage.
dp = Dispatcher(storage=storage)


# --- –°–û–°–¢–û–Ø–ù–ò–Ø FSM ---
class NoteCreationStates(StatesGroup):
    awaiting_confirmation = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏


# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
async def get_or_create_user(tg_user: types.User):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î. –ï—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ—Ç.
    –ï—Å–ª–∏ –µ—Å—Ç—å - –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –¥–∞–Ω–Ω—ã–µ (username, first_name –∏ —Ç.–¥.).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î.
    """
    # add_or_update_user —Å–∞–º–∞ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É UPSERT
    user_record = await db.add_or_update_user(
        telegram_id=tg_user.id,
        username=tg_user.username,
        first_name=tg_user.first_name,
        last_name=tg_user.last_name,
        language_code=tg_user.language_code
    )
    if not await db.get_user_profile(
            tg_user.id):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ add_or_update_user –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –∑–∞–ø–∏—Å—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –≤—Å—Ç–∞–≤–∫–µ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ)
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {tg_user.id}")
    return user_record


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---
@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await state.clear()
    await get_or_create_user(message.from_user)
    await message.answer(
        "üé§ –ü—Ä–∏–≤–µ—Ç! –Ø **VoiceNote AI**, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–º–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–º–µ—Ç–æ–∫.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è:\n"
        "1. –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å (Yandex SpeechKit).\n"
        "2. –£–ª—É—á—à—É —Ç–µ–∫—Å—Ç –∏ –∏–∑–≤–ª–µ–∫—É –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ —Å –ø–æ–º–æ—â—å—é AI (DeepSeek).\n"
        "3. –ü—Ä–µ–¥–ª–æ–∂—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–π –≥–æ–ª–æ—Å–æ–≤–æ–µ!",
        reply_markup=get_action_keyboard(),
        parse_mode="MarkdownV2"  # –∏–ª–∏ HTML, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å HTML —Ç–µ–≥–∏
    )


@router.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç! –Ø **VoiceNote AI** ‚Äì —Ç–≤–æ–π —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–º–µ—Ç–æ–∫.

–Ø –∏—Å–ø–æ–ª—å–∑—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞ (Yandex SpeechKit) –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI (DeepSeek) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞.

–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

üé§ **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫:**
   - –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
   - –Ø —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ç–≤–æ—é —Ä–µ—á—å, —É–ª—É—á—à—É —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é AI –∏ –∏–∑–≤–ª–µ–∫—É –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ (–¥–∞—Ç—ã, –∑–∞–¥–∞—á–∏ –∏ —Ç.–¥.).
   - –¢–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É.
   - –í —Ç–µ–∫—É—â–µ–π MVP-–≤–µ—Ä—Å–∏–∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ª–∏–º–∏—Ç: **{MAX_NOTES_MVP} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫** –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

üìù **–ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏:**
   - –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "üìù –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é (–ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ /start).
   - –¢—ã —É–≤–∏–¥–∏—à—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {MAX_NOTES_MVP} –∑–∞–º–µ—Ç–æ–∫.
   - –ö–∞–∂–¥—É—é –∑–∞–º–µ—Ç–∫—É –º–æ–∂–Ω–æ **—É–¥–∞–ª–∏—Ç—å**, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É üóëÔ∏è —Ä—è–¥–æ–º —Å –Ω–µ–π.

üë§ **–ü—Ä–æ—Ñ–∏–ª—å:**
   - –ö–Ω–æ–ø–∫–∞ "üë§ –ü—Ä–æ—Ñ–∏–ª—å" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –ø–æ–∫–∞–∂–µ—Ç —Ç–≤–æ–π Telegram ID, –∏–º—è, –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ (—Å–µ–π—á–∞—Å –≤—Å–µ–≥–¥–∞ "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è") –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫.

ü§ñ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
   - /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
   - /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.

üí° **–°–æ–≤–µ—Ç—ã:**
   - –ì–æ–≤–æ—Ä–∏ —á–µ—Ç–∫–æ –∏ –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–∏—Ö–æ–º –º–µ—Å—Ç–µ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.
   - –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã AI –∏–∑–≤–ª–µ–∫ –¥–∞—Ç—É –∏–ª–∏ –∑–∞–¥–∞—á—É, —Å—Ç–∞—Ä–∞–π—Å—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏—Ö —è–≤–Ω–æ –≤ —Å–≤–æ–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ó–∞–≤—Ç—Ä–∞ –≤ 10 —É—Ç—Ä–∞ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –ò–≤–∞–Ω—É" –∏–ª–∏ "–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã –≤–æ –≤—Ç–æ—Ä–Ω–∏–∫").

---
–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∏–ª–∏ —Ç—ã –Ω–∞—à–µ–ª –æ—à–∏–±–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏ –º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é! (–ö–æ–Ω—Ç–∞–∫—Ç: @useranybody - –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)
"""
    await message.answer(help_text, parse_mode="HTML", disable_web_page_preview=True)


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ---
@router.message(F.voice)
async def handle_voice(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    await get_or_create_user(message.from_user)
    voice = message.voice

    MIN_VOICE_DURATION_SEC = 1
    if voice.duration < MIN_VOICE_DURATION_SEC:
        logger.info(f"User {message.from_user.id} sent too short voice: {voice.duration}s")
        await message.reply(
            f"üé§ –í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ ({voice.duration} —Å–µ–∫.).\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –Ω–µ –º–µ–Ω–µ–µ {MIN_VOICE_DURATION_SEC} —Å–µ–∫."
        )
        return

    file_id = voice.file_id
    voice_message_datetime = message.date  # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–≤ UTC)

    status_msg = await message.reply("‚úîÔ∏è –ó–∞–ø–∏—Å—å –ø–æ–ª—É—á–µ–Ω–∞. –°–∫–∞—á–∏–≤–∞—é –∏ –Ω–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ...")

    try:
        file_info = await bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}"
    except Exception as e:
        logger.exception(f"Error getting file info from Telegram for user {message.from_user.id}")
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –æ—Ç Telegram: {e}")
        return

    audio_bytes = await download_audio_content(file_url)
    if not audio_bytes:
        await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return

    if not YANDEX_STT_CONFIGURED:
        await status_msg.edit_text(
            "‚ùå –°–µ—Ä–≤–∏—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        logger.error("Yandex STT not configured, but voice message received.")
        return

    raw_text_stt = await recognize_speech_yandex(audio_bytes)

    MIN_STT_TEXT_CHARS = 5
    MIN_STT_TEXT_WORDS = 1
    if not raw_text_stt or not raw_text_stt.strip():
        logger.info(f"Yandex STT for user {message.from_user.id} returned empty text.")
        await status_msg.edit_text(
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ —á–µ—Ç—á–µ –∏–ª–∏ –≤ –±–æ–ª–µ–µ —Ç–∏—Ö–æ–º –º–µ—Å—Ç–µ."
        )
        return

    if len(raw_text_stt.strip()) < MIN_STT_TEXT_CHARS or len(raw_text_stt.strip().split()) < MIN_STT_TEXT_WORDS:
        logger.info(f"Yandex STT for user {message.from_user.id} returned too short text: '{raw_text_stt}'")
        await status_msg.edit_text(
            f"‚ùå –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.\n–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {hcode(raw_text_stt)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return

    await status_msg.edit_text(
        f"üó£Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ (Yandex STT):\n{hcode(raw_text_stt)}\n\n"
        "‚ú® –£–ª—É—á—à–∞—é —Ç–µ–∫—Å—Ç –∏ –∏–∑–≤–ª–µ–∫–∞—é –¥–µ—Ç–∞–ª–∏ —Å –ø–æ–º–æ—â—å—é LLM..."
    )

    llm_analysis_result_json = None  # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    corrected_text_for_response = raw_text_stt  # –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ LLM –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
    llm_info_for_user_display = f"{hitalic('LLM –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ (DEEPSEEK_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ LLM –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è).')}"

    if DEEPSEEK_API_KEY_EXISTS:
        llm_result_dict = await enhance_text_with_llm(raw_text_stt)
        if "error" in llm_result_dict:
            logger.error(f"LLM processing error for user {message.from_user.id}: {llm_result_dict['error']}")
            llm_info_for_user_display = f"‚ö†Ô∏è {hbold('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ LLM:')} {hcode(llm_result_dict['error'])}"
        else:
            llm_analysis_result_json = llm_result_dict  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ë–î
            corrected_text_for_response = llm_result_dict.get("corrected_text", raw_text_stt)

            details_parts = [f"{hbold('‚ú® –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (LLM):')}\n{hcode(corrected_text_for_response)}"]
            if llm_result_dict.get("task_description"):
                details_parts.append(f"üìù {hbold('–ó–∞–¥–∞—á–∞:')} {hitalic(llm_result_dict['task_description'])}")

            dates_times_str_list = []
            for dt_entry in llm_result_dict.get("dates_times", []):
                mention = dt_entry.get('original_mention', 'N/A')
                start_dt = dt_entry.get('absolute_datetime_start', 'N/A')
                dates_times_str_list.append(f"- {hitalic(mention)} -> {hcode(start_dt)}")
            if dates_times_str_list:
                details_parts.append(f"üóìÔ∏è {hbold('–î–∞—Ç—ã/–í—Ä–µ–º—è:')}\n" + "\n".join(dates_times_str_list))

            if llm_result_dict.get("people_mentioned"):
                details_parts.append(f"üë• {hbold('–õ—é–¥–∏:')} {hitalic(', '.join(llm_result_dict['people_mentioned']))}")
            if llm_result_dict.get("locations_mentioned"):
                details_parts.append(
                    f"üìç {hbold('–ú–µ—Å—Ç–∞:')} {hitalic(', '.join(llm_result_dict['locations_mentioned']))}")
            if llm_result_dict.get("implied_intent"):
                details_parts.append(f"üí° {hbold('–ù–∞–º–µ—Ä–µ–Ω–∏—è:')} {hcode(', '.join(llm_result_dict['implied_intent']))}")

            if len(details_parts) > 1:  # –ï—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –∫—Ä–æ–º–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                llm_info_for_user_display = f"\n\n{hbold('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã AI –∞–Ω–∞–ª–∏–∑–∞:')}\n" + "\n\n".join(details_parts)
            else:  # –¢–æ–ª—å–∫–æ —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                llm_info_for_user_display = details_parts[0]

    await state.set_state(NoteCreationStates.awaiting_confirmation)
    await state.update_data(
        original_stt_text=raw_text_stt,
        corrected_text_for_save=corrected_text_for_response,  # –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–π–¥–µ—Ç –≤ –ë–î
        llm_analysis_json=llm_analysis_result_json,
        original_audio_telegram_file_id=file_id,
        voice_message_date=voice_message_datetime
    )

    response_to_user = (
        f"{hbold('üéôÔ∏è –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç (Yandex STT):')}\n{hcode(raw_text_stt)}\n\n"
        f"{llm_info_for_user_display}\n\n"
        f"{hbold('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É–¥–∏–æ:')}\n"
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {voice.duration} —Å–µ–∫, –†–∞–∑–º–µ—Ä: {voice.file_size // 1024} –ö–ë\n\n"
        "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç—É –∑–∞–º–µ—Ç–∫—É?"
    )

    try:
        await status_msg.edit_text(
            response_to_user,
            reply_markup=get_confirm_save_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:  # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.warning(f"Could not edit status message, sending new one: {e}")
        await message.answer(
            response_to_user,
            reply_markup=get_confirm_save_keyboard(),
            parse_mode="HTML"
        )


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK'–û–í –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ó–ê–ú–ï–¢–ö–ò ---
@router.callback_query(NoteCreationStates.awaiting_confirmation, F.data == "confirm_save_note")
async def confirm_save_note_handler(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    telegram_id = callback_query.from_user.id

    current_notes_list = await db.get_notes_by_user(telegram_id, limit=MAX_NOTES_MVP + 1, archived=False)
    if len(current_notes_list) >= MAX_NOTES_MVP:
        await callback_query.message.edit_text(
            f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {MAX_NOTES_MVP} –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è MVP.\n"
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö.",
            reply_markup=None
        )
        await callback_query.answer("–õ–∏–º–∏—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç", show_alert=True)
        await state.clear()
        await callback_query.message.answer("–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=get_action_keyboard())
        return

    original_stt_text = user_data.get("original_stt_text")
    corrected_text_to_save = user_data.get("corrected_text_for_save")
    llm_analysis_data = user_data.get("llm_analysis_json")  # dict –∏–ª–∏ None
    audio_file_id = user_data.get("original_audio_telegram_file_id")
    note_creation_time = user_data.get("voice_message_date")  # –≠—Ç–æ datetime –æ–±—ä–µ–∫—Ç

    due_date_obj = None
    if llm_analysis_data and "dates_times" in llm_analysis_data and llm_analysis_data["dates_times"]:
        first_date_entry = llm_analysis_data["dates_times"][0]
        if "absolute_datetime_start" in first_date_entry:
            try:
                due_date_str = first_date_entry["absolute_datetime_start"]
                if due_date_str.endswith('Z'):  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Z –≤ +00:00 –¥–ª—è fromisoformat
                    due_date_str = due_date_str[:-1] + "+00:00"
                due_date_obj = datetime.fromisoformat(due_date_str)
            except (ValueError, TypeError) as e:
                logger.warning(f"Could not parse due_date '{first_date_entry['absolute_datetime_start']}': {e}")

    note_id = await db.create_note(
        telegram_id=telegram_id,
        original_stt_text=original_stt_text,
        corrected_text=corrected_text_to_save,
        llm_analysis_json=llm_analysis_data,
        original_audio_telegram_file_id=audio_file_id,
        note_taken_at=note_creation_time,
        due_date=due_date_obj
    )

    if note_id:
        await callback_query.message.edit_text(
            f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ #{note_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n{hcode(corrected_text_to_save)}",
            parse_mode="HTML",
            reply_markup=None
        )
    else:
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=None
        )

    await callback_query.answer()
    await state.clear()
    await callback_query.message.answer("–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=get_action_keyboard())


@router.callback_query(NoteCreationStates.awaiting_confirmation, F.data == "cancel_save_note")
async def cancel_save_note_handler(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("üö´ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
    await callback_query.answer()
    await state.clear()
    await callback_query.message.answer("–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=get_action_keyboard())


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê –ò –£–î–ê–õ–ï–ù–ò–Ø –ó–ê–ú–ï–¢–û–ö ---
@router.callback_query(F.data == "my_notes")
async def my_notes_handler(callback_query: CallbackQuery, state: FSMContext):
    await state.clear()
    telegram_id = callback_query.from_user.id
    notes = await db.get_notes_by_user(telegram_id, limit=MAX_NOTES_MVP, offset=0, archived=False)

    await callback_query.answer("–ó–∞–≥—Ä—É–∂–∞—é –∑–∞–º–µ—Ç–∫–∏...")

    if not notes:
        await callback_query.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫.", reply_markup=get_action_keyboard())
        return

    await callback_query.message.answer(f"{hbold('üìù –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:')}", parse_mode="HTML")

    for note_record in notes:
        text_preview = note_record['corrected_text']
        if len(text_preview) > 150:
            text_preview = text_preview[:150] + "..."

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º note_taken_at –∏–ª–∏ created_at –¥–ª—è –¥–∞—Ç—ã –∑–∞–º–µ—Ç–∫–∏
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ UTC, —Ç.–∫. –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–∞–π–º–∑–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        date_to_show_utc = note_record.get('note_taken_at') or note_record['created_at']
        date_str = date_to_show_utc.strftime("%d.%m.%Y %H:%M UTC")

        note_message = f"üìå {hbold(f'–ó–∞–º–µ—Ç–∫–∞ #{note_record['note_id']}')} –æ—Ç {date_str}\n{hcode(text_preview)}\n"

        if note_record.get('due_date'):
            due_date_utc = note_record['due_date']
            due_date_str_display = due_date_utc.strftime("%d.%m.%Y %H:%M UTC")
            note_message += f"üí° {hitalic('–°—Ä–æ–∫ –¥–æ:')} {hcode(due_date_str_display)}\n"

        await callback_query.message.answer(
            note_message,
            parse_mode="HTML",
            reply_markup=get_note_actions_keyboard(note_record['note_id'])
        )
    # –ü–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫, –º–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    # await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_action_keyboard())


@router.callback_query(NoteCallbackFactory.filter(F.action == "delete"))
async def delete_note_handler(callback_query: CallbackQuery, callback_data: NoteCallbackFactory, state: FSMContext):
    await state.clear()
    note_id = callback_data.note_id
    telegram_id = callback_query.from_user.id

    if note_id is None:
        await callback_query.answer("–û—à–∏–±–∫–∞: ID –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    note_exists = await db.get_note_by_id(note_id, telegram_id)
    if not note_exists:
        await callback_query.answer("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
        try:
            await callback_query.message.delete()
        except:
            pass
        return

    deleted_successfully = await db.delete_note(note_id, telegram_id)
    if deleted_successfully:
        await callback_query.answer("üóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
        try:
            await callback_query.message.delete()
        except Exception:
            await callback_query.message.edit_text(f"üóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ #{note_id} —É–¥–∞–ª–µ–Ω–∞.", reply_markup=None)
        await callback_query.message.answer("–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞. –ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=get_action_keyboard())
    else:
        await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É.", show_alert=True)


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–û–§–ò–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
@router.callback_query(F.data == "user_profile")
async def user_profile_handler(callback_query: CallbackQuery, state: FSMContext):
    await state.clear()
    telegram_id = callback_query.from_user.id
    user = await db.get_user_profile(telegram_id)

    if not user:
        await callback_query.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start", show_alert=True)
        return

    user_notes_list = await db.get_notes_by_user(telegram_id, limit=MAX_NOTES_MVP + 1, archived=False)
    notes_count_actual = len(user_notes_list)

    profile_parts = [f"{hbold('üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:')}", f"Telegram ID: {hcode(user['telegram_id'])}"]
    if user.get('username'): profile_parts.append(f"Username: @{hitalic(user['username'])}")
    if user.get('first_name'): profile_parts.append(f"–ò–º—è: {hitalic(user['first_name'])}")
    profile_parts.append(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user['created_at'].strftime('%d.%m.%Y %H:%M UTC')}")

    sub_status = "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è (MVP)"  # –ó–∞–≥–ª—É—à–∫–∞
    profile_parts.append(f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {hitalic(sub_status)}")
    profile_parts.append(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫: {hbold(notes_count_actual)} –∏–∑ {MAX_NOTES_MVP} (MVP –ª–∏–º–∏—Ç)")

    response_text = "\n".join(profile_parts)
    await callback_query.answer()
    await callback_query.message.answer(response_text, parse_mode="HTML", reply_markup=get_action_keyboard())


# --- LIFECYCLE HANDLERS ---
async def on_startup(dispatcher: Dispatcher):
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await db.setup_database_on_startup()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")


async def on_shutdown(dispatcher: Dispatcher):
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    await db.shutdown_database_on_shutdown()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


async def main_bot_loop():
    dp.include_router(router)
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    logger.info("–ó–∞–ø—É—Å–∫ polling...")
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())


if __name__ == "__main__":
    try:
        asyncio.run(main_bot_loop())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}", exc_info=True)