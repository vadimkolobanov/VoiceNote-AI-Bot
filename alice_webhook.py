# alice_webhook.py
import logging
import secrets
import string
import os
import asyncio
from datetime import datetime, timedelta
from fastapi import FastAPI
from pydantic import BaseModel
from aiogram import Bot
from aiogram.utils.markdown import hbold
from dotenv import load_dotenv

import database_setup as db
from services import note_creator

load_dotenv()
logger = logging.getLogger(__name__)

app = FastAPI(docs_url=None, redoc_url=None)


class AliceRequest(BaseModel):
    class Session(BaseModel):
        new: bool
        class User(BaseModel):
            user_id: str
        user: User
    class Request(BaseModel):
        original_utterance: str
        type: str
    request: Request
    session: Session


class AliceResponse(BaseModel):
    class Response(BaseModel):
        text: str
        end_session: bool = True
    response: Response
    version: str = "1.0"


bot_instance: Bot | None = None


def set_bot_instance(bot: Bot):
    global bot_instance
    bot_instance = bot


async def process_note_in_background(user: dict, utterance: str):
    logger.info(f"Background task for Alice started for user {user['telegram_id']}")
    try:
        if not bot_instance:
            logger.error("Bot instance is not set in Alice background task!")
            return

        success, message, new_note = await note_creator.process_and_save_note(
            bot=bot_instance,
            telegram_id=user['telegram_id'],
            text_to_process=utterance
        )

        if success and new_note:
            await db.log_user_action(
                user['telegram_id'],
                'create_note_alice',
                {'note_id': new_note['note_id']}
            )
            await bot_instance.send_message(
                user['telegram_id'],
                f"üéôÔ∏è –ó–∞–º–µ—Ç–∫–∞ –∏–∑ –ê–ª–∏—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n\n`{new_note['corrected_text']}`",
                parse_mode="Markdown"
            )
        else:
            await bot_instance.send_message(
                user['telegram_id'],
                f"üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∏–∑ –ê–ª–∏—Å—ã.\n–ü—Ä–∏—á–∏–Ω–∞: {message}"
            )
    except Exception as e:
        logger.error(f"Error in background note processing from Alice for user {user['telegram_id']}: {e}", exc_info=True)
        if bot_instance:
            await bot_instance.send_message(
                user['telegram_id'],
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –ê–ª–∏—Å—ã."
            )


def generate_activation_code(length=6):
    alphabet = string.ascii_uppercase + string.digits
    return ''.join(secrets.choice(alphabet) for _ in range(length))


async def get_link_code_for_user(telegram_id: int) -> str:
    code = generate_activation_code()
    expires_at = datetime.now() + timedelta(minutes=10)
    await db.set_alice_activation_code(telegram_id, code, expires_at)
    return code


@app.post("/alice_webhook")
async def handle_alice_request(request: AliceRequest):
    alice_user_id = request.session.user.user_id
    utterance = request.request.original_utterance.lower().strip("?!.,")

    if request.session.new:
        user = await db.find_user_by_alice_id(alice_user_id)
        if user:
            welcome_text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≥–æ—Ç–æ–≤–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–ª—è –≤–∞—Å –∑–∞–º–µ—Ç–∫–∏. –ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–ø—Ä–æ—Å–∏ VoiceNote –Ω–∞–ø–æ–º–Ω–∏—Ç—å –º–Ω–µ –∫—É–ø–∏—Ç—å —Ö–ª–µ–±."
        else:
            welcome_text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß—Ç–æ–±—ã —è –º–æ–≥–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏, —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –≤–∞—à Telegram-–∞–∫–∫–∞—É–Ω—Ç. –î–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –≤ –±–æ—Ç–µ –∏ —Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ: –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥, –∏ –Ω–∞–∑–æ–≤–∏—Ç–µ –µ–≥–æ."
        return AliceResponse(response={"text": welcome_text, "end_session": False})

    help_commands = ["–ø–æ–º–æ—â—å", "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å", "—Å–ø—Ä–∞–≤–∫–∞", "—Ö–µ–ª–ø", "—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å"]
    if utterance in help_commands:
        help_text = "–Ø —É–º–µ—é —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–ª—è –≤–∞—Å –∑–∞–º–µ—Ç–∫–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–ø—Ä–æ—Å–∏ VoiceNote –Ω–∞–ø–æ–º–Ω–∏—Ç—å –º–Ω–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ –≤ —Å–µ–º—å –≤–µ—á–µ—Ä–∞. –í—Å—è –º–∞–≥–∏—è –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ –≤–∞—à–µ–º Telegram-–±–æ—Ç–µ. –î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –≤ –±–æ—Ç–µ –∏ —Å–∫–∞–∂–∏—Ç–µ: –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥, –∏ –Ω–∞–∑–æ–≤–∏—Ç–µ –µ–≥–æ."
        return AliceResponse(response={"text": help_text, "end_session": True})

    if utterance.startswith("–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥"):
        code = utterance.replace("–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", "").strip().upper()
        if not code:
            return AliceResponse(response={"text": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–æ–≤–∏—Ç–µ –∫–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é.", "end_session": False})

        user_to_link = await db.find_user_by_alice_code(code)
        if not user_to_link:
            return AliceResponse(
                response={"text": "–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –≤ Telegram.", "end_session": True})

        await db.link_alice_user(user_to_link['telegram_id'], alice_user_id)
        if bot_instance:
            await bot_instance.send_message(user_to_link['telegram_id'],
                                            "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –Ø–Ω–¥–µ–∫—Å.–ê–ª–∏—Å–µ!")
        return AliceResponse(
            response={"text": "–û—Ç–ª–∏—á–Ω–æ! –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏.", "end_session": True})

    user = await db.find_user_by_alice_id(alice_user_id)
    if not user:
        return AliceResponse(response={
            "text": "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç. –°–∫–∞–∂–∏—Ç–µ '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥' –∏ –Ω–∞–∑–æ–≤–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram-–±–æ—Ç–∞.",
            "end_session": False})

    if not bot_instance:
        logger.error("Bot instance is not configured in webhook handler!")
        return AliceResponse(response={"text": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."})

    asyncio.create_task(
        process_note_in_background(user, request.request.original_utterance)
    )

    return AliceResponse(response={"text": "–ü—Ä–∏–Ω—è–ª–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª—é –≤ Telegram."})