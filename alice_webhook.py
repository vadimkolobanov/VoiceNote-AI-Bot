# alice_webhook.py
import logging
import secrets
import string
import os
from datetime import datetime, timedelta
from fastapi import FastAPI, Request, Header, HTTPException
from pydantic import BaseModel
from aiogram import Bot
from dotenv import load_dotenv

import database_setup as db
from services.note_creator import process_and_save_note

load_dotenv()
logger = logging.getLogger(__name__)
app = FastAPI(docs_url=None, redoc_url=None)


# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö Pydantic –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
class AliceRequest(BaseModel):
    class Request(BaseModel):
        original_utterance: str

    class Session(BaseModel):
        class User(BaseModel):
            user_id: str

        user: User

    request: Request
    session: Session


class AliceResponse(BaseModel):
    class Response(BaseModel):
        text: str
        end_session: bool = True

    response: Response
    version: str = "1.0"


bot_instance: Bot | None = None


def set_bot_instance(bot: Bot):
    global bot_instance
    bot_instance = bot


@app.post("/alice_webhook")
async def handle_alice_request(request: AliceRequest):  # <-- –£–±—Ä–∞–ª–∏ 'authorization: str = Header(None)'

    # --- –≠–¢–û–¢ –ë–õ–û–ö –ü–û–õ–ù–û–°–¢–¨–Æ –£–î–ê–õ–Ø–ï–ú ---
    # if ALICE_SECRET_TOKEN:
    #     expected_header = f"Bearer {ALICE_SECRET_TOKEN}"
    #     if not authorization or authorization != expected_header:
    #         logger.warning(f"Unauthorized access attempt. Got header: '{authorization}', expected: '{expected_header}'")
    #         raise HTTPException(status_code=403, detail="Forbidden")
    # ------------------------------------
    # –¢–µ–ø–µ—Ä—å –ª—é–±–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω.

    # –í—Å—è –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    alice_user_id = request.session.user.user_id
    utterance = request.request.original_utterance.lower()

    if utterance.startswith("–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥"):
        code = utterance.replace("–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", "").strip().upper()
        if not code:
            return AliceResponse(response={"text": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–æ–≤–∏—Ç–µ –∫–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é."})

        user_to_link = await db.find_user_by_alice_code(code)
        if not user_to_link:
            return AliceResponse(response={"text": "–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –≤ Telegram."})

        await db.link_alice_user(user_to_link['telegram_id'], alice_user_id)
        if bot_instance:
            await bot_instance.send_message(user_to_link['telegram_id'],
                                            "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –Ø–Ω–¥–µ–∫—Å.–ê–ª–∏—Å–µ!")
        return AliceResponse(response={"text": "–û—Ç–ª–∏—á–Ω–æ! –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω. –¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å."})

    user = await db.find_user_by_alice_id(alice_user_id)
    if not user:
        return AliceResponse(response={
            "text": "–ü–æ—Ö–æ–∂–µ, –º—ã –Ω–µ –∑–Ω–∞–∫–æ–º—ã. –î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–π–¥–∏—Ç–µ –≤ Telegram-–±–æ—Ç, –≤ '–ü—Ä–æ—Ñ–∏–ª–µ' –æ—Ç–∫—Ä–æ–π—Ç–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–≤—è–∑–∞—Ç—å –Ø–Ω–¥–µ–∫—Å.–ê–ª–∏—Å—É', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."})

    if not bot_instance:
        return AliceResponse(response={"text": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ù–µ –º–æ–≥—É —Å–≤—è–∑–∞—Ç—å—Å—è —Å Telegram."})

    success, message, new_note = await process_and_save_note(bot_instance, user['telegram_id'],
                                                             request.request.original_utterance)

    if success and new_note:
        await bot_instance.send_message(user['telegram_id'],
                                        f"üéôÔ∏è –ó–∞–º–µ—Ç–∫–∞ –∏–∑ –ê–ª–∏—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n\n`{new_note['corrected_text']}`",
                                        parse_mode="Markdown")
        return AliceResponse(response={"text": "–ì–æ—Ç–æ–≤–æ, —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞."})
    else:
        return AliceResponse(response={"text": f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å. {message}"})


# –§—É–Ω–∫—Ü–∏–∏ generate_activation_code –∏ get_link_code_for_user –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
def generate_activation_code(length=6):
    alphabet = string.ascii_uppercase + string.digits
    return ''.join(secrets.choice(alphabet) for _ in range(length))


async def get_link_code_for_user(telegram_id: int) -> str:
    code = generate_activation_code()
    expires_at = datetime.now() + timedelta(minutes=10)
    await db.set_alice_activation_code(telegram_id, code, expires_at)
    return code