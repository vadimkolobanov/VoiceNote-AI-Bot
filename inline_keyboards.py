# inline_keyboards.py
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.callback_data import CallbackData
from aiogram.utils.keyboard import InlineKeyboardBuilder

from services.tz_utils import COMMON_TIMEZONES


# --- CallbackData Factories ---

class NoteAction(CallbackData, prefix="note_act"):
    """
    CallbackData –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–º–µ—Ç–∫–æ–π.
    `action`: 'view', 'delete', 'edit', 'archive', 'unarchive', 'confirm_delete'
    `note_id`: ID –∑–∞–º–µ—Ç–∫–∏.
    `page`: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫ (–¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞).
    `target_list`: 'active' –∏–ª–∏ 'archive', —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –≤ –∫–∞–∫–æ–π —Å–ø–∏—Å–æ–∫ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è.
    """
    action: str
    note_id: int
    page: int = 1
    target_list: str = 'active'


class PageNavigation(CallbackData, prefix="pg_nav"):
    """
    CallbackData –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
    `target`: 'notes'
    `page`: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    `archived`: –§–ª–∞–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ (True/False).
    """
    target: str
    page: int
    archived: bool = False

# <--- –ù–û–í–´–ô CallbackData --->
class TimezoneAction(CallbackData, prefix="tz_act"):
    """
    CallbackData –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞.
    `action`: 'set' (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å) –∏–ª–∏ 'manual_input' (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥).
    `tz_name`: –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Europe/Moscow).
    """
    action: str
    tz_name: str | None = None


# --- Keyboard Generators ---

def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üìù –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏",
        callback_data=PageNavigation(target="notes", page=1, archived=False).pack()
    )
    builder.button(
        text="üóÑÔ∏è –ê—Ä—Ö–∏–≤",
        callback_data=PageNavigation(target="notes", page=1, archived=True).pack()
    )
    builder.button(
        text="üë§ –ü—Ä–æ—Ñ–∏–ª—å",
        callback_data="user_profile"
    )
    builder.adjust(2, 1)
    return builder.as_markup()

# <--- –ù–û–í–ê–Ø –ö–õ–ê–í–ò–ê–¢–£–†–ê --->
def get_timezone_selection_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞."""
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
    for display_name, iana_name in COMMON_TIMEZONES.items():
        builder.button(
            text=display_name,
            callback_data=TimezoneAction(action="set", tz_name=iana_name).pack()
        )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    builder.button(
        text="‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é",
        callback_data=TimezoneAction(action="manual_input").pack()
    )
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å
    builder.button(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å",
        callback_data="user_profile" # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –ø–æ —Ç–æ–º—É –∂–µ –∫–æ–ª–±—ç–∫—É, —á—Ç–æ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å
    )

    builder.adjust(2, 2, 2, 2, 2, 1, 1) # –ü–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥, –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ - –ø–æ –æ–¥–Ω–æ–π
    return builder.as_markup()


def get_profile_actions_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ –ø—Ä–æ—Ñ–∏–ª–µ."""
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
        callback_data="set_timezone" # –ü—Ä–æ—Å—Ç–æ–π callback –¥–ª—è –≤—ã–∑–æ–≤–∞ —ç–∫—Ä–∞–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    )
    builder.button(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="main_menu_from_notes" # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç–∏
    )
    builder.adjust(1)
    return builder.as_markup()


def get_note_confirmation_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm_save_note")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_save_note")
    builder.adjust(2)
    return builder.as_markup()


def get_notes_list_display_keyboard(
        notes: list[dict],
        current_page: int,
        total_pages: int,
        is_archive_list: bool
) -> InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫.
    """
    builder = InlineKeyboardBuilder()
    target_list_str = 'archive' if is_archive_list else 'active'

    if not notes and current_page == 1:
        pass
    else:
        for note in notes:
            preview_text = f"#{note['note_id']} - {note['corrected_text'][:35]}"
            if len(note['corrected_text']) > 35:
                preview_text += "..."
            builder.button(
                text=preview_text,
                callback_data=NoteAction(action="view", note_id=note['note_id'], page=current_page, target_list=target_list_str).pack()
            )

    pagination_row_items = []
    if current_page > 1:
        pagination_row_items.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=PageNavigation(target="notes", page=current_page - 1, archived=is_archive_list).pack()
        ))
    if total_pages > 1:
        pagination_row_items.append(InlineKeyboardButton(
            text=f"{current_page}/{total_pages}",
            callback_data="ignore_page_display"
        ))
    if current_page < total_pages:
        pagination_row_items.append(InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
            callback_data=PageNavigation(target="notes", page=current_page + 1, archived=is_archive_list).pack()
        ))

    builder.adjust(1)
    if pagination_row_items:
        builder.row(*pagination_row_items)
    builder.row(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu_from_notes"))
    return builder.as_markup()


def get_note_view_actions_keyboard(note_id: int, current_page: int, is_archived: bool) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    target_list_str = 'archive' if is_archived else 'active'
    if not is_archived:
        builder.button(
            text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
            callback_data=NoteAction(action="edit", note_id=note_id, page=current_page, target_list=target_list_str).pack()
        )
        builder.button(
            text="üóÑÔ∏è –í –∞—Ä—Ö–∏–≤",
            callback_data=NoteAction(action="archive", note_id=note_id, page=current_page, target_list=target_list_str).pack()
        )
    else:
        builder.button(
            text="‚Ü©Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
            callback_data=NoteAction(action="unarchive", note_id=note_id, page=current_page, target_list=target_list_str).pack()
        )
    builder.button(
        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞",
        callback_data=NoteAction(action="confirm_delete", note_id=note_id, page=current_page, target_list=target_list_str).pack()
    )
    list_button_text = "‚¨ÖÔ∏è –ö –∞—Ä—Ö–∏–≤—É" if is_archived else "‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–º–µ—Ç–æ–∫"
    builder.button(
        text=list_button_text,
        callback_data=PageNavigation(target="notes", page=current_page, archived=is_archived).pack()
    )
    if not is_archived:
        builder.adjust(2, 1, 1)
    else:
        builder.adjust(1, 1, 1)
    return builder.as_markup()


def get_confirm_delete_keyboard(note_id: int, page: int, target_list: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚ÄºÔ∏è –î–ê, –£–î–ê–õ–ò–¢–¨ –ù–ê–í–°–ï–ì–î–ê ‚ÄºÔ∏è",
        callback_data=NoteAction(action="delete", note_id=note_id, page=page, target_list=target_list).pack()
    )
    builder.button(
        text="–û—Ç–º–µ–Ω–∞",
        callback_data=NoteAction(action="view", note_id=note_id, page=page, target_list=target_list).pack()
    )
    builder.adjust(1)
    return builder.as_markup()