# inline_keyboards.py
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.callback_data import CallbackData
from aiogram.utils.keyboard import InlineKeyboardBuilder


# --- CallbackData Factories ---

class NoteAction(CallbackData, prefix="note_act"):
    """
    CallbackData –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–º–µ—Ç–∫–æ–π.
    `action`: 'view', 'delete', 'edit', etc.
    `note_id`: ID –∑–∞–º–µ—Ç–∫–∏.
    `page`: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫ (–¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞).
    """
    action: str
    note_id: int
    page: int = 1  # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞


class PageNavigation(CallbackData, prefix="pg_nav"):
    """
    CallbackData –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
    `target`: "notes" (–¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫), –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–ø–∏—Å–∫–æ–≤.
    `page`: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """
    target: str
    page: int


# --- Keyboard Generators ---

def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üìù –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏",
        callback_data=PageNavigation(target="notes", page=1).pack()
    )
    builder.button(
        text="üë§ –ü—Ä–æ—Ñ–∏–ª—å",
        callback_data="user_profile"  # –ü—Ä–æ—Å—Ç–æ–π callback –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    )
    builder.adjust(1)  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    return builder.as_markup()


def get_note_confirmation_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm_save_note")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_save_note")
    builder.adjust(2)
    return builder.as_markup()


def get_notes_list_display_keyboard(
        notes: list[dict],
        current_page: int,
        total_pages: int
) -> InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    –ö–∞–∂–¥–∞—è –∑–∞–º–µ—Ç–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
    """
    builder = InlineKeyboardBuilder()

    if not notes and current_page == 1:  # –ï—Å–ª–∏ –∑–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç –≤–æ–æ–±—â–µ
        pass  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –Ω–∏–∂–µ
    elif not notes and current_page > 1:  # –ï—Å–ª–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç, –∞ —Ä–∞–Ω—å—à–µ –±—ã–ª–∏
        builder.button(
            text="‚ö†Ô∏è –ó–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç, –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
            callback_data=PageNavigation(target="notes", page=max(1, current_page - 1)).pack()
        )
    else:
        for note in notes:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º ID –∏ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏
            preview_text = f"#{note['note_id']} - {note['corrected_text'][:35]}"
            if len(note['corrected_text']) > 35:
                preview_text += "..."
            builder.button(
                text=preview_text,
                callback_data=NoteAction(action="view", note_id=note['note_id'], page=current_page).pack()
            )

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_row_items = []
    if current_page > 1:
        pagination_row_items.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=PageNavigation(target="notes", page=current_page - 1).pack()
        ))

    if total_pages > 1:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
        pagination_row_items.append(InlineKeyboardButton(
            text=f"{current_page}/{total_pages}",
            callback_data="ignore_page_display"  # –ö–Ω–æ–ø–∫–∞-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        ))

    if current_page < total_pages:
        pagination_row_items.append(InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
            callback_data=PageNavigation(target="notes", page=current_page + 1).pack()
        ))

    builder.adjust(1)  # –ö–∞–∂–¥–∞—è –∑–∞–º–µ—Ç–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ

    if pagination_row_items:
        builder.row(*pagination_row_items)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥

    builder.row(InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu_from_notes"))
    return builder.as_markup()


def get_note_view_actions_keyboard(note_id: int, current_page: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–º–µ—Ç–∫–∏."""
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
        callback_data=NoteAction(action="delete", note_id=note_id, page=current_page).pack()
    )
    # –°—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" –∏ —Ç.–¥.
    builder.button(
        text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–º–µ—Ç–æ–∫",
        callback_data=PageNavigation(target="notes", page=current_page).pack()
    )
    builder.adjust(1)  # –ö–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    return builder.as_markup()