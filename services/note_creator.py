# services/note_creator.py
import logging
from datetime import datetime, time
import pytz

from aiogram import Bot
from aiogram.utils.markdown import hbold, hcode

import database_setup as db
from config import DEEPSEEK_API_KEY_EXISTS, MAX_NOTES_MVP
from llm_processor import enhance_text_with_llm
from services.scheduler import add_reminder_to_scheduler
from services.tz_utils import format_datetime_for_user

logger = logging.getLogger(__name__)


async def process_and_save_note(
        bot: Bot,
        telegram_id: int,
        text_to_process: str,
        audio_file_id: str | None = None,
        message_date: datetime | None = None
) -> tuple[bool, str, dict | None, bool]:
    user_profile = await db.get_user_profile(telegram_id)
    if not user_profile:
        return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start.", None, False

    is_vip = user_profile.get('is_vip', False)
    note_taken_at = message_date or datetime.now(pytz.utc)

    if not is_vip:
        active_notes_count = await db.count_active_notes_for_user(telegram_id)
        if active_notes_count >= MAX_NOTES_MVP:
            # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ –ø–æ–∫—É–ø–æ–∫, —Ç.–∫. –æ–Ω–∏ –Ω–µ —Å–æ–∑–¥–∞—é—Ç –Ω–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏, –∞ –æ–±–Ω–æ–≤–ª—è—é—Ç –æ–¥–Ω—É
            if '–∫—É–ø–∏—Ç—å' not in text_to_process.lower() and '–ø–æ–∫—É–ø–∫–∏' not in text_to_process.lower():
                return False, f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {MAX_NOTES_MVP} –∑–∞–º–µ—Ç–æ–∫. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é, —É–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—É—é.", None, False

    if not DEEPSEEK_API_KEY_EXISTS:
        # –õ–æ–≥–∏–∫–∞ –±–µ–∑ LLM –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π
        note_id = await db.create_note(
            telegram_id=telegram_id,
            summary_text=text_to_process[:80],
            corrected_text=text_to_process,
            original_stt_text=text_to_process,
            original_audio_telegram_file_id=audio_file_id,
            note_taken_at=note_taken_at
        )
        if note_id:
            note = await db.get_note_by_id(note_id, telegram_id)
            user_message = f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ #{hbold(str(note_id))} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (–±–µ–∑ AI-–∞–Ω–∞–ª–∏–∑–∞)."
            return True, user_message, note, False
        else:
            return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏.", None, False

    user_timezone_str = user_profile.get('timezone', 'UTC')
    user_tz = pytz.timezone(user_timezone_str)
    current_user_dt = datetime.now(user_tz)
    current_user_dt_iso = current_user_dt.isoformat()

    llm_result_dict = await enhance_text_with_llm(text_to_process, current_user_datetime_iso=current_user_dt_iso)
    llm_analysis_json = None
    warning_message = ""

    if "error" in llm_result_dict:
        logger.error(f"LLM error for user {telegram_id}: {llm_result_dict['error']}")
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ LLM –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –∑–∞–º–µ—Ç–∫—É
        category_to_save = "–û–±—â–µ–µ"
        summary_text_to_save = text_to_process[:80]
        corrected_text_to_save = text_to_process
    else:
        llm_analysis_json = llm_result_dict
        summary_text_to_save = llm_result_dict.get("summary_text", text_to_process[:80])
        corrected_text_to_save = llm_result_dict.get("corrected_text", text_to_process)
        category_to_save = llm_result_dict.get("category", "–û–±—â–µ–µ")

    due_date_obj = None
    if llm_analysis_json and llm_analysis_json.get("dates_times"):
        try:
            date_time_info = llm_analysis_json["dates_times"][0]
            due_date_str_utc = date_time_info.get("absolute_datetime_start")
            if due_date_str_utc:
                dt_obj_utc = datetime.fromisoformat(due_date_str_utc.replace('Z', '+00:00'))
                is_time_ambiguous = (dt_obj_utc.time() == time(0, 0))
                if is_time_ambiguous:
                    default_time = user_profile.get('default_reminder_time', time(9, 0)) if is_vip else time(12, 0)
                    local_due_date = datetime.combine(dt_obj_utc.date(), default_time)
                    due_date_obj = user_tz.localize(local_due_date).astimezone(pytz.utc)
                else:
                    due_date_obj = dt_obj_utc
        except (ValueError, IndexError, KeyError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –∏–∑ LLM: {e}")

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –°–ü–ò–°–ö–û–í –ü–û–ö–£–ü–û–ö ---
    if category_to_save == "–ü–æ–∫—É–ø–∫–∏":
        new_items = llm_analysis_json.get("items", [])
        if not new_items:  # –ï—Å–ª–∏ LLM –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞–∫ –ø–æ–∫—É–ø–∫–∏, –Ω–æ –Ω–µ –Ω–∞—à–µ–ª —Ç–æ–≤–∞—Ä–æ–≤, –¥–µ–ª–∞–µ–º –æ–±—ã—á–Ω–æ–π –∑–∞–º–µ—Ç–∫–æ–π
            category_to_save = "–û–±—â–µ–µ"
        else:
            shopping_note = await db.get_or_create_active_shopping_list_note(telegram_id)
            if not shopping_note:
                return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", None, False

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
            existing_items = shopping_note.get("llm_analysis_json", {}).get("items", [])
            existing_item_names = {item['item_name'].lower() for item in existing_items}

            items_to_add = [item for item in new_items if item['item_name'].lower() not in existing_item_names]
            existing_items.extend(items_to_add)

            shopping_note["llm_analysis_json"]["items"] = existing_items
            await db.update_note_llm_json(shopping_note['note_id'], shopping_note["llm_analysis_json"], telegram_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ
            if due_date_obj:
                await db.update_note_due_date(shopping_note['note_id'], due_date_obj)
                shopping_note['due_date'] = due_date_obj
                add_reminder_to_scheduler(bot, {**shopping_note, **user_profile})

            added_count = len(items_to_add)
            user_message = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫: {added_count} –ø–æ–∑."
            return True, user_message, shopping_note, False
    # ---------------------------------------------------

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫
    recurrence_rule = llm_analysis_json.get("recurrence_rule") if llm_analysis_json else None
    if recurrence_rule and not is_vip:
        recurrence_rule = None
        warning_message += f"\n\n‚≠ê –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏ ‚Äî VIP-—Ñ—É–Ω–∫—Ü–∏—è. –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ —Ä–∞–∑–æ–≤–∞—è."

    note_id = await db.create_note(
        telegram_id=telegram_id, summary_text=summary_text_to_save,
        corrected_text=corrected_text_to_save, original_stt_text=text_to_process,
        llm_analysis_json=llm_analysis_json, original_audio_telegram_file_id=audio_file_id,
        note_taken_at=note_taken_at, due_date=due_date_obj,
        recurrence_rule=recurrence_rule, category=category_to_save
    )

    if not note_id:
        return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –≤ –±–∞–∑—É.", None, False

    new_note = await db.get_note_by_id(note_id, telegram_id)
    if due_date_obj:
        add_reminder_to_scheduler(bot, {**new_note, **user_profile})

    user_message = f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ #{hbold(str(note_id))} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!{warning_message}"
    date_info = ""
    needs_tz_prompt = False

    if new_note.get('due_date'):
        formatted_date = format_datetime_for_user(new_note['due_date'], user_timezone_str)
        date_info = f"\nüóìÔ∏è –°—Ä–æ–∫: {formatted_date}"
        if user_timezone_str == 'UTC':
            needs_tz_prompt = True
            date_info += f"\n\n{hbold('‚ö†Ô∏è –í–∞–∂–Ω–æ!')} –í–∞—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ UTC. –ß—Ç–æ–±—ã –æ–Ω–æ —Å—Ä–∞–±–æ—Ç–∞–ª–æ –≤–æ–≤—Ä–µ–º—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å."

    full_response = f"{user_message}\n\n{hcode(new_note.get('summary_text', new_note['corrected_text']))}{date_info}"

    return True, full_response, new_note, needs_tz_prompt