# services/scheduler.py
import logging
from datetime import datetime, time
from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.memory import MemoryJobStore
from apscheduler.executors.asyncio import AsyncIOExecutor
import pytz

import database_setup as db
from inline_keyboards import get_reminder_notification_keyboard
from services.tz_utils import format_datetime_for_user

logger = logging.getLogger(__name__)

# --- Scheduler Setup ---
jobstores = {
    'default': MemoryJobStore()
}
executors = {
    'default': AsyncIOExecutor()
}
scheduler = AsyncIOScheduler(
    jobstores=jobstores,
    executors=executors,
    timezone=pytz.utc
)


async def send_reminder_notification(bot: Bot, telegram_id: int, note_id: int, note_text: str, due_date: datetime):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    """
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –∑–∞–º–µ—Ç–∫–µ #{note_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
    try:
        user_profile = await db.get_user_profile(telegram_id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –∑–∞–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        note = await db.get_note_by_id(note_id, telegram_id)
        if not note or note.get('is_completed') or note.get('is_archived'):
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note_id} –æ—Ç–º–µ–Ω–µ–Ω–æ: –∑–∞–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞.")
            return

        user_timezone = user_profile.get('timezone', 'UTC') if user_profile else 'UTC'
        formatted_due_date = format_datetime_for_user(due_date, user_timezone)

        from aiogram.utils.markdown import hbold, hcode, hitalic
        text = (
            f"üîî {hbold('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')}\n\n"
            f"–ó–∞–º–µ—Ç–∫–∞: #{hcode(str(note_id))}\n"
            f"–°—Ä–æ–∫: {hitalic(formatted_due_date)}\n\n"
            f"üìù {hbold('–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:')}\n"
            f"{hcode(note_text)}"
        )
        keyboard = get_reminder_notification_keyboard(note_id)
        await bot.send_message(chat_id=telegram_id, text=text, parse_mode="HTML", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –∑–∞–º–µ—Ç–∫–µ #{note_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}",
                     exc_info=True)


def add_reminder_to_scheduler(bot: Bot, note: dict):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.
    –ï—Å–ª–∏ —É due_date –≤—Ä–µ–º—è 00:00:00, —Å–¥–≤–∏–≥–∞–µ—Ç –µ–≥–æ –Ω–∞ –≤—Ä–µ–º—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    job_id = f"note_reminder_{note['note_id']}"
    due_date_utc = note.get('due_date')

    if not due_date_utc:
        return

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∞—Ç–∞ "aware"
    if due_date_utc.tzinfo is None:
        due_date_utc = pytz.utc.localize(due_date_utc)

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    if due_date_utc.time() == time(0, 0, 0):
        user_reminder_time = note.get('default_reminder_time', time(9, 0))  # –≤—Ä–µ–º—è –∏–∑ –ë–î –∏–ª–∏ 9:00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        user_timezone_str = note.get('timezone', 'UTC')  # —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ –ë–î –∏–ª–∏ UTC

        try:
            user_tz = pytz.timezone(user_timezone_str)
        except pytz.UnknownTimeZoneError:
            logger.warning(
                f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å '{user_timezone_str}' —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {note['telegram_id']}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è UTC.")
            user_tz = pytz.utc

        # –°–æ–∑–¥–∞–µ–º "–Ω–∞–∏–≤–Ω—É—é" –¥–∞—Ç—É —Å –Ω—É–∂–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        local_due_date = datetime.combine(due_date_utc.date(), user_reminder_time)
        # –î–µ–ª–∞–µ–º –µ–µ "aware" (–ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        aware_local_due_date = user_tz.localize(local_due_date)
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        final_due_date_utc = aware_local_due_date.astimezone(pytz.utc)

        logger.info(
            f"–î–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note['note_id']} –≤—Ä–µ–º—è –Ω–µ –±—ã–ª–æ —É–∫–∞–∑–∞–Ω–æ. "
            f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ {user_reminder_time.strftime('%H:%M')} –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({user_timezone_str}). "
            f"–ò—Ç–æ–≥–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ UTC: {final_due_date_utc.isoformat()}"
        )
    else:
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –±—ã–ª–æ —É–∫–∞–∑–∞–Ω–æ –≤ –∑–∞–º–µ—Ç–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
        final_due_date_utc = due_date_utc

    if final_due_date_utc < datetime.now(pytz.utc):
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note['note_id']} –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ (–¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º).")
        return

    job_kwargs = {
        'bot': bot,
        'telegram_id': note['telegram_id'],
        'note_id': note['note_id'],
        'note_text': note['corrected_text'],
        'due_date': final_due_date_utc
    }

    if scheduler.get_job(job_id):
        try:
            scheduler.reschedule_job(job_id, trigger='date', run_date=final_due_date_utc)
            logger.info(
                f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note['note_id']} –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {final_due_date_utc.isoformat()}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ #{job_id}: {e}")
    else:
        scheduler.add_job(
            send_reminder_notification,
            trigger='date',
            run_date=final_due_date_utc,
            id=job_id,
            kwargs=job_kwargs,
            replace_existing=True
        )
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note['note_id']} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {final_due_date_utc.isoformat()}")


def remove_reminder_from_scheduler(note_id: int):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    job_id = f"note_reminder_{note_id}"
    if scheduler.get_job(job_id):
        try:
            scheduler.remove_job(job_id)
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note_id}: {e}")


async def load_reminders_on_startup(bot: Bot):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    notes_with_reminders = await db.get_notes_with_reminders()
    count = 0
    for note in notes_with_reminders:
        add_reminder_to_scheduler(bot, note)
        count += 1
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.")