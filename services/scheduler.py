# services/scheduler.py
import logging
import asyncio
from datetime import datetime, time, timedelta, date
import pytz

from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.memory import MemoryJobStore
from apscheduler.executors.asyncio import AsyncIOExecutor

import database_setup as db
from inline_keyboards import get_reminder_notification_keyboard
from services.tz_utils import format_datetime_for_user

logger = logging.getLogger(__name__)

# --- Scheduler Setup ---
jobstores = {'default': MemoryJobStore()}
executors = {'default': AsyncIOExecutor()}
scheduler = AsyncIOScheduler(jobstores=jobstores, executors=executors, timezone=pytz.utc)


# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ó–∞–º–µ—Ç–æ–∫ ---

async def send_reminder_notification(bot: Bot, telegram_id: int, note_id: int, note_text: str, due_date: datetime,
                                     is_pre_reminder: bool):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –ó–ê–ú–ï–¢–ö–ï."""
    logger.info(
        f"–û—Ç–ø—Ä–∞–≤–∫–∞ {'–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ ' if is_pre_reminder else '–æ—Å–Ω–æ–≤–Ω–æ–≥–æ'}–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –∑–∞–º–µ—Ç–∫–µ #{note_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
    try:
        user_profile = await db.get_user_profile(telegram_id)
        note = await db.get_note_by_id(note_id, telegram_id)
        if not note or note.get('is_completed') or note.get('is_archived'):
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note_id} –æ—Ç–º–µ–Ω–µ–Ω–æ: –∑–∞–º–µ—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.")
            remove_reminder_from_scheduler(note_id)
            return

        user_timezone = user_profile.get('timezone', 'UTC') if user_profile else 'UTC'
        actual_due_date = note.get('due_date', due_date)
        formatted_due_date = format_datetime_for_user(actual_due_date, user_timezone)

        from aiogram.utils.markdown import hbold, hcode, hitalic

        header = f"üîî {hbold('–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')}" if is_pre_reminder else f"‚ÄºÔ∏è {hbold('–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï')}"

        text = (
            f"{header}\n\n"
            f"–ó–∞–º–µ—Ç–∫–∞: #{hcode(str(note_id))}\n"
            f"–°—Ä–æ–∫: {hitalic(formatted_due_date)}\n\n"
            f"üìù {hbold('–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:')}\n"
            f"{hcode(note_text)}"
        )
        keyboard = get_reminder_notification_keyboard(note_id, is_pre_reminder=is_pre_reminder)
        await bot.send_message(chat_id=telegram_id, text=text, parse_mode="HTML", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –∑–∞–º–µ—Ç–∫–µ #{note_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}",
                     exc_info=True)


def add_reminder_to_scheduler(bot: Bot, note: dict):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å —É—á–µ—Ç–æ–º VIP-—Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    note_id = note.get('note_id')
    due_date_utc = note.get('due_date')
    is_vip = note.get('is_vip', False)

    if not note_id or not due_date_utc:
        return

    remove_reminder_from_scheduler(note_id)

    if due_date_utc.tzinfo is None:
        due_date_utc = pytz.utc.localize(due_date_utc)

    is_time_ambiguous = (due_date_utc.time() == time(0, 0, 0))

    if is_time_ambiguous and is_vip:
        user_reminder_time = note.get('default_reminder_time', time(9, 0))
        user_timezone_str = note.get('timezone', 'UTC')
        try:
            user_tz = pytz.timezone(user_timezone_str)
        except pytz.UnknownTimeZoneError:
            user_tz = pytz.utc

        local_due_date = datetime.combine(due_date_utc.date(), user_reminder_time)
        aware_local_due_date = user_tz.localize(local_due_date)
        final_due_date_utc = aware_local_due_date.astimezone(pytz.utc)

        asyncio.create_task(db.update_note_due_date(note_id, final_due_date_utc))

    elif is_time_ambiguous and not is_vip:
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note_id} (Free User) –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ —è–≤–Ω–æ.")
        return
    else:
        final_due_date_utc = due_date_utc

    now_utc = datetime.now(pytz.utc)

    if final_due_date_utc > now_utc:
        job_id_main = f"note_reminder_{note_id}_main"
        scheduler.add_job(
            send_reminder_notification,
            trigger='date', run_date=final_due_date_utc, id=job_id_main,
            kwargs={
                'bot': bot, 'telegram_id': note['telegram_id'], 'note_id': note_id,
                'note_text': note['corrected_text'], 'due_date': final_due_date_utc,
                'is_pre_reminder': False
            },
            replace_existing=True
        )
        logger.info(f"–û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {final_due_date_utc.isoformat()}")

    if is_vip:
        pre_reminder_minutes = note.get('pre_reminder_minutes', 0)
        if pre_reminder_minutes > 0:
            pre_reminder_time_utc = final_due_date_utc - timedelta(minutes=pre_reminder_minutes)
            if pre_reminder_time_utc > now_utc:
                job_id_pre = f"note_reminder_{note_id}_pre_{pre_reminder_minutes}"
                scheduler.add_job(
                    send_reminder_notification,
                    trigger='date', run_date=pre_reminder_time_utc, id=job_id_pre,
                    kwargs={
                        'bot': bot, 'telegram_id': note['telegram_id'], 'note_id': note_id,
                        'note_text': note['corrected_text'], 'due_date': final_due_date_utc,
                        'is_pre_reminder': True
                    },
                    replace_existing=True
                )
                logger.info(
                    f"–ü—Ä–µ–¥-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {pre_reminder_time_utc.isoformat()} (–∑–∞ {pre_reminder_minutes} –º–∏–Ω.)")


def remove_reminder_from_scheduler(note_id: int):
    if not note_id: return
    prefix = f"note_reminder_{note_id}"
    jobs_removed_count = 0
    for job in scheduler.get_jobs()[:]:
        if job.id.startswith(prefix):
            try:
                job.remove()
                jobs_removed_count += 1
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {job.id}: {e}")
    if jobs_removed_count > 0:
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ {jobs_removed_count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note_id} –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.")


async def load_reminders_on_startup(bot: Bot):
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    notes_with_reminders = await db.get_notes_with_reminders()
    count = 0
    for note in notes_with_reminders:
        # VIP-—Å—Ç–∞—Ç—É—Å —É–∂–µ –≤–∫–ª—é—á–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç get_notes_with_reminders
        add_reminder_to_scheduler(bot, note)
        count += 1
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {count} –∑–∞–º–µ—Ç–æ–∫ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.")


# --- –ù–û–í–´–ô –ë–õ–û–ö: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –î–Ω—è—Ö –†–æ–∂–¥–µ–Ω–∏—è ---

def get_age_string(year: int, today: date) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º, —É—á–∏—Ç—ã–≤–∞—è –ø–∞–¥–µ–∂–∏."""
    age = today.year - year
    # –ï—Å–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —ç—Ç–æ–º –≥–æ–¥—É –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª
    if (today.month, today.day) < (1, 1):  # –≠—Ç–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–π.
        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å—Ä–∞–≤–Ω–∏—Ç—å (—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –º–µ—Å—è—Ü, –¥–µ–Ω—å) —Å (–º–µ—Å—è—Ü, –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è)
        # –ù–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤–æ–∑—Ä–∞—Å—Ç –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –≤ 00:00 –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
        pass  # –ü—Ä–æ—Å—Ç–æ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏, —Å–µ–π—á–∞—Å –ª–æ–≥–∏–∫–∞ –≤–µ—Ä–Ω–∞

    if age <= 0: return ""  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –±—É–¥—É—â–∏—Ö –¥–∞—Ç

    if age % 10 == 1 and age % 100 != 11:
        return f"({age} –≥–æ–¥)"
    if 2 <= age % 10 <= 4 and (age % 100 < 10 or age % 100 >= 20):
        return f"({age} –≥–æ–¥–∞)"
    return f"({age} –ª–µ—Ç)"


async def send_birthday_reminders(bot: Bot):
    """
    –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π...")
    all_birthdays = await db.get_all_birthdays_for_reminders()
    today_utc = datetime.now(pytz.utc)

    tasks = []
    for bday in all_birthdays:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
        if bday['birth_day'] == today_utc.day and bday['birth_month'] == today_utc.month:
            user_id = bday['user_telegram_id']
            person_name = bday['person_name']

            age_info = ""
            if bday['birth_year']:
                age_info = " " + get_age_string(bday['birth_year'], today_utc.date())

            text = f"üéÇ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –°–µ–≥–æ–¥–Ω—è –≤–∞–∂–Ω—ã–π –¥–µ–Ω—å —É <b>{person_name}</b>{age_info}!"

            # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            tasks.append(
                bot.send_message(chat_id=user_id, text=text, parse_mode="HTML")
            )
            logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è '{person_name}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    if tasks:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        results = await asyncio.gather(*tasks, return_exceptions=True)
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                bday = all_birthdays[i]
                logger.error(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è '{bday['person_name']}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {bday['user_telegram_id']}: {result}")


async def setup_daily_jobs(bot: Bot):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ/–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:05 –ø–æ UTC
    scheduler.add_job(
        send_birthday_reminders,
        trigger='cron',
        hour=0,
        minute=5,
        kwargs={'bot': bot},
        id='daily_birthday_check',
        replace_existing=True
    )
    logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.")