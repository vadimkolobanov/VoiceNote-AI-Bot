# services/scheduler.py
import logging
from datetime import datetime, time
from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.memory import MemoryJobStore
from apscheduler.executors.asyncio import AsyncIOExecutor
import pytz

import database_setup as db
from inline_keyboards import get_reminder_notification_keyboard
from services.tz_utils import format_datetime_for_user

logger = logging.getLogger(__name__)

# --- Scheduler Setup ---
jobstores = {
    'default': MemoryJobStore()
}
executors = {
    'default': AsyncIOExecutor()
}
scheduler = AsyncIOScheduler(
    jobstores=jobstores,
    executors=executors,
    timezone=pytz.utc
)


async def send_reminder_notification(bot: Bot, telegram_id: int, note_id: int, note_text: str, due_date: datetime):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    """
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –∑–∞–º–µ—Ç–∫–µ #{note_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
    try:
        user_profile = await db.get_user_profile(telegram_id)
        user_timezone = user_profile.get('timezone', 'UTC') if user_profile else 'UTC'
        formatted_due_date = format_datetime_for_user(due_date, user_timezone)

        from aiogram.utils.markdown import hbold, hcode, hitalic
        text = (
            f"üîî {hbold('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')}\n\n"
            f"–ó–∞–º–µ—Ç–∫–∞: #{hcode(str(note_id))}\n"
            f"–°—Ä–æ–∫: {hitalic(formatted_due_date)}\n\n"
            f"üìù {hbold('–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:')}\n"
            f"{hcode(note_text)}"
        )
        keyboard = get_reminder_notification_keyboard(note_id)
        await bot.send_message(chat_id=telegram_id, text=text, parse_mode="HTML", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –∑–∞–º–µ—Ç–∫–µ #{note_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}",
                     exc_info=True)


def add_reminder_to_scheduler(bot: Bot, note: dict):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.
    –ï—Å–ª–∏ —É due_date –≤—Ä–µ–º—è 00:00:00, —Å–¥–≤–∏–≥–∞–µ—Ç –µ–≥–æ –Ω–∞ 9:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    job_id = f"note_reminder_{note['note_id']}"
    due_date_utc = note.get('due_date')

    if not due_date_utc:
        return

    if due_date_utc.tzinfo is None:
        due_date_utc = pytz.utc.localize(due_date_utc)

    # <--- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê --->
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—Ä–µ–º—è "–ø–æ–ª—É–Ω–æ—á–Ω—ã–º"
    if due_date_utc.time() == time(0, 0, 0):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ—Å—á–∏—Ç–∞—Ç—å 9 —É—Ç—Ä–∞ –¥–ª—è –Ω–µ–≥–æ
            # –≠—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤, –Ω–æ –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è timezone_str
            # TODO: –ü–µ—Ä–µ–¥–∞—Ç—å user_profile –≤ note, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.
            logger.info(f"–ó–∞–º–µ—Ç–∫–∞ #{note['note_id']} –∏–º–µ–µ—Ç –≤—Ä–µ–º—è 00:00:00. –ü–æ–ø—ã—Ç–∫–∞ —Å–¥–≤–∏–Ω—É—Ç—å –Ω–∞ 9 —É—Ç—Ä–∞.")
            final_due_date_utc = due_date_utc.replace(hour=9, minute=0, second=0)
            logger.info(f"–í—Ä–µ–º—è –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note['note_id']} —Å–¥–≤–∏–Ω—É—Ç–æ –Ω–∞ {final_due_date_utc.isoformat()}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–¥–≤–∏–≥–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note['note_id']}: {e}")
            final_due_date_utc = due_date_utc  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    else:
        final_due_date_utc = due_date_utc

    if final_due_date_utc < datetime.now(pytz.utc):
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note['note_id']} –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ (–¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º).")
        return

    job_kwargs = {
        'bot': bot,
        'telegram_id': note['telegram_id'],
        'note_id': note['note_id'],
        'note_text': note['corrected_text'],
        'due_date': final_due_date_utc  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –¥–∞—Ç—É
    }

    if scheduler.get_job(job_id):
        scheduler.reschedule_job(job_id, trigger='date', run_date=final_due_date_utc)
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note['note_id']} –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {final_due_date_utc.isoformat()}")
    else:
        scheduler.add_job(
            send_reminder_notification,
            trigger='date',
            run_date=final_due_date_utc,
            id=job_id,
            kwargs=job_kwargs,
            replace_existing=True
        )
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note['note_id']} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {final_due_date_utc.isoformat()}")


def remove_reminder_from_scheduler(note_id: int):
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    job_id = f"note_reminder_{note_id}"
    if scheduler.get_job(job_id):
        try:
            scheduler.remove_job(job_id)
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note_id}: {e}")


async def load_reminders_on_startup(bot: Bot):
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    notes_with_reminders = await db.get_notes_with_reminders()
    count = 0
    for note in notes_with_reminders:
        add_reminder_to_scheduler(bot, note)
        count += 1
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.")