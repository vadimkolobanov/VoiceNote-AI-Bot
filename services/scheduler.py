# services/scheduler.py
import logging
import asyncio
from datetime import datetime, time, timedelta
from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.memory import MemoryJobStore
from apscheduler.executors.asyncio import AsyncIOExecutor
import pytz

import database_setup as db
from inline_keyboards import get_reminder_notification_keyboard
from services.tz_utils import format_datetime_for_user

logger = logging.getLogger(__name__)

# --- Scheduler Setup ---
jobstores = {
    'default': MemoryJobStore()
}
executors = {
    'default': AsyncIOExecutor()
}
scheduler = AsyncIOScheduler(
    jobstores=jobstores,
    executors=executors,
    timezone=pytz.utc
)


async def send_reminder_notification(bot: Bot, telegram_id: int, note_id: int, note_text: str, due_date: datetime,
                                     is_pre_reminder: bool):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–ª–∞–≥ is_pre_reminder –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    logger.info(
        f"–û—Ç–ø—Ä–∞–≤–∫–∞ {'–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ ' if is_pre_reminder else '–æ—Å–Ω–æ–≤–Ω–æ–≥–æ'}–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –∑–∞–º–µ—Ç–∫–µ #{note_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")

    try:
        user_profile = await db.get_user_profile(telegram_id)
        note = await db.get_note_by_id(note_id, telegram_id)

        if not note or note.get('is_completed') or note.get('is_archived'):
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note_id} –æ—Ç–º–µ–Ω–µ–Ω–æ: –∑–∞–º–µ—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.")
            remove_reminder_from_scheduler(note_id)
            return

        user_timezone = user_profile.get('timezone', 'UTC') if user_profile else 'UTC'
        actual_due_date = note.get('due_date', due_date)
        formatted_due_date = format_datetime_for_user(actual_due_date, user_timezone)

        from aiogram.utils.markdown import hbold, hcode, hitalic

        if is_pre_reminder:
            header = f"üîî {hbold('–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')}"
        else:
            header = f"‚ÄºÔ∏è {hbold('–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï')}"

        text = (
            f"{header}\n\n"
            f"–ó–∞–º–µ—Ç–∫–∞: #{hcode(str(note_id))}\n"
            f"–°—Ä–æ–∫: {hitalic(formatted_due_date)}\n\n"
            f"üìù {hbold('–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:')}\n"
            f"{hcode(note_text)}"
        )
        keyboard = get_reminder_notification_keyboard(note_id, is_pre_reminder=is_pre_reminder)
        await bot.send_message(chat_id=telegram_id, text=text, parse_mode="HTML", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –∑–∞–º–µ—Ç–∫–µ #{note_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}",
                     exc_info=True)


def add_reminder_to_scheduler(bot: Bot, note: dict):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å —É—á–µ—Ç–æ–º VIP-—Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    note_id = note.get('note_id')
    due_date_utc = note.get('due_date')
    is_vip = note.get('is_vip', False)

    if not note_id or not due_date_utc:
        return

    remove_reminder_from_scheduler(note_id)

    if due_date_utc.tzinfo is None:
        due_date_utc = pytz.utc.localize(due_date_utc)

    is_time_ambiguous = (due_date_utc.time() == time(0, 0, 0))

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è VIP, –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ —è–≤–Ω–æ
    if is_time_ambiguous and is_vip:
        user_reminder_time = note.get('default_reminder_time', time(9, 0))
        user_timezone_str = note.get('timezone', 'UTC')
        try:
            user_tz = pytz.timezone(user_timezone_str)
        except pytz.UnknownTimeZoneError:
            user_tz = pytz.utc

        local_due_date = datetime.combine(due_date_utc.date(), user_reminder_time)
        aware_local_due_date = user_tz.localize(local_due_date)
        final_due_date_utc = aware_local_due_date.astimezone(pytz.utc)

        asyncio.create_task(db.update_note_due_date(note_id, final_due_date_utc))

    elif is_time_ambiguous and not is_vip:
        # –î–ª—è Free-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ —Å—Ç–∞–≤–∏—Ç—Å—è, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note_id} (Free User) –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ —è–≤–Ω–æ.")
        return  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    else:
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ —è–≤–Ω–æ, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å—Ç–∞–≤–∏—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö
        final_due_date_utc = due_date_utc

    now_utc = datetime.now(pytz.utc)

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –û–°–ù–û–í–ù–û–ï –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–µ—Å–ª–∏ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º)
    if final_due_date_utc > now_utc:
        job_id_main = f"note_reminder_{note_id}_main"
        scheduler.add_job(
            send_reminder_notification,
            trigger='date',
            run_date=final_due_date_utc,
            id=job_id_main,
            kwargs={
                'bot': bot, 'telegram_id': note['telegram_id'], 'note_id': note_id,
                'note_text': note['corrected_text'], 'due_date': final_due_date_utc,
                'is_pre_reminder': False
            },
            replace_existing=True
        )
        logger.info(f"–û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {final_due_date_utc.isoformat()}")

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–û–ï –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è VIP)
    if is_vip:
        pre_reminder_minutes = note.get('pre_reminder_minutes', 0)
        if pre_reminder_minutes > 0:
            pre_reminder_time_utc = final_due_date_utc - timedelta(minutes=pre_reminder_minutes)
            if pre_reminder_time_utc > now_utc:
                job_id_pre = f"note_reminder_{note_id}_pre_{pre_reminder_minutes}"
                scheduler.add_job(
                    send_reminder_notification,
                    trigger='date',
                    run_date=pre_reminder_time_utc,
                    id=job_id_pre,
                    kwargs={
                        'bot': bot, 'telegram_id': note['telegram_id'], 'note_id': note_id,
                        'note_text': note['corrected_text'], 'due_date': final_due_date_utc,
                        'is_pre_reminder': True
                    },
                    replace_existing=True
                )
                logger.info(
                    f"–ü—Ä–µ–¥-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {pre_reminder_time_utc.isoformat()} (–∑–∞ {pre_reminder_minutes} –º–∏–Ω.)")


def remove_reminder_from_scheduler(note_id: int):
    if not note_id: return

    prefix = f"note_reminder_{note_id}"
    jobs_removed_count = 0
    for job in scheduler.get_jobs()[:]:
        if job.id.startswith(prefix):
            try:
                job.remove()
                jobs_removed_count += 1
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {job.id}: {e}")

    if jobs_removed_count > 0:
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ {jobs_removed_count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note_id} –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.")


async def load_reminders_on_startup(bot: Bot):
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
    # –ù–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å VIP-—Å—Ç–∞—Ç—É—Å –∏ —Å—é–¥–∞
    notes_with_reminders = await db.get_notes_with_reminders()

    # –ü–æ–ª—É—á–∞–µ–º VIP-—Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    user_ids = {note['telegram_id'] for note in notes_with_reminders}
    vip_statuses = {}
    if user_ids:
        # –≠—Ç–æ–≥–æ –º–æ–∂–Ω–æ –Ω–µ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ —É –Ω–∞—Å get_notes_with_reminders –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å is_vip
        # –Ω–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º —á—Ç–æ –Ω–µ—Ç, –∏ –º—ã –¥–µ–ª–∞–µ–º —Ç–∞–∫
        # TODO: –î–æ–±–∞–≤–∏—Ç—å is_vip –≤ get_notes_with_reminders –≤ –±—É–¥—É—â–µ–º
        for user_id in user_ids:
            profile = await db.get_user_profile(user_id)
            if profile:
                vip_statuses[user_id] = profile.get('is_vip', False)

    count = 0
    for note in notes_with_reminders:
        note['is_vip'] = vip_statuses.get(note['telegram_id'], False)
        add_reminder_to_scheduler(bot, note)
        count += 1
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {count} –∑–∞–º–µ—Ç–æ–∫ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.")