# handlers/admin.py
import asyncio
import logging
from aiogram import Router, F, types
from aiogram.filters import Command, Filter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.markdown import hbold, hcode, hitalic

from config import ADMIN_TELEGRAM_ID
import database_setup as db
from services.scheduler import scheduler, send_birthday_reminders
from inline_keyboards import get_admin_user_panel_keyboard, AdminAction, get_admin_users_list_keyboard, AdminUserNav
from services.tz_utils import format_datetime_for_user
from states import AdminStates

logger = logging.getLogger(__name__)
router = Router()


# --- –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ---
class IsAdmin(Filter):
    async def __call__(self, event: Message | CallbackQuery) -> bool:
        if not ADMIN_TELEGRAM_ID: return False
        return event.from_user.id == ADMIN_TELEGRAM_ID


router.message.filter(IsAdmin())
router.callback_query.filter(IsAdmin())


@router.message(Command("jobs"))
async def cmd_show_jobs(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ APScheduler."""
    jobs = scheduler.get_jobs()

    if not jobs:
        await message.answer("–í –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return

    response_lines = [f"{hbold('–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ:')}\n"]

    for job in jobs:
        run_date_local = job.next_run_time.astimezone(None)

        job_info = (
            f"‚ñ™Ô∏è {hbold('ID:')} {hcode(job.id)}\n"
            f"  - {hbold('–°—Ä–∞–±–æ—Ç–∞–µ—Ç:')} {hitalic(run_date_local.strftime('%Y-%m-%d %H:%M:%S'))}\n"
            f"  - {hbold('–§—É–Ω–∫—Ü–∏—è:')} {hcode(job.func.__name__)}"
        )
        response_lines.append(job_info)

    await message.answer("\n\n".join(response_lines), parse_mode="HTML")


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def _get_user_info_text_and_keyboard(target_user_id: int):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    user_profile = await db.get_user_profile(target_user_id)
    if not user_profile:
        return None, None

    user_timezone = user_profile.get('timezone', 'UTC')
    reg_date_local_str = format_datetime_for_user(user_profile['created_at'], user_timezone)
    is_vip = user_profile.get('is_vip', False)
    vip_status_text = "‚úÖ –î–∞" if is_vip else "‚ùå –ù–µ—Ç"

    info_text = [
        f"{hbold('üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')}",
        f"‚ñ™Ô∏è {hbold('ID')}: {hcode(target_user_id)}",
        f"‚ñ™Ô∏è {hbold('Username')}: @{user_profile.get('username', 'N/A')}",
        f"‚ñ™Ô∏è {hbold('–ò–º—è')}: {user_profile.get('first_name', 'N/A')}",
        f"‚ñ™Ô∏è {hbold('VIP-—Å—Ç–∞—Ç—É—Å')}: {vip_status_text}",
        f"‚ñ™Ô∏è {hbold('–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å')}: {hcode(user_timezone)}",
        f"‚ñ™Ô∏è {hbold('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')}: {hitalic(reg_date_local_str)}",
        f"‚ñ™Ô∏è {hbold('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è')}: {user_profile.get('daily_stt_recognitions_count', 0)}"
    ]

    keyboard = get_admin_user_panel_keyboard(target_user_id, is_vip)

    return "\n".join(info_text), keyboard


async def _display_users_list_page(message: Message, page: int = 1):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    users_per_page = 5
    users, total_users = await db.get_all_users_paginated(page=page, per_page=users_per_page)

    total_pages = (total_users + users_per_page - 1) // users_per_page
    if total_pages == 0: total_pages = 1

    text = f"üë• {hbold('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')} (–°—Ç—Ä. {page}/{total_pages}, –í—Å–µ–≥–æ: {total_users})"
    keyboard = get_admin_users_list_keyboard(users, page, total_pages)

    try:
        await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    except Exception:
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

@router.message(Command("users"))
async def cmd_users_list(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    await _display_users_list_page(message, page=1)


@router.callback_query(AdminUserNav.filter())
async def navigate_users_list_handler(callback: CallbackQuery, callback_data: AdminUserNav):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –ø–æ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    await _display_users_list_page(callback.message, page=callback_data.page)
    await callback.answer()


@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    try:
        target_user_id_str = message.text.split()[1]
        target_user_id = int(target_user_id_str)
    except (IndexError, ValueError):
        if message.reply_to_message:
            target_user_id = message.reply_to_message.from_user.id
        else:
            await message.reply(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:\n"
                "1. `/admin <ID>`\n"
                "2. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π `/admin`\n"
                "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/users` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞."
            )
            return

    text, keyboard = await _get_user_info_text_and_keyboard(target_user_id)
    if not text:
        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)


@router.callback_query(AdminAction.filter(F.action == 'show_info'))
async def show_user_info_handler(callback: CallbackQuery, callback_data: AdminAction):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞."""
    target_user_id = callback_data.target_user_id
    text, keyboard = await _get_user_info_text_and_keyboard(target_user_id)
    if not text:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(AdminAction.filter(F.action == 'toggle_vip'))
async def toggle_vip_status_handler(callback: CallbackQuery, callback_data: AdminAction):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ VIP-—Å—Ç–∞—Ç—É—Å–∞ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    target_user_id = callback_data.target_user_id
    new_vip_status = not bool(callback_data.current_vip_status)

    success = await db.set_user_vip_status(target_user_id, new_vip_status)

    if not success:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.", show_alert=True)
        return

    try:
        if new_vip_status:
            # --- –û–ë–ù–û–í–õ–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –û –í–´–î–ê–ß–ï VIP ---
            user_notification_text = (
                f"üéâ {hbold('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!')}\n\n"
                "–í–∞–º –ø—Ä–∏—Å–≤–æ–µ–Ω —Å—Ç–∞—Ç—É—Å üëë **VIP**!\n\n"
                "–¢–µ–ø–µ—Ä—å –¥–ª—è –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
                "‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫.\n"
                "‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–π.\n"
                "‚úÖ –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–µ—Å–ª–∏ –≤ –∑–∞–º–µ—Ç–∫–µ —É–∫–∞–∑–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞).\n"
                "‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞ —á–∞—Å –¥–æ —Å—Ä–æ–∫–∞).\n"
                "‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ª–æ–∂–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n\n"
                "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! –ò–∑—É—á–∏—Ç–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ `üë§ –ü—Ä–æ—Ñ–∏–ª—å` -> `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏`."
            )
            await callback.bot.send_message(target_user_id, user_notification_text, parse_mode="HTML")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ VIP.")
        else:
            # --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–†–ò –°–ù–Ø–¢–ò–ò VIP ---
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º VIP-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db.reset_user_vip_settings(target_user_id)

            user_notification_text = (
                f"‚ÑπÔ∏è {hbold('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞')}\n\n"
                "–í–∞—à VIP-—Å—Ç–∞—Ç—É—Å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
                "–¢–µ–ø–µ—Ä—å –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–µ–π—Å—Ç–≤—É—é—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã.\n\n"
                "–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            await callback.bot.send_message(target_user_id, user_notification_text, parse_mode="HTML")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–Ω—è—Ç–∏–∏ VIP –∏ —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

    except Exception as e:
        logger.warning(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ VIP-—Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}. "
            f"–í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û—à–∏–±–∫–∞: {e}"
        )

    status_text = "–≤—ã–¥–∞–Ω" if new_vip_status else "–∑–∞–±—Ä–∞–Ω"
    await callback.answer(f"‚úÖ VIP-—Å—Ç–∞—Ç—É—Å {status_text}! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.", show_alert=False)

    logger.info(
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –∏–∑–º–µ–Ω–∏–ª VIP-—Å—Ç–∞—Ç—É—Å –¥–ª—è "
        f"{target_user_id} –Ω–∞ {new_vip_status}"
    )

    new_text, new_keyboard = await _get_user_info_text_and_keyboard(target_user_id)
    if new_text:
        try:
            await callback.message.edit_text(new_text, reply_markup=new_keyboard, parse_mode="HTML")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: {e}")

@router.message(Command("test_bday"))
async def cmd_test_birthday_check(message: Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π."""
    await message.answer("‚è≥ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π...")
    await send_birthday_reminders(message.bot)
    await message.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ –∏ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")


@router.message(Command("broadcast"))
async def cmd_broadcast_start(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await state.set_state(AdminStates.awaiting_broadcast_message)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
        "–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ '–∫–∞–∫ –µ—Å—Ç—å', –≤–∫–ª—é—á–∞—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (HTML), —Ñ–æ—Ç–æ, —Å—Ç–∏–∫–µ—Ä—ã –∏ —Ç.–¥.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
    )


@router.message(AdminStates.awaiting_broadcast_message, Command("cancel"))
async def cmd_broadcast_cancel(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await state.clear()
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")


@router.message(AdminStates.awaiting_broadcast_message)
async def process_broadcast_message(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    await state.clear()

    # –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    all_users = await db.get_all_users_paginated(page=1, per_page=1_000_000)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_ids = [user['telegram_id'] for user in all_users[0]]

    if not user_ids:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    import asyncio
    asyncio.create_task(broadcast_to_users(message, user_ids))

    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


async def broadcast_to_users(source_message: Message, user_ids: list[int]):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤ Telegram.
    """
    total_users = len(user_ids)
    sent_count = 0
    failed_count = 0

    status_message = await source_message.bot.send_message(
        chat_id=source_message.from_user.id,
        text=f"‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å... (0/{total_users})"
    )

    # Telegram API –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç ~30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É.
    # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 25 —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç.
    for i, user_id in enumerate(user_ids):
        try:
            # message.copy_to() - —ç—Ç–æ —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            # —Å–æ –≤—Å–µ–º –µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, —Å—Ç–∏–∫–µ—Ä—ã, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
            await source_message.copy_to(chat_id=user_id)
            sent_count += 1
            logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            failed_count += 1
            logger.warning(f"–†–∞—Å—Å—ã–ª–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –û—à–∏–±–∫–∞: {e}")

        # –ü–∞—É–∑–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–∞–Ω–∞ –æ—Ç Telegram
        if (i + 1) % 25 == 0:
            await asyncio.sleep(1)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –∞–¥–º–∏–Ω–∞
            try:
                await status_message.edit_text(f"‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ... ({i + 1}/{total_users})")
            except Exception:
                pass  # –ï—Å–ª–∏ –∞–¥–º–∏–Ω —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞
    final_report = (
        f"üèÅ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}"
    )
    await status_message.edit_text(final_report)