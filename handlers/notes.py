# handlers/notes.py
import logging
from datetime import datetime

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.utils.markdown import hcode, hbold, hitalic

from config import MAX_NOTES_MVP, NOTES_PER_PAGE
from inline_keyboards import (
    get_notes_list_display_keyboard,  # –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞
    NoteAction,  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π CallbackFactory
    PageNavigation,  # –ù–æ–≤—ã–π CallbackFactory –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    get_main_menu_keyboard,
    get_note_confirmation_keyboard,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç—É
    get_note_view_actions_keyboard
)
import database_setup as db
from states import NoteCreationStates, NoteNavigationStates

logger = logging.getLogger(__name__)
router = Router()


# --- FSM HANDLERS FOR NOTE CREATION (Confirm/Cancel) ---
@router.callback_query(NoteCreationStates.awaiting_confirmation, F.data == "confirm_save_note")
async def confirm_save_note_fsm_handler(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM."""
    user_data = await state.get_data()
    telegram_id = callback_query.from_user.id

    active_notes_count = await db.count_active_notes_for_user(telegram_id)
    if active_notes_count >= MAX_NOTES_MVP:
        await callback_query.message.edit_text(
            f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {MAX_NOTES_MVP} –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è MVP.\n"
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö.",
            reply_markup=None
        )
        await callback_query.answer("–õ–∏–º–∏—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç", show_alert=True)
        await state.clear()
        await callback_query.message.answer("–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=get_main_menu_keyboard())
        return

    original_stt_text = user_data.get("original_stt_text")
    corrected_text_to_save = user_data.get("corrected_text_for_save")
    llm_analysis_data = user_data.get("llm_analysis_json")
    audio_file_id = user_data.get("original_audio_telegram_file_id")
    note_creation_time = user_data.get("voice_message_date")

    due_date_obj = None
    if llm_analysis_data and "dates_times" in llm_analysis_data and llm_analysis_data["dates_times"]:
        first_date_entry = llm_analysis_data["dates_times"][0]
        if "absolute_datetime_start" in first_date_entry:
            try:
                due_date_str = first_date_entry["absolute_datetime_start"]
                if due_date_str.endswith('Z'):
                    due_date_str = due_date_str[:-1] + "+00:00"
                due_date_obj = datetime.fromisoformat(due_date_str)
            except (ValueError, TypeError) as e:
                logger.warning(f"Could not parse due_date '{first_date_entry['absolute_datetime_start']}': {e}")

    note_id = await db.create_note(
        telegram_id=telegram_id,
        original_stt_text=original_stt_text,
        corrected_text=corrected_text_to_save,
        llm_analysis_json=llm_analysis_data,
        original_audio_telegram_file_id=audio_file_id,
        note_taken_at=note_creation_time,
        due_date=due_date_obj
    )

    if note_id:
        await callback_query.message.edit_text(
            f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ #{note_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n{hcode(corrected_text_to_save)}",
            parse_mode="HTML", reply_markup=None
        )
    else:
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏.", reply_markup=None
        )

    await callback_query.answer()
    await state.clear()
    await callback_query.message.answer("–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=get_main_menu_keyboard())


@router.callback_query(NoteCreationStates.awaiting_confirmation, F.data == "cancel_save_note")
async def cancel_save_note_fsm_handler(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM."""
    await callback_query.message.edit_text("üö´ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
    await callback_query.answer()
    await state.clear()
    await callback_query.message.answer("–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=get_main_menu_keyboard())


# --- NOTES LIST, PAGINATION, VIEW, DELETE ---

async def _display_notes_list_page(
        target_message: types.Message,  # –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –≤ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–º
        telegram_id: int,
        page_num: int,
        state: FSMContext
):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–º–µ—Ç–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
    await state.set_state(NoteNavigationStates.browsing_notes)
    await state.update_data(current_notes_page=page_num)

    notes_on_page, total_notes_count = await db.get_paginated_notes_for_user(
        telegram_id=telegram_id,
        page=page_num,
        per_page=NOTES_PER_PAGE,
        archived=False
    )

    total_pages = (total_notes_count + NOTES_PER_PAGE - 1) // NOTES_PER_PAGE
    if total_pages == 0 and total_notes_count == 0: total_pages = 1  # –ï—Å–ª–∏ –∑–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç, —Ç–æ 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞ "–ø—É—Å—Ç–æ"
    if page_num > total_pages and total_pages > 0:  # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è)
        page_num = total_pages
        await state.update_data(current_notes_page=page_num)
        notes_on_page, total_notes_count = await db.get_paginated_notes_for_user(
            telegram_id=telegram_id, page=page_num, per_page=NOTES_PER_PAGE, archived=False
        )

    text_content: str
    if not notes_on_page and page_num == 1:
        text_content = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫."
    elif not notes_on_page and page_num > 1:  # –ú–æ–≥–ª–æ —Å–ª—É—á–∏—Ç—å—Å—è, –µ—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        text_content = f"–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num} –∑–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥."
    else:
        text_content = f"üìù {hbold(f'–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ (–°—Ç—Ä. {page_num}/{total_pages}):')}"
        # –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–æ–∫ –±—É–¥–µ—Ç –≤ –∫–Ω–æ–ø–∫–∞—Ö

    keyboard = get_notes_list_display_keyboard(notes_on_page, page_num, total_pages)

    try:
        await target_message.edit_text(text_content, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (—Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ—Ç –ø—Ä–∞–≤ –∏ —Ç.–¥.)
        logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫, –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ: {e}")
        await target_message.answer(text_content, reply_markup=keyboard, parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏" –∏ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@router.callback_query(PageNavigation.filter(F.target == "notes"))
async def notes_list_paginated_handler(
        callback_query: types.CallbackQuery,
        callback_data: PageNavigation,
        state: FSMContext
):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    await callback_query.answer()  # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await _display_notes_list_page(
        target_message=callback_query.message,
        telegram_id=callback_query.from_user.id,
        page_num=callback_data.page,
        state=state
    )


# –ö–æ–º–∞–Ω–¥–∞ /my_notes –¥–ª—è –≤—ã–∑–æ–≤–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫
@router.message(Command("my_notes"))
async def cmd_my_notes(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫ (–Ω–∞—á–∏–Ω–∞–µ–º —Å 1-–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)."""
    await _display_notes_list_page(
        target_message=message,
        telegram_id=message.from_user.id,
        page_num=1,
        state=state
    )


@router.callback_query(F.data == "main_menu_from_notes")  # –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫
async def back_to_main_menu_from_notes_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫."""
    await state.clear()
    # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ —Å—Ç–∞—Ä–æ–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    try:
        await callback_query.message.edit_text(
            "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",  # –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
            reply_markup=get_main_menu_keyboard()
        )
    except Exception:
        await callback_query.message.answer(
            "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            reply_markup=get_main_menu_keyboard()
        )
    await callback_query.answer()


@router.callback_query(NoteAction.filter(F.action == "view"))
async def view_note_detail_handler(
        callback_query: types.CallbackQuery,
        callback_data: NoteAction,
        state: FSMContext
):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–µ."""
    note_id = callback_data.note_id
    current_page = callback_data.page  # –°—Ç—Ä–∞–Ω–∏—Ü–∞, —Å –∫–æ—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à–µ–ª
    telegram_id = callback_query.from_user.id

    await state.set_state(NoteNavigationStates.browsing_notes)  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    await state.update_data(current_notes_page=current_page)

    note = await db.get_note_by_id(note_id, telegram_id)

    if not note:
        await callback_query.answer("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–º–µ—Ç–æ–∫ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await _display_notes_list_page(callback_query.message, telegram_id, current_page, state)
        return

    note_taken_at_utc = note.get('note_taken_at') or note['created_at']
    note_date_str = note_taken_at_utc.strftime("%d.%m.%Y %H:%M UTC")

    text = f"üìå {hbold(f'–ó–∞–º–µ—Ç–∫–∞ #{note['note_id']}')}\n\n"
    text += f"–°–æ–∑–¥./–ó–∞–ø–∏—Å–∞–Ω–∞: {hitalic(note_date_str)}\n"
    if note.get('updated_at') and note['updated_at'] != note['created_at']:  # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–ª–∞—Å—å
        text += f"–û–±–Ω–æ–≤–ª–µ–Ω–∞: {hitalic(note['updated_at'].strftime('%d.%m.%Y %H:%M UTC'))}\n"

    if note.get('due_date'):
        due_date_str = note['due_date'].strftime("%d.%m.%Y %H:%M UTC")
        text += f"–°—Ä–æ–∫ –¥–æ: {hitalic(due_date_str)}\n"

    text += f"\n{hbold('–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:')}\n{hcode(note['corrected_text'])}\n"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ
    if note.get('original_stt_text') and note['original_stt_text'] != note['corrected_text']:
        text += f"\n{hbold('–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç (STT):')}\n{hcode(note['original_stt_text'])}\n"

    # –í—ã–≤–æ–¥ JSON –∞–Ω–∞–ª–∏–∑–∞ LLM (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
    # llm_data = note.get('llm_analysis_json')
    # if llm_data:
    #     try:
    #         formatted_llm_data = json.dumps(llm_data, indent=2, ensure_ascii=False)
    #         text += f"\n{hbold('AI –ê–Ω–∞–ª–∏–∑:')}\n<pre><code class=\"language-json\">{formatted_llm_data}</code></pre>\n" # –î–ª—è HTML
    #     except Exception:
    #         text += f"\n{hbold('AI –ê–Ω–∞–ª–∏–∑ (—Å—ã—Ä–æ–π):')}\n{hcode(str(llm_data))}\n"

    await callback_query.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_note_view_actions_keyboard(note['note_id'], current_page)
    )
    await callback_query.answer()


@router.callback_query(NoteAction.filter(F.action == "delete"))
async def delete_note_action_handler(
        callback_query: types.CallbackQuery,
        callback_data: NoteAction,
        state: FSMContext
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ (–∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —Å–ø–∏—Å–∫–∞)."""
    note_id_to_delete = callback_data.note_id
    page_to_return_to = callback_data.page
    telegram_id = callback_query.from_user.id

    if note_id_to_delete is None:
        await callback_query.answer("–û—à–∏–±–∫–∞: ID –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    deleted = await db.delete_note(note_id_to_delete, telegram_id)

    if deleted:
        await callback_query.answer("üóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
        # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫, –æ—Å—Ç–∞–≤–∞—è—Å—å –Ω–∞ —Ç–æ–π –∂–µ (–∏–ª–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π) —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        await _display_notes_list_page(callback_query.message, telegram_id, page_to_return_to, state)
    else:
        await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —É–¥–∞–ª–µ–Ω–∞).", show_alert=True)
        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        await _display_notes_list_page(callback_query.message, telegram_id, page_to_return_to, state)