# handlers/settings.py
import logging
from datetime import time, datetime

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.utils.markdown import hbold, hcode

import database_setup as db
from inline_keyboards import (
    get_settings_menu_keyboard,
    get_timezone_selection_keyboard,
    get_reminder_time_keyboard,
    SettingsAction,
    TimezoneAction
)
from services.tz_utils import ALL_PYTZ_TIMEZONES
from states import ProfileSettingsStates

# handlers.profile –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å
# from handlers.profile import user_profile_display_handler

logger = logging.getLogger(__name__)
router = Router()


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ ---
async def get_settings_text_and_keyboard(telegram_id: int) -> tuple[str, types.InlineKeyboardMarkup] | tuple[
    None, None]:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    user_profile = await db.get_user_profile(telegram_id)
    if not user_profile:
        return None, None

    current_tz = user_profile.get('timezone', 'UTC')
    current_rem_time = user_profile.get('default_reminder_time')
    if isinstance(current_rem_time, time):
        current_rem_time_str = current_rem_time.strftime('%H:%M')
    else:
        current_rem_time_str = "09:00"  # Fallback

    text = (
        f"{hbold('‚öôÔ∏è –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')}\n\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞.\n\n"
        f"‚ñ™Ô∏è –¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {hcode(current_tz)}\n"
        f"‚ñ™Ô∏è –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {hcode(current_rem_time_str)}\n"
    )
    keyboard = get_settings_menu_keyboard()
    return text, keyboard


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---

@router.callback_query(SettingsAction.filter(F.action == "go_to_main"))
async def show_main_settings_handler(callback_query: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    await state.clear()

    text, keyboard = await get_settings_text_and_keyboard(callback_query.from_user.id)
    if not text:
        await callback_query.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start.", show_alert=True)
        return

    try:
        await callback_query.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.warning(f"Could not edit settings message, sending new one: {e}")
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.answer(
            text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

    await callback_query.answer()


# --- –†–∞–∑–¥–µ–ª "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å" ---

@router.callback_query(SettingsAction.filter(F.action == "go_to_timezone"))
async def show_timezone_selection_handler(callback_query: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞."""
    await state.clear()
    text = (
        f"{hbold('üïí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞')}\n\n"
        "–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –±–æ—Ç–µ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é."
    )
    await callback_query.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_timezone_selection_keyboard()
    )
    await callback_query.answer()


@router.callback_query(TimezoneAction.filter(F.action == 'set'))
async def set_timezone_from_button_handler(callback_query: CallbackQuery, callback_data: TimezoneAction,
                                           state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ –∫–Ω–æ–ø–∫–µ."""
    telegram_id = callback_query.from_user.id

    success = await db.set_user_timezone(telegram_id, callback_data.tz_name)
    if success:
        await callback_query.answer(f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {callback_data.tz_name}", show_alert=True)
    else:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞.", show_alert=True)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await show_main_settings_handler(callback_query, state)


@router.callback_query(TimezoneAction.filter(F.action == 'manual_input'))
async def manual_timezone_input_handler(callback_query: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞."""
    await state.set_state(ProfileSettingsStates.awaiting_timezone)
    text = (
        f"{hbold('‚å®Ô∏è –†—É—á–Ω–æ–π –≤–≤–æ–¥ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞')}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `Continent/City` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `Europe/Moscow`).\n\n"
        f"–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
    )
    await callback_query.message.edit_text(text, parse_mode="HTML", reply_markup=get_timezone_selection_keyboard())
    await callback_query.answer("–û–∂–∏–¥–∞—é –≤–∞—à –≤–≤–æ–¥...")


@router.message(ProfileSettingsStates.awaiting_timezone, F.text)
async def process_manual_timezone_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞."""
    timezone_name = message.text.strip()

    if timezone_name not in ALL_PYTZ_TIMEZONES:
        await message.reply(
            f"‚ùå –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å {hcode(timezone_name)} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `Europe/Berlin`) –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞."
        )
        return

    telegram_id = message.from_user.id
    await db.set_user_timezone(telegram_id, timezone_name)
    await state.clear()

    await message.answer(f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {timezone_name}")

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
    # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–µ–π–∫–æ–≤—ã–π –∫–æ–ª–±—ç–∫, –∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    text, keyboard = await get_settings_text_and_keyboard(telegram_id)
    if text:
        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)


# --- –†–∞–∑–¥–µ–ª "–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π" ---

@router.callback_query(SettingsAction.filter(F.action == "go_to_reminders"))
async def show_reminder_time_handler(callback_query: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    text = (
        f"{hbold('‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')}\n\n"
        "–≠—Ç–æ –≤—Ä–µ–º—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤ —Ç–µ–∫—Å—Ç–µ –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∑–∞–≤—Ç—Ä–∞' –∏–ª–∏ '15 –∏—é–ª—è')."
    )
    await callback_query.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_reminder_time_keyboard()
    )
    await callback_query.answer()


@router.callback_query(SettingsAction.filter(F.action == "set_rem_time"))
async def set_reminder_time_from_button_handler(callback: CallbackQuery, callback_data: SettingsAction,
                                                state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ."""
    time_str = callback_data.value.replace('-', ':')

    try:
        time_obj = datetime.strptime(time_str, '%H:%M').time()
        success = await db.set_user_default_reminder_time(callback.from_user.id, time_obj)
        if success:
            await callback.answer(f"‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}", show_alert=True)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏.", show_alert=True)
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.", show_alert=True)

    await show_main_settings_handler(callback, state)


@router.callback_query(SettingsAction.filter(F.action == "manual_rem_time"))
async def manual_reminder_time_handler(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    await state.set_state(ProfileSettingsStates.awaiting_reminder_time)
    text = (
        f"{hbold('‚å®Ô∏è –†—É—á–Ω–æ–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏')}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ß–ß:–ú–ú` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `09:30` –∏–ª–∏ `22:00`).\n\n"
        f"–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
    )
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_reminder_time_keyboard())
    await callback.answer("–û–∂–∏–¥–∞—é –≤–∞—à –≤–≤–æ–¥...")


@router.message(ProfileSettingsStates.awaiting_reminder_time, F.text)
async def process_manual_reminder_time_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    try:
        time_obj = datetime.strptime(message.text.strip(), '%H:%M').time()
        telegram_id = message.from_user.id
        await db.set_user_default_reminder_time(telegram_id, time_obj)
        await state.clear()
        await message.answer(f"‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {message.text.strip()}.")

        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–µ–π–∫–æ–≤—ã–π –∫–æ–ª–±—ç–∫, –∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        text, keyboard = await get_settings_text_and_keyboard(telegram_id)
        if text:
            await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ß–ß:–ú–ú`, –Ω–∞–ø—Ä–∏–º–µ—Ä, `09:30`.")
        return