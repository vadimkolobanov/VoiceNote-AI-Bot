# handlers/settings.py
import logging
from datetime import time, datetime

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.utils.markdown import hbold, hcode, hitalic

from alice_webhook import get_link_code_for_user

import database_setup as db
from config import ADMIN_TELEGRAM_ID
from inline_keyboards import (
    get_settings_menu_keyboard,
    get_timezone_selection_keyboard,
    get_reminder_time_keyboard,
    get_pre_reminder_keyboard,
    get_request_vip_keyboard,
    SettingsAction,
    TimezoneAction,
    get_main_menu_keyboard # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
)
from services.tz_utils import ALL_PYTZ_TIMEZONES
from states import ProfileSettingsStates

logger = logging.getLogger(__name__)
router = Router()


def format_pre_reminder_minutes(minutes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–∏–Ω—É—Ç—ã –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç."""
    if minutes == 0:
        return "–û—Ç–∫–ª—é—á–µ–Ω—ã"
    if minutes < 60:
        return f"–ó–∞ {minutes} –º–∏–Ω."
    hours = minutes // 60
    return f"–ó–∞ {hours} —á."


async def get_settings_text_and_keyboard(telegram_id: int) -> tuple[str, types.InlineKeyboardMarkup] | tuple[
    None, None]:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    user_profile = await db.get_user_profile(telegram_id)
    if not user_profile:
        return None, None

    current_tz = user_profile.get('timezone', 'UTC')
    current_rem_time = user_profile.get('default_reminder_time')
    current_pre_rem_minutes = user_profile.get('pre_reminder_minutes', 60)
    is_vip = user_profile.get('is_vip', False)
    digest_enabled = user_profile.get('daily_digest_enabled', True)
    is_alice_linked = bool(user_profile.get('alice_user_id'))

    if isinstance(current_rem_time, time):
        current_rem_time_str = current_rem_time.strftime('%H:%M')
    else:
        current_rem_time_str = "09:00"

    text_parts = [
        f"{hbold('‚öôÔ∏è –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')}\n",
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞.\n",
        f"‚ñ™Ô∏è –¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {hcode(current_tz)}",
        f"‚ñ™Ô∏è –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {hcode(current_rem_time_str)} (‚≠ê VIP)",
        f"‚ñ™Ô∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {hbold(format_pre_reminder_minutes(current_pre_rem_minutes))} (‚≠ê VIP)",
    ]
    if is_vip:
        digest_status = "–í–∫–ª—é—á–µ–Ω–∞" if digest_enabled else "–í—ã–∫–ª—é—á–µ–Ω–∞"
        text_parts.append(f"‚ñ™Ô∏è –£—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–æ–¥–∫–∞: {hbold(digest_status)} (‚≠ê VIP)")

    text = "\n".join(text_parts)
    keyboard = get_settings_menu_keyboard(
        daily_digest_enabled=digest_enabled if is_vip else False,
        is_alice_linked=is_alice_linked
    )
    return text, keyboard


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---

@router.callback_query(SettingsAction.filter(F.action == "go_to_main"))
async def show_main_settings_handler(callback_query: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    await state.clear()

    text, keyboard = await get_settings_text_and_keyboard(callback_query.from_user.id)
    if not text:
        await callback_query.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start.", show_alert=True)
        return

    try:
        await callback_query.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
    except Exception:
        await callback_query.message.answer(
            text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

    await callback_query.answer()

# --- –ù–û–í–´–ô –•–ï–ù–î–õ–ï–† –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞ ---
@router.callback_query(F.data == "go_to_main_menu")
async def go_to_main_menu_from_anywhere_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("üè† –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard())
    await callback.answer()


# --- –†–∞–∑–¥–µ–ª "–£—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–æ–¥–∫–∞" (VIP) ---
@router.callback_query(SettingsAction.filter(F.action == "toggle_digest"))
async def toggle_daily_digest_handler(callback: CallbackQuery, state: FSMContext):
    user_profile = await db.get_user_profile(callback.from_user.id)
    if not user_profile.get('is_vip'):
        await callback.answer("‚≠ê –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
        return

    current_status = user_profile.get('daily_digest_enabled', True)
    new_status = not current_status
    await db.set_user_daily_digest_status(callback.from_user.id, new_status)

    status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
    await callback.answer(f"‚úÖ –£—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–æ–¥–∫–∞ {status_text}", show_alert=False)
    await show_main_settings_handler(callback, state)


# --- –†–∞–∑–¥–µ–ª "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å" (–¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º) ---
@router.callback_query(SettingsAction.filter(F.action == "go_to_timezone"))
async def show_timezone_selection_handler(callback_query: CallbackQuery, state: FSMContext):
    await state.clear()
    text = (
        f"{hbold('üïí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞')}\n\n"
        "–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –±–æ—Ç–µ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é."
    )
    await callback_query.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_timezone_selection_keyboard()
    )
    await callback_query.answer()


@router.callback_query(TimezoneAction.filter(F.action == 'set'))
async def set_timezone_from_button_handler(callback_query: CallbackQuery, callback_data: TimezoneAction,
                                           state: FSMContext):
    telegram_id = callback_query.from_user.id

    success = await db.set_user_timezone(telegram_id, callback_data.tz_name)
    if success:
        await callback_query.answer(f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {callback_data.tz_name}", show_alert=True)
    else:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞.", show_alert=True)

    await show_main_settings_handler(callback_query, state)


@router.callback_query(TimezoneAction.filter(F.action == 'manual_input'))
async def manual_timezone_input_handler(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(ProfileSettingsStates.awaiting_timezone)
    text = (
        f"{hbold('‚å®Ô∏è –†—É—á–Ω–æ–π –≤–≤–æ–¥ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞')}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `Continent/City` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `Europe/Moscow`).\n\n"
        f"–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
    )
    await callback_query.message.edit_text(text, parse_mode="HTML", reply_markup=get_timezone_selection_keyboard())
    await callback_query.answer("–û–∂–∏–¥–∞—é –≤–∞—à –≤–≤–æ–¥...")


@router.message(ProfileSettingsStates.awaiting_timezone, F.text)
async def process_manual_timezone_handler(message: types.Message, state: FSMContext):
    timezone_name = message.text.strip()

    if timezone_name not in ALL_PYTZ_TIMEZONES:
        await message.reply(
            f"‚ùå –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å {hcode(timezone_name)} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `Europe/Berlin`) –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞."
        )
        return

    telegram_id = message.from_user.id
    await db.set_user_timezone(telegram_id, timezone_name)
    await state.clear()

    await message.answer(f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {timezone_name}")

    text, keyboard = await get_settings_text_and_keyboard(telegram_id)
    if text:
        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)


# --- –†–∞–∑–¥–µ–ª "–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π" (VIP) ---

@router.callback_query(SettingsAction.filter(F.action == "go_to_reminders"))
async def show_reminder_time_handler(callback_query: CallbackQuery):
    user_profile = await db.get_user_profile(callback_query.from_user.id)
    if not user_profile.get('is_vip'):
        text = (
            f"‚≠ê {hbold('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')}\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è **VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**.\n\n"
            "–û–Ω–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —É–¥–æ–±–Ω–æ–µ –≤–∞–º –≤—Ä–µ–º—è, "
            "–¥–∞–∂–µ –µ—Å–ª–∏ –≤—ã —Å–∫–∞–∑–∞–ª–∏ —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∑–∞–≤—Ç—Ä–∞').\n\n"
            "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π VIP-–¥–æ—Å—Ç—É–ø?"
        )
        await callback_query.message.edit_text(text, parse_mode="HTML", reply_markup=get_request_vip_keyboard())
        await callback_query.answer()
        return

    text = (
        f"{hbold('‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')}\n\n"
        "–≠—Ç–æ –≤—Ä–µ–º—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤ —Ç–µ–∫—Å—Ç–µ –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞."
    )
    await callback_query.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_reminder_time_keyboard()
    )
    await callback_query.answer()


@router.callback_query(SettingsAction.filter(F.action == "set_rem_time"))
async def set_reminder_time_from_button_handler(callback: CallbackQuery, callback_data: SettingsAction,
                                                state: FSMContext):
    time_str = callback_data.value.replace('-', ':')

    try:
        time_obj = datetime.strptime(time_str, '%H:%M').time()
        success = await db.set_user_default_reminder_time(callback.from_user.id, time_obj)
        if success:
            await callback.answer(f"‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}", show_alert=False)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏.", show_alert=True)
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.", show_alert=True)

    await show_main_settings_handler(callback, state)


@router.callback_query(SettingsAction.filter(F.action == "manual_rem_time"))
async def manual_reminder_time_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ProfileSettingsStates.awaiting_reminder_time)
    text = (
        f"{hbold('‚å®Ô∏è –†—É—á–Ω–æ–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏')}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ß–ß:–ú–ú` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `09:30` –∏–ª–∏ `22:00`).\n\n"
        f"–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
    )
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_reminder_time_keyboard())
    await callback.answer("–û–∂–∏–¥–∞—é –≤–∞—à –≤–≤–æ–¥...")


@router.message(ProfileSettingsStates.awaiting_reminder_time, F.text)
async def process_manual_reminder_time_handler(message: types.Message, state: FSMContext):
    try:
        time_obj = datetime.strptime(message.text.strip(), '%H:%M').time()
        telegram_id = message.from_user.id
        await db.set_user_default_reminder_time(telegram_id, time_obj)
        await state.clear()
        await message.answer(f"‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {message.text.strip()}.")

        text, keyboard = await get_settings_text_and_keyboard(telegram_id)
        if text:
            await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ß–ß:–ú–ú`, –Ω–∞–ø—Ä–∏–º–µ—Ä, `09:30`.")
        return


# --- –†–∞–∑–¥–µ–ª "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è" (VIP) ---

@router.callback_query(SettingsAction.filter(F.action == "go_to_pre_reminders"))
async def show_pre_reminder_handler(callback: CallbackQuery):
    user_profile = await db.get_user_profile(callback.from_user.id)
    if not user_profile.get('is_vip'):
        text = (
            f"‚≠ê {hbold('–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')}\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è **VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**.\n\n"
            "–û–Ω–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞—Ä–∞–Ω–µ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞ —á–∞—Å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞), —á—Ç–æ–±—ã –≤—ã —Ç–æ—á–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—ã–ª–∏.\n\n"
            "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π VIP-–¥–æ—Å—Ç—É–ø?"
        )
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_request_vip_keyboard())
        await callback.answer()
        return

    current_minutes = user_profile.get('pre_reminder_minutes', 60)
    text = (
        f"{hbold('üîî –ü—Ä–µ–¥-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∑–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—Ä–æ–∫–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n\n"
        f"–¢–µ–∫—É—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {hbold(format_pre_reminder_minutes(current_minutes))}"
    )
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_pre_reminder_keyboard()
    )
    await callback.answer()


@router.callback_query(SettingsAction.filter(F.action == "set_pre_rem"))
async def set_pre_reminder_handler(callback: CallbackQuery, callback_data: SettingsAction, state: FSMContext):
    try:
        minutes = int(callback_data.value)
        success = await db.set_user_pre_reminder_minutes(callback.from_user.id, minutes)
        if success:
            await callback.answer(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {format_pre_reminder_minutes(minutes)}", show_alert=False)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.", show_alert=True)
    except (ValueError, TypeError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.", show_alert=True)

    await show_main_settings_handler(callback, state)


# --- –•–ï–ù–î–õ–ï–†: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ VIP ---

@router.callback_query(SettingsAction.filter(F.action == "request_vip"))
async def request_vip_handler(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not ADMIN_TELEGRAM_ID:
        await callback.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)
        return

    user = callback.from_user
    username = f"@{user.username}" if user.username else "N/A"

    admin_text = (
        f"‚ÄºÔ∏è {hbold('–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ VIP-–¥–æ—Å—Ç—É–ø!')}\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {hbold(user.full_name)}\n"
        f"Username: {hitalic(username)}\n"
        f"ID: {hcode(user.id)}\n\n"
        f"–ß—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å VIP, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π `/admin` –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `{hcode(f'/admin {user.id}')}`."
    )

    try:
        await callback.bot.send_message(ADMIN_TELEGRAM_ID, admin_text, parse_mode="HTML")
        await db.log_user_action(user.id, 'request_vip')
        await callback.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! –û–Ω —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –µ–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                              show_alert=True)

        await show_main_settings_handler(callback, state)

    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ VIP –æ—Ç {user.id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_TELEGRAM_ID}: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


# --- –ù–û–í–´–ô –•–ï–ù–î–õ–ï–† –î–õ–Ø –ü–†–ò–í–Ø–ó–ö–ò –ê–õ–ò–°–´ ---
@router.callback_query(SettingsAction.filter(F.action == "link_alice"))
async def link_alice_handler(callback: CallbackQuery, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ –Ø–Ω–¥–µ–∫—Å.–ê–ª–∏—Å–µ –ø–æ –∫–Ω–æ–ø–∫–µ."""
    telegram_id = callback.from_user.id

    user_profile = await db.get_user_profile(telegram_id)
    if user_profile and user_profile.get('alice_user_id'):
        await callback.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω.", show_alert=True)
        await show_main_settings_handler(callback, state)
        return

    code = await get_link_code_for_user(telegram_id)

    response_text = (
        f"üóùÔ∏è {hbold('–ü—Ä–∏–≤—è–∑–∫–∞ –∫ –Ø–Ω–¥–µ–∫—Å.–ê–ª–∏—Å–µ')}\n\n"
        f"–ß—Ç–æ–±—ã —è –º–æ–≥–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –ê–ª–∏—Å—ã, —Å–∫–∞–∂–∏—Ç–µ –µ–π —Å–ª–µ–¥—É—é—â—É—é —Ñ—Ä–∞–∑—É:\n\n"
        f"üó£Ô∏è {hitalic('–ê–ª–∏—Å–∞, –ø–æ–ø—Ä–æ—Å–∏ VoiceNote –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥')} {hcode(code)}\n\n"
        f"–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç. –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –µ–≥–æ –Ω–∏–∫–æ–º—É."
    )

    await callback.message.answer(response_text, parse_mode="HTML")
    await callback.answer("–ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ —á–∞—Ç.", show_alert=True)