# handlers/birthdays.py
import logging
import re
from datetime import datetime
import io

from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import hbold, hitalic, hcode

import database_setup as db
from config import MAX_NOTES_MVP
from inline_keyboards import (
    get_birthdays_menu_keyboard,
    get_birthdays_list_keyboard,
    BirthdayAction,
    PageNavigation,
    get_main_menu_keyboard
)
from states import BirthdayStates

logger = logging.getLogger(__name__)
router = Router()


async def show_birthdays_list(event: types.Message | types.CallbackQuery, state: FSMContext, page: int = 1):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π."""
    await state.clear()

    if isinstance(event, types.Message):
        user_id = event.from_user.id
        message = event
    else:  # –ï—Å–ª–∏ —ç—Ç–æ CallbackQuery
        user_id = event.from_user.id
        message = event.message

    user_profile = await db.get_user_profile(user_id)
    is_vip = user_profile.get('is_vip', False)

    birthdays, total_count = await db.get_birthdays_for_user(user_id, page=page, per_page=5)
    total_pages = (total_count + 4) // 5
    if total_pages == 0: total_pages = 1

    if total_count == 0:
        text = f"{hbold('üéÇ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è')}\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞—Ç. –î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –ø–µ—Ä–≤—É—é!"
    else:
        limit_str = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ" if is_vip else f"{MAX_NOTES_MVP}"
        text = f"{hbold('üéÇ –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è')} ({total_count}/{limit_str})"

    list_kb = get_birthdays_list_keyboard(birthdays, page, total_pages, user_id)
    menu_kb = get_birthdays_menu_keyboard(is_vip, total_count)

    combined_kb_builder = InlineKeyboardBuilder()
    if birthdays:
        for row in list_kb.inline_keyboard:
            combined_kb_builder.row(*row)
    for row in menu_kb.inline_keyboard:
        combined_kb_builder.row(*row)

    try:
        if isinstance(event, CallbackQuery):
            await message.edit_text(text, parse_mode="HTML", reply_markup=combined_kb_builder.as_markup())
            await event.answer()
        else:
            await message.answer(text, parse_mode="HTML", reply_markup=combined_kb_builder.as_markup())
    except Exception as e:
        logger.warning(f"Could not edit birthdays list, sending new message: {e}")
        await message.answer(text, parse_mode="HTML", reply_markup=combined_kb_builder.as_markup())


@router.callback_query(PageNavigation.filter(F.target == "birthdays"))
async def birthdays_list_handler(callback: CallbackQuery, callback_data: PageNavigation, state: FSMContext):
    await show_birthdays_list(callback, state, page=callback_data.page)


@router.callback_query(BirthdayAction.filter(F.action == "add_manual"))
async def add_birthday_manual_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è."""
    await state.set_state(BirthdayStates.awaiting_person_name)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞, —á–µ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>–ú–∞–º–∞</b> –∏–ª–∏ <b>–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤</b>).\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.",
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(BirthdayStates.awaiting_person_name, Command("cancel"))
async def cancel_birthday_add(message: types.Message, state: FSMContext):
    await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await show_birthdays_list(message, state)


@router.message(BirthdayStates.awaiting_person_name, F.text)
async def process_person_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É."""
    await state.update_data(person_name=message.text)
    await state.set_state(BirthdayStates.awaiting_birth_date)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è {hbold(message.text)}.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <code>–î–î.–ú–ú.–ì–ì–ì–ì</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>25.12.1980</code>) –∏–ª–∏ <code>–î–î.–ú–ú</code>, –µ—Å–ª–∏ –≥–æ–¥ –Ω–µ –≤–∞–∂–µ–Ω.",
        parse_mode="HTML"
    )


def parse_date(date_str: str) -> tuple[int, int, int | None] | None:
    """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–¥–µ–Ω—å, –º–µ—Å—è—Ü, –≥–æ–¥) –∏–ª–∏ None."""
    date_str = date_str.strip()
    match_full = re.fullmatch(r"(\d{1,2})\.(\d{1,2})\.(\d{4})", date_str)
    if match_full:
        day, month, year = map(int, match_full.groups())
        try:
            datetime(year, month, day)
            return day, month, year
        except ValueError:
            return None

    match_short = re.fullmatch(r"(\d{1,2})\.(\d{1,2})", date_str)
    if match_short:
        day, month = map(int, match_short.groups())
        try:
            datetime(2000, month, day)
            return day, month, None
        except ValueError:
            return None

    return None


@router.message(BirthdayStates.awaiting_birth_date, F.text)
async def process_birth_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å."""
    parsed_date = parse_date(message.text)
    if not parsed_date:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–î–î.–ú–ú.–ì–ì–ì–ì</code> –∏–ª–∏ <code>–î–î.–ú–ú</code>.",
            parse_mode="HTML")
        return

    day, month, year = parsed_date
    user_data = await state.get_data()
    person_name = user_data.get("person_name")

    bday_record = await db.add_birthday(message.from_user.id, person_name, day, month, year)

    if bday_record:
        await db.log_user_action(message.from_user.id, 'add_birthday_manual',
                                 metadata={'birthday_id': bday_record['id']})

    await message.answer(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è {hbold(person_name)} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.",
                         parse_mode="HTML")

    await state.clear()
    await show_birthdays_list(message, state)


@router.callback_query(BirthdayAction.filter(F.action == "delete"))
async def delete_birthday_handler(callback: CallbackQuery, callback_data: BirthdayAction, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è."""
    success = await db.delete_birthday(callback_data.birthday_id, callback.from_user.id)
    if success:
        await callback.answer("üóëÔ∏è –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.", show_alert=False)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", show_alert=True)

    await show_birthdays_list(callback, state, page=callback_data.page)


@router.callback_query(BirthdayAction.filter(F.action == "import_file"))
async def import_file_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
    await state.set_state(BirthdayStates.awaiting_import_file)
    text = (
        f"–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (`.txt`) —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è.\n\n"
        f"{hbold('–í–∞–∂–Ω–æ:')} –∫–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"<code>–ò–º—è - –î–î.–ú–ú.–ì–ì–ì–ì</code>\n\n"
        f"{hbold('–ü—Ä–∏–º–µ—Ä:')}\n"
        f"<code>–ú–∞–º–∞ - 28.05.1976\n"
        f"–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ - 13.06.1977\n"
        f"–ì–æ–¥–æ–≤—â–∏–Ω–∞ - 05.09</code>\n\n"
        f"–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
    )
    await callback.message.edit_text(text, parse_mode="HTML")
    await callback.answer()


@router.message(BirthdayStates.awaiting_import_file, Command("cancel"))
async def cancel_import(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞."""
    await state.clear()
    await message.answer("üö´ –ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
    await show_birthdays_list(message, state)


@router.message(BirthdayStates.awaiting_import_file, F.document)
async def process_import_file(message: types.Message, state: FSMContext):
    if not message.document or message.document.mime_type != "text/plain":
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .txt")
        return

    status_msg = await message.reply("‚è≥ –ü–æ–ª—É—á–∏–ª —Ñ–∞–π–ª. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

    file_info = await message.bot.get_file(message.document.file_id)
    file_content_bytes = await message.bot.download_file(file_info.file_path)

    try:
        file_content = file_content_bytes.read().decode('utf-8')
    except UnicodeDecodeError:
        await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8.")
        return

    lines = file_content.splitlines()
    birthdays_to_add = []
    errors_count = 0

    for line in lines:
        if '-' not in line:
            errors_count += 1
            continue

        parts = line.split('-', 1)
        name = parts[0].strip()
        date_str = parts[1].strip()

        parsed_date = parse_date(date_str)
        if name and parsed_date:
            day, month, year = parsed_date
            birthdays_to_add.append((name, day, month, year))
        else:
            errors_count += 1

    if not birthdays_to_add:
        await status_msg.edit_text("–í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
        return

    added_count = await db.add_birthdays_bulk(message.from_user.id, birthdays_to_add)

    if added_count > 0:
        await db.log_user_action(message.from_user.id, 'import_birthdays_file',
                                 metadata={'imported_count': added_count})

    report_text = (
        f"‚úÖ {hbold('–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!')}\n\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: <b>{added_count}</b>\n"
        f"‚Ä¢ –°—Ç—Ä–æ–∫ —Å –æ—à–∏–±–∫–∞–º–∏: <b>{errors_count}</b>"
    )
    await status_msg.edit_text(report_text, parse_mode="HTML")

    await state.clear()
    await show_birthdays_list(message, state)