# handlers/profile.py
import logging
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hcode, hbold, hitalic

from config import MAX_NOTES_MVP, MAX_DAILY_STT_RECOGNITIONS_MVP
import database_setup as db
from inline_keyboards import get_profile_actions_keyboard
from services.tz_utils import format_datetime_for_user

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data == "user_profile")
async def user_profile_display_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏ –∫—Ä–∞—Å–∏–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await state.clear()
    telegram_id = callback_query.from_user.id
    user_profile_data = await db.get_user_profile(telegram_id)

    if not user_profile_data:
        await callback_query.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    active_notes_count = await db.count_active_notes_for_user(telegram_id)
    user_timezone = user_profile_data.get('timezone', 'UTC')
    reg_date_utc = user_profile_data['created_at']
    reg_date_local_str = format_datetime_for_user(reg_date_utc, user_timezone)
    is_vip = user_profile_data.get('is_vip', False)  # <--- –ü–æ–ª—É—á–∞–µ–º VIP-—Å—Ç–∞—Ç—É—Å

    # --- –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è ---
    profile_header = f"üë§ {hbold('–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å')}\n\n"

    # –ë–ª–æ–∫ "–û –≤–∞—Å"
    user_info_parts = [
        f"‚ñ™Ô∏è {hbold('ID')}: {hcode(user_profile_data['telegram_id'])}",
    ]
    if user_profile_data.get('username'):
        user_info_parts.append(f"‚ñ™Ô∏è {hbold('Username')}: @{hitalic(user_profile_data['username'])}")
    if user_profile_data.get('first_name'):
        user_info_parts.append(f"‚ñ™Ô∏è {hbold('–ò–º—è')}: {hitalic(user_profile_data['first_name'])}")
    user_info_block = "\n".join(user_info_parts)

    # –ë–ª–æ–∫ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ª–∏–º–∏—Ç—ã"
    # <--- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –õ–ò–ú–ò–¢–û–í --->
    notes_limit_str = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ" if is_vip else f"{MAX_NOTES_MVP}"
    stt_limit_str = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ" if is_vip else f"{MAX_DAILY_STT_RECOGNITIONS_MVP}"

    stats_info_parts = [
        f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏: {hbold(active_notes_count)} / {notes_limit_str}",
        f"–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è: {hbold(user_profile_data.get('daily_stt_recognitions_count', 0))} / {stt_limit_str}"
    ]
    stats_block = f"üìä {hbold('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')}:\n" + "\n".join(stats_info_parts)

    # –ë–ª–æ–∫ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∞"
    subscription_status = f"üëë VIP" if is_vip else "Free (MVP)"
    settings_info_parts = [
        f"–°—Ç–∞—Ç—É—Å: {hitalic(subscription_status)}",
        f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {hcode(user_timezone)}",
        f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {hitalic(reg_date_local_str)}"
    ]
    settings_block = f"‚öôÔ∏è {hbold('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')}:\n" + "\n".join(settings_info_parts)

    response_text = "\n\n".join([profile_header, user_info_block, stats_block, settings_block])

    await callback_query.answer()
    try:
        await callback_query.message.edit_text(
            response_text,
            parse_mode="HTML",
            reply_markup=get_profile_actions_keyboard()
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ: {e}")
        await callback_query.message.answer(
            response_text,
            parse_mode="HTML",
            reply_markup=get_profile_actions_keyboard()
        )