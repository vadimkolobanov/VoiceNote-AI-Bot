# handlers/profile.py
import logging
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hcode, hbold, hitalic

from config import MAX_NOTES_MVP
import database_setup as db
from inline_keyboards import get_main_menu_keyboard  # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_main_menu_keyboard

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data == "user_profile")
async def user_profile_display_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å
    telegram_id = callback_query.from_user.id
    user_profile_data = await db.get_user_profile(telegram_id)

    if not user_profile_data:
        await callback_query.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start.", show_alert=True)
        # –ú–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        try:
            await callback_query.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –≤–∞—à–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start.",
                reply_markup=get_main_menu_keyboard()
            )
        except:  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            await callback_query.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –≤–∞—à–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start.",
                reply_markup=get_main_menu_keyboard()
            )
        return

    active_notes_count = await db.count_active_notes_for_user(telegram_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é

    profile_info_parts = [f"{hbold('üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:')}"]
    profile_info_parts.append(f"Telegram ID: {hcode(user_profile_data['telegram_id'])}")
    if user_profile_data.get('username'):
        profile_info_parts.append(f"Username: @{hitalic(user_profile_data['username'])}")
    if user_profile_data.get('first_name'):
        profile_info_parts.append(f"–ò–º—è: {hitalic(user_profile_data['first_name'])}")

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ UTC
    reg_date_utc = user_profile_data['created_at']
    profile_info_parts.append(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {reg_date_utc.strftime('%d.%m.%Y %H:%M UTC')}")

    subscription_status_text = "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è (MVP)"  # –ó–∞–≥–ª—É—à–∫–∞
    profile_info_parts.append(f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {hitalic(subscription_status_text)}")
    profile_info_parts.append(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫: {hbold(active_notes_count)} –∏–∑ {MAX_NOTES_MVP} (MVP –ª–∏–º–∏—Ç)")

    response_text = "\n".join(profile_info_parts)

    await callback_query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        await callback_query.message.edit_text(
            response_text,
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )
    except Exception:
        await callback_query.message.answer(
            response_text,
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )