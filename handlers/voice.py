# handlers/voice.py
import logging

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hcode

import database_setup as db
from config import (
    MIN_VOICE_DURATION_SEC, YANDEX_STT_CONFIGURED,
    MIN_STT_TEXT_CHARS, MIN_STT_TEXT_WORDS, MAX_VOICE_DURATION_SEC
)
from inline_keyboards import get_undo_creation_keyboard
from services.common import get_or_create_user, check_and_update_stt_limit, increment_stt_recognition_count
from services import note_creator
from utills import download_audio_content, recognize_speech_yandex

logger = logging.getLogger(__name__)
router = Router()


@router.message(F.voice)
async def handle_voice_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º."""
    await state.clear()
    await get_or_create_user(message.from_user)
    user_tg = message.from_user

    can_recognize, remaining_recognitions = await check_and_update_stt_limit(user_tg.id)
    if not can_recognize:
        await message.reply("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. üòî")
        return

    voice = message.voice
    if voice.duration < MIN_VOICE_DURATION_SEC:
        await message.reply(f"üé§ –í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ ({voice.duration} —Å–µ–∫.).")
        return

    if voice.duration > MAX_VOICE_DURATION_SEC:
        await message.reply(f"üé§ –í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({voice.duration} —Å–µ–∫.).")
        return

    status_msg = await message.reply("‚úîÔ∏è –ó–∞–ø–∏—Å—å –ø–æ–ª—É—á–µ–Ω–∞. –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")

    try:
        file_info = await message.bot.get_file(voice.file_id)
    except Exception as e:
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –æ—Ç Telegram: {e}")
        return

    audio_bytes = await download_audio_content(f"https://api.telegram.org/file/bot{message.bot.token}/{file_info.file_path}")
    if not audio_bytes:
        await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return

    if not YANDEX_STT_CONFIGURED:
        await status_msg.edit_text("‚ùå –°–µ—Ä–≤–∏—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    raw_text_stt = await recognize_speech_yandex(audio_bytes)

    if not raw_text_stt or not raw_text_stt.strip():
        await status_msg.edit_text("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
        return

    await increment_stt_recognition_count(user_tg.id)

    if len(raw_text_stt.strip()) < MIN_STT_TEXT_CHARS or len(raw_text_stt.strip().split()) < MIN_STT_TEXT_WORDS:
        await status_msg.edit_text(f"‚ùå –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {hcode(raw_text_stt)}")
        return

    await status_msg.edit_text(
        f"üó£Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {hcode(raw_text_stt)}\n\n"
        "‚ú® –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ —Å–æ—Ö—Ä–∞–Ω—è—é –∑–∞–º–µ—Ç–∫—É..."
    )

    success, user_message, new_note, needs_tz_prompt = await note_creator.process_and_save_note(
        bot=message.bot,
        telegram_id=user_tg.id,
        text_to_process=raw_text_stt,
        audio_file_id=voice.file_id,
        message_date=message.date
    )

    if success:
        await db.log_user_action(
            user_tg.id,
            'create_note_voice_auto',
            metadata={'note_id': new_note['note_id']}
        )
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏ ---
        is_shopping_list = new_note.get('category') == '–ü–æ–∫—É–ø–∫–∏'
        keyboard = get_undo_creation_keyboard(new_note['note_id'], is_shopping_list=is_shopping_list)
        # ---------------------------------------------------

        await status_msg.edit_text(user_message, parse_mode="HTML", reply_markup=keyboard)
    else:
        await status_msg.edit_text(user_message, parse_mode="HTML")